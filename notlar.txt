#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	//printf("ahmet\ndeniz\nelif\nutku\n");
	//printf("ahmet\ndeniz\telif\tutku\n");
	//printf("\x42URS\x41\xA");
	//printf("\102\101\102\101");

	//printf("\"necati\"");
	printf("\\\"necati\\\"");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


prompt

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	printf("iki tam sayi giriniz: ");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


x + y

%...

conversion specifier
//formatlama bilgisi

%d  %i


x = 543

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 6743;

	printf("x = %d\n", x);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//x = 6743
//y = 86721

int main()
{
	int x = 6743;
	int y = 86721;

	printf("x = %d\n", x);
	printf("y = %d\n", y);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//x = 6743
//y = 86721

int main()
{
	int x = 6743;
	int y = 86721;

	printf("x = %d\ny = %d\n", x, y);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


%d %i
%x onaltýlýk sayý sistemi
%o sekizlik sayý sistemi

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	printf("(%d)  (%x) (%X) (%o)\n", ival, ival, ival, ival);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	double dval1 = 23.72384291;
	double dval2 = 23.72384231;

	printf("dval1 = (%f)\n", dval1);
	printf("dval2 = (%f)\n", dval2);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	double dval1 = 23.72384291;
	double dval2 = 23.75623241;

	printf("dval1 = (%.3f)\n", dval1);
	printf("dval2 = (%.1f)\n", dval2);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	double vat = 12.4;

	printf("kdv = %%%.2f\n", vat);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);  //12  5

	//12 * 12 + 5 * 5 = 169

	printf("%d * %d + %d * %d = %d\n", x, x, y, y, x * x + y * y);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

int main()
{
	FILE *f = fopen("karekok.txt", "w");
	//....


	for (int i = 0; i <= 10000; ++i) {
		fprintf(f, "%5d    %f\n", i, sqrt(i));
	}

	fclose(f);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

int main()
{
	FILE *f = fopen("karekok.txt", "w");
	//....


	for (int i = 0; i <= 10000; ++i) {
		fprintf(f, "%5d    %f\n", i, sqrt(i));
	}

	fclose(f);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>


int ndigit(int val)
{
	if (val == 0)
		return 1;

	int digit_count = 0;

	while (val) {
		++digit_count;
		val /= 10;
	}

	return digit_count;
}



int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	printf("%d sayisi %d basamakli\n", ival, ndigit(ival));
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>


int max3(int a, int b, int c)
{
	int max = a;
	if (b > max)
		max = b;

	if (c > max)
		max = c;

	return max;
}

int main()
{
	int x, y, z;
	printf("uc tamsayi girin: ");
	scanf("%d%d%d", &x, &y, &z);

	printf("(%d) (%d) ve (%d) sayilarinin en buyugu (%d)\n", x, y, z, max3(x, y, z));
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

int main()
{
	double dval;
	printf("bir gercek sayi giriniz: ");
	scanf("%lf", &dval);

	int n = printf("%f", sqrt(dval));
	printf("\nn = %d\n", n);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 871298;

	printf("%d", printf("%d", printf("%d", x)));
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


bir giris yapiniz: 234baba

98
97
98
97
10

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	
	printf("bir tamsayi girin: "); //18ali
	//scanf("%d", &ival);
	scanf("%o", &ival);

	printf("ival = %d\n", ival);





}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	double dval;
	
	printf("bir giris yapin: "); //18.912ali
	scanf("%d", &ival);  
	scanf("%lf", &dval);

	printf("ival = %d\n", ival); //18
	printf("dval = %f\n", dval); //.912

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	double dval;
	
	printf("bir giris yapin: "); //18.912ali
	scanf("%d%lf", &ival, &dval);

	printf("ival = %d\n", ival); //18
	printf("dval = %f\n", dval); //.912

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//skip white space

int main()
{
	int x;

	printf("bir giris yapin: ");
	scanf("%d", &x);

	printf("x = %d\n", x);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//skip white space

int main()
{
	int a;
	double b;

	printf("bir tamsayi girin: ");
	scanf("%d", &a);
	printf("bir gercek sayi girin:  ");
	scanf("%lf", &b);

	printf("a = %d\n", a);
	printf("b = %f\n", b);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

scanf iþlevinin baþarýsý

int ival;


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	
	int n = scanf("%d", &ival);

	printf("n = %d\n", n);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 123456;

	printf("%d", printf("%d", printf("%d", x)));


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	
	
	int n = scanf("%d", &ival);

	if (n == 1) {
		printf("evet giris basarili girilen tamsayi : %d\n", ival);
	}
	else {
		printf("giris basarisiz\n");
	}




}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


void clear_input_buffer()
{
	int c;

	while ((c = getchar()) != '\n' && c != EOF)
		;
}

int main()
{
	int ival;
	int count = 0;

	while (1) {
		printf("[%d] bir tamsayi girin: ", ++count);
		int n = scanf("%d", &ival);
		if (n == 1)
			break;
		printf("\ngiris basarisiz\n");
		clear_input_buffer();
	}
	

	printf("giris basarili ival = %d\n", ival);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	int n = scanf("%d", &ival);
	//girisi su sekilde yapin crtl z enter
	printf("n = %d\n", n); //-1

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x, y, z;
	printf("uc tamsayi girin: ");
	scanf("%d%d%d", &x, &y, &z);

	printf("%d %d ve %d sayilarinin aritmetik ortalamasi %f\n", x, y, z, (x + y + z) / 3.);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int power(int base, int exp)
{
	int result = 1;

	while (exp--)
		result *= base;

	return result;
}

int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	printf("%d ^ %d = %d\n", x, y, power(x, y));
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int ndigit(int val)
{
	if (val == 0)
		return 1;

	int digit_count = 0;

	while (val) {
		++digit_count;
		val /= 10;
	}

	return digit_count;
}


int power(int base, int exp)
{
	int result = 1;

	while (exp--)
		result *= base;

	return result;
}

int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	printf("%d\n", power(ndigit(x), ndigit(y)));
	
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

operatörler (operators) 
iþleçler

-----------------------------------------
C Dilinde 45 operatör vardýr.

!  +   -   >  
>=  <=  ++  --
>>=   <<=
sizeof
------------------------------------------

operator (operatör - iþleç)
operand  (operand - terim)

x + y

unary operator		(tek operand alan)    !x     +5   ~1024
binary operator     (iki operand alan)     a > b    x * y
ternary operator    x ? y :  z

prefix  (ön ek konumunda)

postfix (suffix) (sonek konumunda)

infix   (ara ek konumunda)

x + y  (binary infix)

++z    unary prefix

t--   unary postfix

-----------------------------------------------------
45 tane operatörü

+     a + b  (toplama operatörü)
	  +ival  (iþaret operatörü) (sign operator)

-     a - b  (çýkartma operatörü)
	  -ival  (iþaret operatörü) (sign operator)


&     x & y  (bitsel ve) (bitwise and)
      &x     addresss of (adres operatörü)


*     a * b  (çarpma - nultiplication)
      *ptr   (dereferencing - indirection) (içerik operatörü)


operatörün ürettiði deðer

C'de her operatörün ürettiði bir deðer vardýr.

operators generate values
yield

-------------------------------------------

constraint (kýsýtlama)

% (modulus - remainder) (kalan)
C'de tamsayý operatörü


a) tür açýsýndan bir kýsýtlamaya tabi
b) value category 
     bazý operatörlerin operandlarýnýn L value expression olmasý zorunluluðu var

	 = += -= ++ --

operatör önceliði
precedence - priority

* çarpma
+ toplama ve çýkartma
kartþýlaþtýrma >

x * y + z > 10 - a
((x * y) + z) > (10 - a)



operatör önceliði ne demek
(ifade içindeki) hangi operatörün ürettiði deðer (ifade içindeki) hangi operatörün operandý olacak

operatör önceliði ne demek deðil?
op. önc. bir iþlemin fiziksel olarak daha önce yapýlacaðý anlamýna gelmiyor

a = f1() * 5 + f2();
----------------------------------

operatör öncelik tablosu

-----------------------------------------
1	() [] . ->
-----------------------------------------
2   + - ! ~ ++ -- & * sizeof (T)   saðdan sola
-----------------------------------------
3   * /  %   (multiplicative)      soldan saða              
-----------------------------------------
4   +  -  (additive)
-----------------------------------------
5   >>   <<
-----------------------------------------
6   < <= > >=
-----------------------------------------
7   ==   !=
-----------------------------------------
8    &
-----------------------------------------
9    ^ 
-----------------------------------------
10   |
-----------------------------------------
11   &&
-----------------------------------------
12   ||
-----------------------------------------
13   ?  :                   saðdan sola
-----------------------------------------
14   =  += *= /= -=  %= >>=  <<=  &= ^= |=   saðdan sola
-----------------------------------------
15  ,
-----------------------------------------


x > y & z++
(x > y) & (z++)

x * y + z > 10
d1 + z > 10
d2 > 10
d3


((x * y) / 10) % 4

associativity => öncelik yönü

left associative  (soldan saða)
right associative  (saðdan sola)

!~x++
!(~(x++))


!~x++
!~d1
!d2
d3


operatörün  (bir ifadenin)
a) bir yan etkisi (side effect) var 
b) bir yan etkisi (side effect) yok

!x

++y


yan etkisi olan operatörler
++ --
=  += -= *= /= %= >>=  <<=  &= ^= |=

operatörle oluþturulan ifadeler tüm ifadeleri için olduðu gibi
bir value category

a) L value expression
b) R value expression

//x + y

*ptr
ptr[]



---------------------------------------------------------

aritmetik operatörler
--------------------------

+ -  ++ --
* / %
+ -

karþýlaþtýrma op. (relational / comparison) operatörleri
--------------------------------------------------------
< <= > >=
== !=

lojik operatörler (logical operators)
--------------------------------------------------------

!  && ||

atama operatörleri
--------------------------------------------------------
=
+= -= *= /= %=

virgül operatörü
--------------------------------------------------------


pointer operatörleri    &  *  []   ->
bitsel operatörler      ~ >> <<  & ^ |   >>= <<=  &= ^= |=
koþul operatörü
sizeof operatörü




#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	printf("(%d) + (%d) = (%d)\n", x, y, x + y);
	printf("(%d) - (%d) = (%d)\n", x, y, x - y);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	printf("(%d) + (%d) = (%d)\n", x, y, x + y);
	printf("(%d) - (%d) = (%d)\n", x, y, x - y);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

+x
x


+x   +10
-x   -10   (0 - x)

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 34;

	x //ifadesinin deðer kategorisi L val expression
	//+x ifadenin deðer kategorisi R val expression


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


C ve C++ dillerinde iþaret operatörü + ile oluþturulan ifadelerin
deðer kategorisi (value category)  R value expr


x   ====>  L val expr
+x  ====>  R value expr


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 34;
	int y = -5;

	printf("(%d)  (%d)\n", x, -x);
	printf("(%d)  (%d)\n", y, -y);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	printf("ival = %d\n", ival);

	ival = -ival;

	printf("ival = %d\n", ival);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	x = -x - y;

	printf("x = %d\n", x);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



a * b
a / b
a % b

a * b

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	printf("(%d) * (%d)  = (%d)\n", x, y, x * y);
	printf("(%d) / (%d)  = (%d)\n", x, y, x / y);
	printf("(%d) %% (%d) = (%d)\n", x, y, x % y);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//2395

int main()
{
	int ival;
	printf("4 basamakli bir tamsayi girin: ");
	scanf("%d", &ival);

	printf("binler basamagi (%d)\n", ival / 1000);
	printf("yuzler basamagi (%d)\n", ival % 1000 / 100);
	printf("yuzler basamagi (%d)\n", ival / 100 % 10);
	printf("onlar  basamagi (%d)\n", ival / 10 % 10);
	printf("onlar  basamagi (%d)\n", ival % 100 / 10);
	printf("onlar  basamagi (%d)\n", ival % 10);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//2395

int main()
{
	int ival;
	printf("4 basamakli bir tamsayi girin: ");
	scanf("%d", &ival);

	printf("sayinin basamaksal tersi = %d\n", ival / 1000 + ival % 1000 / 100 * 10 + ival / 10 % 10 * 100 + ival % 10 * 1000);
	printf("sayinin basamaksal tersi = %d\n", (ival / 1000) + (ival % 1000 / 100 * 10) + (ival / 10 % 10 * 100) + (ival % 10 * 1000));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int hour;
	int n;

	printf("simdi saat kac: ");
	scanf("%d", &hour);
	printf("kac saat sonrasi: ");
	scanf("%d", &n);

	printf("%d  saat sonrasi saat: %d\n", n, (hour + n) % 12);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

iþaretli tamsayý türlerinde taþma tanýmsýz davranýþtýr.
iþaretsiz tamsayý türlerinde taþma yoktur (modüler aritmetik vardýr)

//int 2 byte olsun


x + y
x * y

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

int main()
{
	double d1, d2;
	printf("iki gercek sayi giriniz: ");
	scanf("%lf%lf", &d1, &d2);

	printf("(%f) %% (%f) = %f\n", d1, d2, fmod(d1, d2));
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	if (ival & 1) { //burada kullanilan & operatör bitsel & operatörü ileride göreceðiz
		printf("tek sayi\n");
	}
	else {
		printf("cift sayi\n");
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

arttýrma ve eksiltme operatörleri
increment
decrement operatörleri


++
--


++x     (ön ek artý artý operatörü)
x++     (son ek artý artý operatörü)

--x     (ön ek eksi eksi operatörü)
x--     (son ek eksi eksi operatörü)


Bu operatörlerin operandlarý 
sol taraf deðeri (L value expression)
olmak zorunda

++x;
x++;


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

int main()
{
	int x = 20;

	printf("x = %d\n", x);
	x = x + 1;  //1
	printf("x = %d\n", x);
	x += 1;  //2
	printf("x = %d\n", x);
	++x;  //3
	printf("x = %d\n", x);
	x++;  //4
	printf("x = %d\n", x);



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

int isprime(int x);

int main()
{
	int prime_count = 0;

	for (int i = 0; i < 10000; ++i) {
		if (isprime(i))
			++prime_count;
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

int x = 10;

--x

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;

	printf("%d\n", x++);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;

	printf("%d\n", ++x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;

	printf("%d\n", --x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;

	printf("%d\n", x--);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;

	int y = x++;

	printf("y = %d\n", y);
	printf("x = %d\n", x);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;

	int y = ++x;

	printf("y = %d\n", y);
	printf("x = %d\n", x);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void func(int a)
{
	printf("func islevine gelen deger = %d\n", a);
}
int main()
{
	int x = 5;
	int y = 5;
	int z = 5;
	int t = 5;

	func(++x);
	func(y++);
	func(--z);
	func(t--);

	printf("x = %d\n", x); //6
	printf("y = %d\n", y); //6
	printf("z = %d\n", z); //5
	printf("t = %d\n", t); //5





}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x, y = 20;

	x = y++;
	//x = y;	y = y + 1;

	printf("x = %d\n", x);
	printf("y = %d\n", y);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


func(x);
x = x + 1;
----------------

func(x++);

a[k] = ival;
k = k + 1;
--------------------

a[k++] = ival;


if (expr) {
	if (++cnt == 100)
		break;

}


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;

	printf("%d\n", x++); //10
	//artik bu noktada x degiskeninin degeri 11
	printf("%d\n", ++x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 17;
	int y = 11;

	printf("%d\n", x++ - y--); 
	printf("%d\n", x  % y); 


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 17;
	int y = 11;

	printf("%d\n", x++ - y--); 
	//x => 18  y => 10
	printf("%d\n", x++  % --y); 
	printf("%d\n", x + y); 


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


int main()
{
	int x = 10;
	int y = 40;

	int z = x++ + y;

	printf("%d\n", z);
}
---------------------------------------------

maximum munch  (en uzun atom kuralý)

sum>>=val+++nec;

sum
>>=
val
++
+
nec
;

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;
	int y = 40;

	int z = x+++y; //int z = x++ + y;

	printf("z = %d\n", z);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

C Dilinde
++x   R value
x++   R value 

--x   R value
x--   R value 

C++ dilinde
++x   L value
x++   R value 

--x   L value
x--   R value 

x++ ++ +y

++++x

++(x++)

karþýlaþtýrma operatörleri
relational operators (comparison)

a < b


<=
>
>=
==
!=


5   >>  <<
---------------------------------
6   < <= > >=
---------------------------------
7   ==   !=
---------------------------------
8    &


a > b


C Dilinde (diðer birçok programlama dilinden farklý olarak)
karþýlaþtýrma operatörleri _Bool türden deðil
iþaretli int türden deðer üretirler:

önerme doðru ise üretilen deðer int türden 1
önerme yanlýþ ise üretilen deðer int türden 0

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	printf("(%d) >  (%d) = (%d)\n", x, y, x > y);
	printf("(%d) >= (%d) = (%d)\n", x, y, x >= y);
	printf("(%d) <  (%d) = (%d)\n", x, y, x < y);
	printf("(%d) <= (%d) = (%d)\n", x, y, x <= y);
	printf("(%d) == (%d) = (%d)\n", x, y, x == y);
	printf("(%d) != (%d) = (%d)\n", x, y, x != y);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


x = y == z;

if (y == z)
	x = 1;
else
    x = 0;


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x;
	printf("bir tamsayi girin: ");
	scanf("%d", &x);

	printf("sign(%d) = (%d)\n", x, (x > 0) - (x < 0));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x, y, z, t;
	printf("dort tamsayi girin: ");
	scanf("%d%d%d%d", &x, &y, &z, &t);

	int pos_count = 0;

	if (x > 0)
		++pos_count;

	if (y > 0)
		++pos_count;

	if (z > 0)
		++pos_count;

	if (t > 0)
		++pos_count;

	printf("degiskenlerin %d tanesi pozitif\n", pos_count);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x, y, z, t;
	printf("dort tamsayi girin: ");
	scanf("%d%d%d%d", &x, &y, &z, &t);

	int pos_count = (x > 0) + (y > 0) + (z > 0) + (t > 0);

	printf("degiskenlerin %d tanesi pozitif\n", pos_count);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


-b / 2a
-b / 2 * a			-ba / 2
-b / (2 * a)
-b / 2 / a

if (10 < x < 20)  //always true

if (10 < x < 20)  //always true

if (x > 10 && x < 20) 

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	double dval = 0.;

	for (int i = 0; i < 10; ++i) {
		dval += .1;
	}

	if (dval == 1.)
		printf("esit\n");
	else
		printf("esit degil\n");



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


		=
		==


		#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	if (ival = 0)
		printf("dogru\n");
	else
		printf("yanlis\n");

	printf("ival = %d\n", ival);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

lojik operatörler (mantýksal operatörler)
=========================================



lojik deðil


  p             deðil p
======          =======
doðru           yanlýþ
yanlýþ          doðru



p       q       p ve q
=======================
doðru   doðru    doðru
doðru   yanlýþ   yanlýþ
yanlýþ  doðru    yanlýþ
yanlýþ  yanlýþ   yanlýþ


p       q       p veya q
=======================
doðru   doðru    doðru
doðru   yanlýþ   doðru
yanlýþ  doðru    doðru
yanlýþ  yanlýþ   yanlýþ


p       q       p özel veya q
=======================
doðru   doðru    yanlýþ
doðru   yanlýþ   doðru
yanlýþ  doðru    doðru
yanlýþ  yanlýþ   yanlýþ


!  (lojik deðil) (logical not)
&&  (lojik ve)    (logical and)
||  (lojik veya)  (logical or)


C'de doðal bir bool türü olmadýðýndan lojik operatörlerin operandlarý herhangi bir türden olabilir.
Bu durumda kullanýlan ifadeler "lojik yorumlamaya" tabi tutulur:

lojik  yorumlama þöyle yapýlýr: ifadenin aritmetik deðeri hesaplanýr
0'dan farklý tüm deðerler "lojik doðru" olarak yorumlanýr
0 deðeri "lojik yanlýþ" olarak yorumlanýr


C'de lojik ifade beklenen yerler


a) lojik deðil operatörünün operandý olan ifade

!expr

b) lojik ve operatörünün operandý olan ifadeler

exp1 && exp2

c) lojik veya operatörünün operandý olan ifadeler
exp1 || exp2

d) if parantezi icindeki ifade
if (exp)

e) while parantezi icindeki ifade
while (exp)

f) for ; ; arasýndaki ifade

for(;exp ;)

g) do while parantexi icindeki ifade

do {}while(exp)

h) koþul operatörünün 1. operandý olan ifade
exp ? x : y


!

&&

||


------------------------------------
2      !
------------------------------------
11     &&
------------------------------------
12     ||
------------------------------------

x = 15

!!x 

!!exp ifadesinin deðeri exp ifadesinin lojik deðeri

exp => non-zero  !!exp   => 1
exp => zero      !!exp   => 0


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	printf("!(%d)  = %d\n", ival, !ival);
	printf("!!(%d) = %d\n", ival, !!ival);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


if (exp)


x && y     logical and
x &  y     bitwise and


x || y     logical or
x |  y     bitwise or





#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	printf("(%d) && (%d) = (%d)\n", x, y, x && y);
	printf("(%d) || (%d) = (%d)\n", x, y, x || y);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//   00001010
//   00010100
//   00000000


int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	if (x && y)
		printf("lojik ve  : dogru\n");
	else
		printf("lojik ve  : yanlis\n");


	if (x & y)
		printf("bitsel ve : dogru\n");
	else
		printf("bitsel ve : yanlis\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	printf("(%d) exor (%d) = (%d)\n", x, y, !!x != !!y);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

de morgan kurallarý

!(exp1 && exp2)        !exp1  ||  !exp2
!(exp1 || exp2)        !exp1  &&  !exp2


programcýnýn && operatörünü kullanmasý gerekirken || operatörünü kullanmasý


if (x != 6 || x != 13)  //always true
	foo();


if (x == 6 && x == 13)  //always false




if (x != 6 && x != 13)  
	foo();


x 6'ya ya da 13'e eþit deðilse foo cagrilsin


equality  / equivalance

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//neco isimli bir programlama dili
//neco dilinde lojik operatörler var (C ile ayný)
//neco dilinde sadece < karþýlaþtýrma operatörü var

int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	printf("(%d) <  (%d) = (%d)\n", x, y, x < y);
	printf("(%d) >  (%d) = (%d)\n", x, y, y < x);
	printf("(%d) >= (%d) = (%d)\n", x, y, !(x < y));
	printf("(%d) <= (%d) = (%d)\n", x, y, !(y < x));
	printf("(%d) == (%d) = (%d)\n", x, y, !(x < y) && !(y < x));
	printf("(%d) != (%d) = (%d)\n", x, y, (x < y) || (y < x));
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


equality    (eþitlik)
equivalance (eþdeðerlik)

x == y
!(x < y)  && !(y < x)


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int getmid(int a, int b, int c)
{
	if (!(a > b && a > c || a < c && a < b))
		return a;

	if (!(b > a && b > c || b < a && b < c))
		return b;

	return c;
}

int main()
{
	int x, y, z;
	printf("uc tamsayi girin: ");
	scanf("%d%d%d", &x, &y, &z);

	printf("%d %d ve %d sayilarinin ortancasi %d\n", x, y, z, getmid(x, y, z));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 0;
	int y = 34;
	int z;

	z = x && ++y;

	printf("z = %d\n", z);

	printf("y = %d\n", y);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

short circuit behavior  (kýsa devre davranýþý)

if (x > 5)
	if (y < 30)
		func();


if (x > 5 && y < 30)
	func();




#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 0;
	int y = 34;
	int z;

	z = x && ++y;

	printf("z = %d\n", z);

	printf("y = %d\n", y);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

if (exp1 && exp2 && exp3  && exp4)
	//....

if (exp1)
	if (exp2)
	   if (exp3)


if (f1() && f2())


----------------------------------------
int a[size];


i = 0;

while (i < size && a[i] != ival)
	++i;

C'de atama operatörleri
=======================

assignment operators

----------------------------------------------------------
14  = += -= *= /= %= >>= <<= &= ^= |=     saðdan sola (right associative)
----------------------------------------------------------
15   ,
----------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 5;  //Buradaki = atama operatoru degil
	//initialization

	x = 4; //bu = atama operatoru

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

x = exp;

=
+= -= 

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 19;  


	x = 20;
	//20 = x; //gecersiz
	+x = 45;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 19;  

	x + 5 = 2;  //gecersiz

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

C ve C++ dillerinde atama operatörünün ürettiði deðer nesneye atanan deðerdir.

=
+= -= *= /= %= >>=  <<=  &= ^=  |=
compound assignment op.s

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 35;

	printf("x = %d\n", x);

	x = 134;

	printf("x = %d\n", x);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int func(void);

int main()
{
	int x;

	if ((x = func()) > 10) {
		//x burada kullaniliyor
	}

	//x = func();
	//if (x > 10) {
	//	//x burada kullaniliyor
	//}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

int main()
{
	int n;
	int *pd;
	////code
	////code
	////code

	if ((pd = malloc(n * sizeof(int))) == NULL) {
		printf("bellek yetersiz\n ");
		return 1;
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

atama operatörünün ürettiði deger sað operandýn deðeridir (yanlýþ)
atama operatörünün ürettiði deger nesneye atanan deðerdir (doðru)

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

int main()
{
	int ival;
	double dval = 4.987;

	ival = dval  //ifadesinin deðeri (ve türü) int türden 4



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

int func(void);
void foo(int);

int main()
{
	//döngüsel bir kod yapisi icinde
	//dongunun her turunda func islevini cagirin
	//func islevi 10'dan kucuk bir deger döndürür ise döngüden çýkýn.
	//aksi halde döngünün her turunda func islevinin geri donus degeri ile foo islevini cagirin

	int x;

	x = func();

	while (x >= 10) {
		foo(x);
		x = func();
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

int func(void);
void foo(int);

int main()
{
	//döngüsel bir kod yapisi icinde
	//dongunun her turunda func islevini cagirin
	//func islevi 10'dan kucuk bir deger döndürür ise döngüden çýkýn.
	//aksi halde döngünün her turunda func islevinin geri donus degeri ile foo islevini cagirin

	int x;


	while (1) {
		x = func();
		if (x < 10)
			break;
		
		foo(x);
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

int func(void);
void foo(int);

int main()
{
	//döngüsel bir kod yapisi icinde
	//dongunun her turunda func islevini cagirin
	//func islevi 10'dan kucuk bir deger döndürür ise döngüden çýkýn.
	//aksi halde döngünün her turunda func islevinin geri donus degeri ile foo islevini cagirin

	int x;


	while ((x = func()) >= 10)
		foo(x);



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------
14                                                                    saðdan sola
--------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int func(void)
{
	///
	return 5;
}

int main()
{
	int a, b, c, d;

	d = func();
	c = d;
	b = c;
	a = b;

	printf("a = %d\n", a);
	printf("b = %d\n", b);
	printf("c = %d\n", c);
	printf("d = %d\n", d);

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


a = b = expr;
a = b = c = d = expr;



x == y  eþitlik karþýlaþtýrma operatörü

x = y   atama operatörü

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int func(void)
{
	///
	return 5;
}

int main()
{
	int a, b, c, d;

	a = b = c = d = func();
	
	//a = (b = (c = (d = func())));

	printf("a = %d\n", a);
	printf("b = %d\n", b);
	printf("c = %d\n", c);
	printf("d = %d\n", d);

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	///
	if (ival == 5)
		printf("evet dogru\n");
	else
		printf("hayir yanlis\n");

	printf("ival = %d\n", ival);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//warning C4706: assignment within conditional expression

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	///
	if (ival = 5)  //always true
		printf("evet dogru\n");
	else
		printf("hayir yanlis\n");

	printf("ival = %d\n", ival);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//warning C4706: assignment within conditional expression

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	///
	if (ival == 0)  
		printf("evet dogru\n");
	else
		printf("hayir yanlis\n");

	printf("ival = %d\n", ival);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



Lval == Rval
Rval = Lval


x == func()
func() == x
--------------------


x = x + 5;			x += 5;
y = y - 3;			y -= 3;
z = z * 2;			z *= 2;
t = t / 10;			t /= 10;
m = m % 12;			m %= 12;


x + 5;

x + 5;

#include <stdio.h>


//warning C4552 : '+' : result of expression not used
int main()
{
	int x = 34;

	x + 20;

	printf("x = %d\n", x);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

C'nin temel kuralý!!!!!!!

Eðer bir ifade (exp= geçerli ise bu ifadenin sonuna ; atomunu koyarsanýz 
geçerli bir deyim oluþturursunuz. 

#include <stdio.h>


//warning C4552 : '+' : result of expression not used

int main()
{
	int x = 34;

	x;  //gecerli (ama anlamsiz) bir deyim
	1;  //gecerli (ama anlamsiz) bir deyim

	x + 20;  //gecerli(ama anlamsiz) bir deyim

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>


//warning C4552 : '+' : result of expression not used

int main()
{
	int x = 34;
	int y = 10;

	printf("x = %d\n", x);

	x + y;

	printf("x = %d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//4567
int sum_digit(int x)
{
	int sum = 0;

	while (x != 0) {
		sum = sum + x % 10;
		x = x / 10;
	}

	return sum;
}


int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);  //54123  5 + 4 + 1 + 2 + 3 ===> 

	printf("%d sayisinin basamaklari toplami %d\n", ival, sum_digit(ival));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//4567
int sum_digit(int x)
{
	int sum = 0;

	while (x != 0) {
		sum += x % 10;
		x /= 10;
	}

	return sum;
}


int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);  //54123  5 + 4 + 1 + 2 + 3 ===> 

	printf("%d sayisinin basamaklari toplami %d\n", ival, sum_digit(ival));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//4567 => 7
//456 => 6
//45 => 5
//4 => 4
//0

int sum_digit(int x)
{
	int sum = 0;

	while (x != 0) {
		sum += x % 10;
		x /= 10;
	}

	return sum;
}


int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);  //54123  5 + 4 + 1 + 2 + 3 ===> 

	printf("%d sayisinin basamaklari toplami %d\n", ival, sum_digit(ival));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int day, hour, min, sec;

	printf("gun, saat, dakika ve saniye olarak sure degerini giriniz: ");
	scanf("%d%d%d%d", &day, &hour, &min, &sec);

	min += sec / 60;
	sec %= 60;

	hour += min / 60;
	min %= 60;

	day += hour / 24;
	hour %= 24;

	printf("%d gun %d saat %d dakika ve %d saniye\n", day, hour, min, sec);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 110, y = 7, z = 51, t = 3;

	x -= y *= z %= t += 2;

	printf("t = %d\n", t);
	printf("z = %d\n", z);
	printf("y = %d\n", y);
	printf("x = %d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10, y = 45;

	///

	x == y;

	printf("x = %d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


sequence point (yan etki noktasi)
=================================

Aþaðýdaki kaynak kod noktalarý birer yan etki noktasýdýr (sequence point)
int z = 3;

z = 5;
y = z + 3;  //  y => 8
x = y + z;  //  x => 13

a) deyim sonu

aþaðýdaki operatörlerin 1. operandlarýndan sonra bir yan etki noktasý vardýr

i)		lojik ve operatörü
ii)		lojik veya operatörü
iii)	koþul operatörü
iv)  	virgül operatörü

int x = 10;

x++ && func(x)


----------------------
int y = 23;
if (y++)
	func(y);
else
	foo(y);

while parantezi
do while parantezi
for parantezi içinde ; atomlarýyla ayrýlan ifadeler
ilk deðer verme listesindeki virgül atomu

eðer bir nesne bir yan etkiye maruz kalmýþ ise bu nesnenin bir yan etki noktasýndan
önce tekrar kullanýlmasý "tanýmsýz davranýþtýr"


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;
	int y;

	y = x + x++;  //ub

	printf("y = %d\n", y);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;

	x = x++;  //ub
	
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;

	int y = x + (x = 56); //ub

	printf("y = %d\n", y);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;

	int y = x++ +x ; //ub
	printf("y = %d\n", y);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;
	int y = 40;

	int z = x+++y ; //maximum munch
	printf("y = %d\n", y);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;

	int z = x+++x ; //ub
	printf("y = %d\n", y);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


virgül operatörü
================
comma operator


, atomu bazý durumlarda bir operatör görevinde
, atomu bazý durumlarda bir delimiter görevinde




#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//asagidaki kodda kullanýlan hicbir virgul atomu operator degildir.
// hepsi ayiractir =>  comma separated list

int sum(int x, int y)
{
	return x + y;
}

int main()
{
	int x, y, z;
	int a[] = { 2, 6, 7, 10 };

	x = sum(10, 30);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------




--------------------------------------------------
13   ?  :    
--------------------------------------------------
14   = += -= 
--------------------------------------------------
15   ,                              soldan saða
--------------------------------------------------


exp1, exp2


virgül operatörünün sol operandýndan sonra bir yan etki noktasý vardýr

exp1, exp2

x = 5, y = x;


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;
	int y = 20;
	int z = 50;


	//++x;
	//++y;
	//++z;

	++x, ++y, ++z;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;
	int y = 20;
	int z = 50;


	//++x;
	//y = x + 5;
	//z = y + x;

	++x, y = x + 5, z = y + x;

	printf("x = %d\n", x); //11
	printf("y = %d\n", y);  //16
	printf("z = %d\n", z); //27
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

C'de n tane ardýþýk ifade deyimi yazmak ile

bu ifadeleri virgül operatörü ile birleþitrerek tek bir ifade oluþturmak
ve bu ifadeden tek bir ifade deyimi yapmak arasýnda sonuç olarak hiçbir fark yoktur.

exp1;
exp2;
....
expn;

exp1, exp2, ....expn;

============================
peki ama neden bunu yapalým?


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;
	int y = 20;
	int z = 50;

	++x, ++y, ++z;
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


void func(int a, int b);

int main()
{
	int i, k;
	//

	//for (i = 1; k = i + 1; i + k < 10'000; i++; k += i)
	for (i = 1, k = i + 1; i + k < 10'000; i++, k += i)
		func(i, k);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


blok eliminasyonu

if (x > 10) 
	++a;
	++b;

---------------------------------
if (x > 10) {
	++a;
	++b;
}


if (x > 10) 
	++a, ++b;

----------------------

C'de her operatör bir deðer üretir. virgül operatörü de bir deðer üretir.
virgül operatörünün ürettiði deðer sað operandýn deðeridir


exp1, exp2


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;
	int y = 20;
	int z;

	z = (x, y);

	printf("z = %d\n", z);

	z = (y, x);

	printf("z = %d\n", z);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	double dval = 3.4;

	if (dval > 5,2)
		printf("evet dogru\n");
	else
		printf("hayir yanlis\n");


}


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	double dval = 3.4;

	if (dval > 5.2)
		printf("evet dogru\n");
	else
		printf("hayir yanlis\n");


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	for (double dval = 2.3; dval < 5,0; dval += 0.5)
		printf("dval = %f\n", dval);



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>
double foo(double x){	return x + 5,6;}int main(){	printf("%f\n", foo(3.));}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
void func(int x){
	printf("x = %d\n", x);}// warning C4020: 'func': too many actual parametersint main()
{
	int a = 4, b = 45;

	//func(a, b); //gecersiz (1 parametresi olan isleve 2 arguman gonderilmis
	func((a, b));

}

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
void func(int x){
	printf("x = %d\n", x);}// warning C4020: 'func': too many actual parametersint main()
{
	int a = 4, b = 45;

	func((a, b));

}

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };

	for (int i = 0; i < 10; ++i) {
		printf("%d ", a[i]);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
func(10, 5)
foo((10, 5))


öncelik operatörü
=================

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int func()
{
	printf("func cagrildi\n");
	return 5;
}

int foo()
{
	printf("foo cagrildi\n");
	return 12;
}

int main()
{
	int x;

	x = func() + 5 * foo();

	printf("x = %d\n", x);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


exp1 &&  exp2
exp1 ||  exp2
exp1 ? exp2 : exp3
exp1, exp2


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int func()
{
	printf("func cagrildi\n");
	return 5;
}

int foo()
{
	printf("foo cagrildi\n");
	return 12;
}

int main()
{
	int x;

	x = func() + 5 * foo();

	printf("x = %d\n", x);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

x = -b / 2 * a;


x = -b / (2 * a);
x = -b / 2 / a

x * y + z
x * (y + z)

(x * y) + z


a * a * a + b * b * b + c * c * c

(a * a * a) + (b * b * b) + (c * c * c)


x & y << n
x & (y << n)

formatsýz standart giriþ çýkýþ fonksiyonlarý
getchar
putchar


getchar 
=======
standart giriþ akýmýnýn buffer'ýndaki ilk karakterin kodunu döndürür.
ve bu karakter buffer'dan çýkartýr. (extract eder)
eger standart giriþ akýmýnýn buffer'i bos ise (týpký scanf iþlevinde oldugu gibi)
buffer'a karakter gelmesini bekler.
getchar iþlevi de scanf iþlevi gibi "line-buffered" (satýr tamponlu) bir giriþ iþlevidir.
Yani giriþ iþleminin tamamlanmasý için standart giriþ akýmýndan bir newline karakteri gelmesi gerekiyor.
getchar echo veren bir giriþ fonksiyonudur.

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	printf("bir karakter girin: ");
	int c = getchar();

	printf("c = %d\n", c);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	printf("bir giris yapin: "); //ABC1234
	int c1 = getchar();
	int c2 = getchar();
	int c3 = getchar();

	printf("%d %d %d\n", c1, c2, c3);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	printf("bir giris yapin: "); //ABC1234
	int c1 = getchar();
	int c2 = getchar();
	int c3 = getchar();

	printf("%d %d %d\n", c1, c2, c3);
	int ival;

	scanf("%d", &ival);

	printf("ival = %d\n", ival);


}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void clear_input_buffer()
{
	int c;

	while ((c = getchar()) != '\n' && c != EOF)
		;

}

int main()
{
	printf("bir giris yapin: "); //ABC1234
	int c1 = getchar();
	int c2 = getchar();
	int c3 = getchar();

	printf("%d %d %d\n", c1, c2, c3);
	int ival;
	printf("bir tamsayi giriniz: ");
	clear_input_buffer();
	scanf("%d", &ival);

	printf("ival = %d\n", ival);


}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void clear_input_buffer()
{
	int c;

	while ((c = getchar()) != '\n' && c != EOF)
		;

}

int main()
{
	int x, y;
	printf("iki tamsayi girin: ");  //123;9897
	scanf("%d", &x);
	int c = getchar();
	scanf("%d", &y);

	printf("x = %d\n", x);
	printf("y = %d\n", y);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//34567
//x = 0
//x = x * 10 + bd

int main()
{
	int c;

	printf("bir sayi giriniz: ");
	
	int x = 0;
	while ((c = getchar()) != '\n') {
		//printf("%d\n", c - '0');
		x = x * 10 + c - '0';
	}

	printf("x = %d\n", x);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


48   0
49   1
50   2


'2'

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	printf("bir rakam karakteri girin: ");
	int c = getchar();

	printf("c = %d\n", c);
	printf("'0' = %d\n", '0');
	printf("%d\n", c - '0');
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	if (ival % 3 == 0)
		printf("evet 3'e tam bolunur\n");
	else
		printf("hayir 3'e tam bolunmez\n");
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int c;
	int sum = 0;

	printf("bir ayi girin: ");
	while ((c = getchar()) != '\n') {
		sum += c - '0';
	}
	if (sum % 3 == 0)
		printf("evet 3'e tam bolunur ");
	else
		printf("hayir 3'e tam bolunmez");

	//printf("sum = %d\n", sum);



}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x;
	int c;

	x = 0;

	
	printf("bir sayi girin : ");
	while ((c = getchar()) != '\n') {
		if (c >= '0' && c <= '9')
			x = x * 16 + c - '0';
		else if (c >= 'A' && c <= 'F')
			x = x * 16 + c - 'A' + 10;
		else if (c >= 'a' && c <= 'f')
			x = x * 16 + c - 'a' + 10;
	}

	printf("x = %d\n", x);

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>


int main()
{
	int x;
	int c;

	x = 0;

	
	printf("bir sayi girin : ");
	while ((c = getchar()) != '\n') {
		if (c >= '0' && c <= '9')
			x = x * 16 + c - '0';
		else if (c >= 'A' && c <= 'F')
			x = x * 16 + c - 'A' + 10;
		else if (c >= 'a' && c <= 'f')
			x = x * 16 + c - 'a' + 10;
	}

	printf("x = %d\n", x);

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

line-buffered olmayan bir giriþ fonksiyonu

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>

int main()
{
	int c;
	
	printf("bir karakter girin:  ");
	//c = getchar();
	//c = _getch();
	c = _getche();

	printf("\nc = %d\n", c);

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>

int putchar(int c);

int main()
{
	putchar(65);
	putchar('A');

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>


int main()
{
	for (int c = '0'; c <= '9'; ++c)
		putchar(c);

	for (int c = 'A'; c <= 'Z'; ++c)
		putchar(c);

	for (int c = 'a'; c <= 'z'; ++c)
		putchar(c);

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <Windows.h>


int main()
{
	for (;;) {
		putchar(rand() % 26 + 'A');
		Sleep(rand() % 20 * 5);
	}



}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <Windows.h>


int main()
{
	printf("parolayi girin: ");
	int c1 = _getch();
	putchar('*');
	int c2 = _getch();
	putchar('*');
	int c3 = _getch();
	putchar('*');
	int c4 = _getch();
	putchar('*');

	printf("\n\n\n");
	putchar(c1);
	putchar(c2);
	putchar(c3);
	putchar(c4);


}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <Windows.h>


void display_random_psw()
{
	int len = rand() % 5 + 8;
	for (int i = 0; i < len; ++i) {
		putchar(rand() % 26 + 'A');
	}
	printf("\n");

}

int main()
{
	display_random_psw();

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

kontrol deyimleri (control statements)

statement

	expression statement
	null statement  (boþ deyim)   ;
	compound statement (bileþik deyim)
	control statement 
	----------------------------

	if

	while
	do while
	for

	goto
	switch

	break
	continue
	return
	

if statement
============

yalýn if deyimi

conditional expresion (koþul ifade)

if (x > 10)
	++a;

if (expr != 0)
	++a;

if (expr)
	++a;

if (x)
	foo();

if (x != 0)
	foo();

if (x)
	foo();

if (expr == 0)
	foo();

if (!expr)
	foo();

if (!x)
if (x == 0)

if (isprime(x) != 0)

if (isprime(x))

if (isprime(x) == 0)
if (!isprime(x))

if (x > 10 &&  y < 20 && z == 10 && t == 30)

if (x > 10 && f1() != 0 && f2() > 10 && f3() == 5)

if (idx < size && a[idx] > 10)

if (f1() && f2())
--------------------

if (10 < x < 20)  //always true
if (x > 10 && x < 20) 

if (dval > 4,5) //always true

if (x == 5)

if (5 == x)

if (x != 10 || x != 56) //always true

if (func())

if (func)

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int func()
{
	printf("func cagrildi\n");
	return 0;
}

int main()
{
	if (func())
		printf("necati\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int func()
{
	printf("func cagrildi\n");
	return 0;
}

int main()
{
	if (func) //function to pointer conversion -----> true
		printf("necati\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


if (expr)
	statement;

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int foo(void);

int main()
{
	int x;

	if ((x = foo()) > 10) {
		//use x here
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int foo(void);

int main()
{
	int x;

	x = foo();
	if (x > 10) {
		//use x here
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int foo(void);

int main()
{
	int x = -1;

	if (x++)
		printf("%d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

if (expr)
	statement1;  //true path
else
	statement2;  //false path




#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	if (ival % 2 == 0)
		printf("%d cift sayi\n", ival);
	else
		printf("%d tek sayi\n", ival);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	if (ival % 2 == 0)
		printf("%d cift sayi\n", ival);
	//else olmali
	printf("%d tek sayi\n", ival);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

//gecersiz

if (x > 10)
else
	++a;


if (x > 10)
	;
else
	++a;

if (x <= 10)
	++a;

if (!(x > 10))
-----------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	if (ival % 2 == 0);
		printf("%d cift sayi\n", ival);
	else //gecersiz
		printf("%d tek sayi\n", ival);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


if (x > 10)
	if (y > 20)
		++a;
//----------------------------------------------------------------------------------------------------

if (x > 10 && y > 20)
	++a;


//dangling else

if (x > 10)
	if (y > 20)
		++a;
    else
	    ++b;


if (x > 10) {
	if (y > 20)
		++a;
}
else
    ++b;
------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10, y = 30, z = 45, t = 325;

	if (x > 5)
		if (y > 10)
			++y;
		else
			++z;
	else
		t = 23;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

if (x == 5)
	f1();
else 
	if (x == 9)
		f2();
	else 
		if (x == 13)
			f3();
		else 
			if (x == 27)
				f4();


if (x == 5)
	f1();
else if (x == 9)
	f2();
else if (x == 13)
	f3();
else if (x == 27)
	f4();



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int a[100] = {
	928, 773, 918, 827, 453, 879, 667, 492, 524, 541,
	335, 782, 239, 960, 814, 537, 191, 396, 218, 797,
	693, 951, 962, 787,  40, 124, 328, 626, 497, 162,
	967, 315, 283,  66, 620, 126, 336, 225, 508, 982,
	575, 642,  79, 483, 394, 737, 539, 463, 911, 267,
	100, 980, 581, 849, 139, 379, 698, 759, 501, 103,
	218, 336, 693, 908, 379, 684, 412, 354, 295, 909,
	328, 879, 625, 190,  19, 771, 507, 637, 357, 573,
	456, 842, 948, 863, 173,  64, 140, 317,  86, 349,
	594, 860, 838, 749, 485, 633, 702, 355,  71, 375,
	};
	int min = a[0];
	int max = a[0];

	for (int i = 1; i < 100; ++i) {
		if (a[i] > max)
			max = a[i];
		else if (a[i] < min)
			min = a[i];
	}

	printf("min = %d\n", min);
	printf("max = %d\n", max);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

test (sýnama) iþlevleri

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//
int isprime(int);

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	//ival asal sie
	if (isprime(ival) != 0) {
		//kod
	}

	//ival asal degilse
	if (isprime(ival) == 0) {
		//kod
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//
int isprime(int);

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	//ival asal sie
	if (isprime(ival)) {
		//kod
	}

	//ival asal degilse
	if (!isprime(ival)) {
		//kod
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


//eger x ve y'nin asallýklarý eþit ise
ikisi de asal ise ya da ikisi de asal degil ise


if (isprime(x) == isprime(y))
---------------------------------------------
if (!!isprime(x) == !!isprime(y))




int is_temp_ok(double cel)
{
	return cel > 10. && cel < 25.;
}

int is_odd(int x)
{
	return x % 2 != 0;
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------




4'e tam bolunen yillardan
	100'e tam bolunmeyenler
		ya da
	400'e tam bolunenler


if (y % 4 == 0)

1900 yýlý artýk yýl degildir!!!!

1987	artik yil degil
1984	artik yil
2000	artik yil
1900 

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int isleap(int y)
{
	return y % 4 == 0 && (y % 100 != 0 || y % 400 == 0);
}


int main()
{
	int year;
	printf("bir yil girin: ");
	scanf("%d", &year);

	if (isleap(year))
		printf("%d artik yil\n", year);
	else
		printf("%d artik yil degil\n", year);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

standart ctype kütüphanesxi
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>


int main()
{
	int ch;

	printf("evet mi (e) hayir mi (h):  ");
	ch = getchar();

	if (ch == 'e')
		printf("evet dediniz\n");
	else if (ch == 'h')
		printf("hayir dediniz\n");
	else
		printf("gecersiz yanit\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>


int main()
{
	int ch;

	printf("evet mi (e) hayir mi (h):  ");
	ch = getchar();

	if (ch == 'e')
		printf("evet dediniz\n");
	else if (ch == 'h')
		printf("hayir dediniz\n");
	else
		printf("gecersiz yanit\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>


int main()
{
	int ch;

	printf("bir karakter girin:  ");
	ch = getchar();

	if (isupper(ch))
		printf("buyuk harf\n");
	else
		printf("buyuk harf degil\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>


int main()
{
	int ch;

	printf("bir karakter girin:  ");
	ch = getchar();

	if (isupper(ch))
		printf("isupper true\n");
	else
		printf("isupper false\n");

	if (islower(ch))
		printf("islower true\n");
	else
		printf("islower false\n");

	if (isalpha(ch))
		printf("isalpha true\n");
	else
		printf("isalpha false\n");

	if (isdigit(ch))
		printf("isdigit true\n");
	else
		printf("isdigit false\n");

	if (isalnum(ch))
		printf("isalnum true\n");
	else
		printf("isalnum false\n");

	if (isxdigit(ch))
		printf("isxdigit true\n");
	else
		printf("isxdigit false\n");

	if (ispunct(ch))
		printf("ispunct true\n");
	else
		printf("ispunct false\n");

	if (isprint(ch))
		printf("isprint true\n");
	else
		printf("isprint false\n");

	if (isgraph(ch))
		printf("isgraph true\n");
	else
		printf("isgraph false\n");

	if (isspace(ch))
		printf("isspace true\n");
	else
		printf("isspace false\n");

	if (isblank(ch))
		printf("isblank true\n");
	else
		printf("isblank false\n");

	if (iscntrl(ch))
		printf("iscntrl true\n");
	else
		printf("iscntrl false\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>


int main()
{
	printf("isupper\n");
	for (int i = 0; i < 128; ++i) {
		if (isupper(i))
			printf("%c", i);
	}
	printf("\n\n");

	printf("islower\n");
	for (int i = 0; i < 128; ++i) {
		if (islower(i))
			printf("%c", i);
	}
	printf("\n\n");


	printf("isalpha\n");
	for (int i = 0; i < 128; ++i) {
		if (isalpha(i))
			printf("%c", i);
	}
	printf("\n\n");

	printf("isdigit\n");
	for (int i = 0; i < 128; ++i) {
		if (isdigit(i))
			printf("%c", i);
	}
	printf("\n\n");

	printf("isalnum\n");
	for (int i = 0; i < 128; ++i) {
		if (isalnum(i))
			printf("%c", i);
	}
	printf("\n\n");

	printf("isxdigit\n");
	for (int i = 0; i < 128; ++i) {
		if (isxdigit(i))
			printf("%c", i);
	}
	printf("\n\n");

	printf("ispunct\n");
	for (int i = 0; i < 128; ++i) {
		if (ispunct(i))
			printf("%c", i);
	}
	printf("\n\n");

	printf("isprint\n");
	for (int i = 0; i < 128; ++i) {
		if (isprint(i))
			printf("%c", i);
	}
	printf("\n\n");

	printf("isgraph\n");
	for (int i = 0; i < 128; ++i) {
		if (isgraph(i))
			printf("%c", i);
	}
	printf("\n\n");

	printf("isspace\n");
	for (int i = 0; i < 128; ++i) {
		if (isspace(i))
			printf("%d ", i);
	}
	printf("\n\n");

	printf("isblank\n");
	for (int i = 0; i < 128; ++i) {
		if (isblank(i))
			printf("%d ", i);
	}
	printf("\n\n");


	printf("iscntrl\n");
	for (int i = 0; i < 128; ++i) {
		if (iscntrl(i))
			printf("%d ", i);
	}
	printf("\n\n");


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>

#include <Windows.h>


int main()
{
	for (;;) {
		int c = rand() % 128;
		if (isgraph(c)) {
			putchar(c);
			Sleep(30);
		}
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>

#include <Windows.h>


int main()
{
	int c;

	printf("bir karakter girin: ");
	c = getchar();

	//printf("%c ==> %c\n", c, toupper(c));
	printf("%c ==> %c\n", c, tolower(c));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>



int main()
{
	int c1, c2;

	printf("iki karakter girin: ");
	c1 = getchar();
	c2 = getchar();

	printf("girilen karakterler %c ve %c\n", c1, c2);

	if (toupper(c1) == toupper(c2))
		printf("ayni karakterler\n");
	else
		printf("farkli karakterler\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>

int main()
{
	int c1, c2;

	printf("iki karakter grin: ");
	c1 = getchar();
	c2 = getchar();

	if (toupper(c1) == toupper(c2))
		printf("%c ve %c ayni karakterler\n", c1, c2);
	else
		printf("%c ve %c farkli karakterler\n", c1, c2);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

loop statements
===============

koþul operatörü (ternary operator - conditional operator)

while statement				//% 24
do while statement			//% 1
for statement				//% 75

break statement 
continue statement

//control expression

while (expr)
	statement;  //body

statementx;


while (i < 100)
	statement;

while (i < 100 && k < 500)
	statement;

while (i < 100 || k < 100)
	statement;

while (x != 0)
	statement;

while (x)
	statement;

while (x == 0)
	statement;

while (!x)
	statement;

while ((ch = getchar()) != '\n')
	//..

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 2'100'000'000;

	x += 400'000'000;  //ub

	printf("x = %d\n", x);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <limits.h>

int main()
{
	unsigned int x = UINT_MAX;

	printf("x = %u\n", x);
	++x;
	printf("x = %u\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	printf("bir giris yapin: ");
	int c;

	while ((c = getchar()) != '\n') {
		printf("%c karakterinin kodu %d\n", c, c);
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	printf("bir giris yapin: ");
	int c;

	while (c = getchar(), c != '\n') {
		printf("%c karakterinin kodu %d\n", c, c);
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

int x = 20;

while (x++ < 100) {
	printf("x = %d\n", x)
}

while (isupper(c)) {

}


while (isupper(c)) 
	statement;

while (isupper(c) != 0) 
	statement;


while (isupper(c) == 0) 
	statement;

while (!isupper(c)) 
	statement;

----------------------------------

#include <stdio.h>

int main()
{
	int x = 0;

	while (x++ < 100);
		printf("%d ", x);
}

#include <stdio.h>

int main()
{
	int x = 0;

	while (x++ < 100);
		printf("%d ", x);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>
#include <conio.h>

int main()
{
	int c;

	printf("evet mi (e) hayir mi (h): ");
	///

	while ((c = _getch()) != 'e' && c != 'h')
		;

	printf("\nCevabiniz: %c\n", c);
	if (c == 'e')
		printf("evet dediniz\n");
	else
		printf("hayir dediniz\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>
#include <conio.h>

int main()
{
	int c;

	printf("evet mi (e) hayir mi (h): ");
	///

	while ((c = _getch()) != 'e' && c != 'h')
	{ }

	printf("\nCevabiniz: %c\n", c);
	if (c == 'e')
		printf("evet dediniz\n");
	else
		printf("hayir dediniz\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>

//cozum 1

int main()
{
	if (printf("merhaba dunya\n"))
	{ }
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>

//cozum 2

int main()
{
	while (!printf("merhaba dunya\n"))
	{ }
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>

//cozum 3

int main()
{
	switch(printf("merhaba dunya\n"))
	{ }
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//8762
//876
//87
//8
//0

int revdigit(int val)
{
	int result = 0;
	while (val != 0) {
		result = result * 10 + val % 10;
		val /= 10;
	}

	return result;
}

int sumdigit(int val)
{
	int sum = 0;

	while (val != 0) {
		sum += val % 10;
		val /= 10;
	}
	return sum;
}

int ndigit(int val)
{
	int digit_count = 0;

	if (val == 0)
		return 1;

	while (val != 0) {
		++digit_count;
		val /= 10;
		//val = val / 10;
	}

	return digit_count;
}

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	printf("(%d) sayisi (%d) basamakli\n", ival, ndigit(ival));
	printf("(%d) sayisinin basamaklari toplami (%d)\n", ival, sumdigit(ival));
	printf("(%d) sayisinin basamaksal tersi (%d)\n", ival, revdigit(ival));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int c;
	int sum = 0;

	printf("bir sayi girin: ");

	while ((c = getchar()) != '\n') {
		sum += c - '0';
	}

	if (sum % 3 == 0)
		printf("evet 3'e tam bolunur cunku basamaklari toplami %d\n", sum);
	else
		printf("hayir 3'e tam bolunmez cunku basamaklari toplami %d\n", sum);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	int c;

	printf("bir tamsayi girin: ");
	ival = 0;

	while ((c = getchar()) != '\n') {
		ival = ival * 10 + c - '0';
	}

	printf("ival = %d\n", ival);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	int c;

	printf("bir tamsayi girin: ");
	ival = 0;

	while ((c = getchar()) != '\n') {
		ival = ival * 2 + c - '0';
	}

	printf("ival = %d\n", ival);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>

int main()
{
	int ival;
	int c;

	printf("bir tamsayi girin: ");
	ival = 0;

	while ((c = getchar()) != '\n') {
		if (isdigit(c))
			ival = ival * 16 + c - '0';
		else if (isxdigit(c))
			ival = ival * 16 + toupper(c) - 'A' + 10;
	}

	printf("ival = %d\n", ival);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

en sýk kullanýlan C idiyomlarýndan biri

n kez dönen while döngü idiyomu
===============================

int n = 3

while (n-- > 0) {
	//1
	//2
	//3
}


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int n;
	printf("bir tamsayi girin: ");
	scanf("%d", &n);

	while (n-- > 0) {
		printf("Necati Ergin\n");
	}
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


while (n--) {
	//1
	//2
	//3
}

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int n;
	printf("bir tamsayi girin: ");
	scanf("%d", &n);

	while (n--) {
		printf("Necati Ergin\n");
	}
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int n;
	printf("bir tamsayi girin: ");
	scanf("%d", &n);

	while (n --> 0) {
		printf("Necati Ergin\n");
	}
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//collatz sanýsý
//  n = 21
//  21 64 32 16 8 4 2 1
//  15 46 23 70 35 106  53 160  80  40  20 10 5 16 8 4 2 1
//  13  40 20 10 5 16 8 4 2 1


int main()
{
	unsigned long long uval;

	printf("bir sayi giriniz: ");
	scanf("%llu", &uval);

	while (uval != 1) {
		printf("%llu ", uval);
		if (uval % 2 == 0)
			uval /= 2;
		else
			uval = uval * 3 + 1;
	}
	printf("1\n");
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

armstrong sayýsý
================

153 = 
7523
54656


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int i = 100;

	//472
	while (i < 1000) {
		int d1 = i / 100;
		int d2 = i / 10 % 10;
		int d3 = i % 10;
		if (i == d1 * d1 * d1 + d2 * d2 * d2 + d3 * d3 * d3)
			printf("%d\n", i);
		++i;
	}
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int i = 1000;

	//472
	while (i < 10000) {
		int d1 = i / 1000;
		int d2 = i / 100 % 10;
		int d3 = i / 10 % 10;
		int d4 = i % 10;
		
		if (i == d1 * d1 * d1 * d1 + d2 * d2 * d2 * d2 + d3 * d3 * d3 * d3 + d4 * d4 * d4 * d4)
			printf("%d\n", i);
		++i;
	}
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


9 basamak dahil tüm armstrong saylarýný bulup ekrana yazdýrýn

18*** *** *** *** *** ***

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int i = 1000;

	//472
	while (i < 10000) {
		int d1 = i / 1000;
		int d2 = i / 100 % 10;
		int d3 = i / 10 % 10;
		int d4 = i % 10;
		
		if (i == d1 * d1 * d1 * d1 + d2 * d2 * d2 * d2 + d3 * d3 * d3 * d3 + d4 * d4 * d4 * d4)
			printf("%d\n", i);
		++i;
	}
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

int func(void)
{
	//code
	while (????) {
		
		if (expr)
			return x;
	}
	//code


}


int func(void)
{
	//code
	while (????) {
		
		if (expr)
			break;

	}
	//code <===


}


int func(void)
{
	//code
	while (????) {
		//...
		if (expr)
			goto OUT;
		//..

	}
OUT:
	//code <===


}


int func(void)
{
	//code
	while (????) {
		//...
		if (expr)
			exit(1);
		//..

	}
OUT:
	//code <===


}





Bir döngüden nasýl çýkabiliriz?
===============================

1. Döngünün kontrol ifadesinin (control expression) yanlýþ olmasý ile

2. return statement ile

3. break statement 

4. goto statement

5. exit / abort


infinite loop
===========================
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int power(int base, int exp)
{
	int result = 1;

	while (exp--) {
		result *= base;
	}

	return result;
}


int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	printf("%d sayisinin %d. kuvveti = %d\n", x, y, power(x, y));
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


sonsuz döngü


break statement


if (x > 5) 
	++a;

if (exp1){
	if (expr2) {
		for (;;) {
			while (exp3) {
				if (exp4)
					

			} //while
		} //for
	}// if

} //if


break statement


while (1) {
	statement1;
	statement2;
	if (expr)
		break;
	statement3;
	statement4;
}

statementX;
----------------------

while (exp) {
	statement1;
	statement2;
	statement3;
	statement4;
	statement5;
}

while (1) {
	if (!exp)
		break;
	statement1;
	statement2;
	statement3;
	statement4;
	statement5;
}


while (1) {
	statement1;
	statement2;
	statement3;
	statement4;
	statement5;
	if (!exp)
		break;
}


while (1) {
	statement1;
	statement2;
	statement3;
	if (!exp1)
		break;
	statement4;
		if (!exp2)
			break;
	statement5;
}


///////////////////////

while (exp1) {
	statement1;
	statement2;
	statement3;
	while (exp2) {
		statementx;
		statementy;
		if (???)
			break;
		statementz;
	}
	STATEMENTA;


}
STATEMENTB;






tamsayi girecek misiniz  (e) (h) : e
tamsayiyi girin : 524

tamsayi girecek misiniz  (e) (h) : e
tamsayiyi girin : 8672

tamsayi girecek misiniz  (e) (h) : e
tamsayiyi girin : -762

tamsayi girecek misiniz  (e) (h) : h


Toplam 45 sayi girdiniz.
Aritmetik ortalama : 543
Girdiginiz en buyuk sayi : 6542
Girdiginiz en kucuk sayi : -4313

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <time.h>
#include <limits.h>


int main()
{
	int c;
	int count = 0;
	int sum = 0;
	//int min = INT_MAX;
	int min = 2147483647;
	int max = -2147483647 - 1;

	srand((unsigned)time(0));
	while (1) {
		printf("tamsayi girecek misiniz? (e) (h) : ");
		
		while ((c = _getch()) != 'e' && c != 'h')
			;
		printf("\n%c\n", c);
		if (c == 'h')
			break;
		printf("tam sayiyi girin: ");
		int ival = (rand() % 2 ? -1 : 1) * rand();
		printf("%d\n", ival);
		++count;
		sum += ival;
		if (ival > max)
			max = ival;
		else if (ival < min)
			min = ival;
	}

	if (count) {
		printf("toplam %d sayi girdiniz\n", count);
		printf("ortalama = %d\n", sum / count);
		printf("girdiginiz en buyuk sayi = %d\n", max);
		printf("girdiginiz en kucuk sayi = %d\n", min);
	}
	else {
		printf("hic sayi girmediniz\n");
	}
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <time.h>
#include <limits.h>


int main()
{
	int c;
	int count = 0;
	int sum = 0;
	//int min = INT_MAX;
	int min = 0, max = 0;

	srand((unsigned)time(0));
	while (1) {
		printf("tamsayi girecek misiniz? (e) (h) : ");
		
		while ((c = _getch()) != 'e' && c != 'h')
			;
		printf("\n%c\n", c);
		if (c == 'h')
			break;
		printf("tam sayiyi girin: ");
		int ival = (rand() % 2 ? -1 : 1) * rand();
		printf("%d\n", ival);
		sum += ival;

		if (count == 0) {
			max = min = ival;
		}
		else if (ival > max)
			max = ival;
		else if (ival < min)
			min = ival;

		++count;
	}

	if (count) {
		printf("toplam %d sayi girdiniz\n", count);
		printf("ortalama = %d\n", sum / count);
		printf("girdiginiz en buyuk sayi = %d\n", max);
		printf("girdiginiz en kucuk sayi = %d\n", min);
	}
	else {
		printf("hic sayi girmediniz\n");
	}
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


continue statement;
continue deyimi

continue;
break;



while (expr) {
	statement1;
	statement2;
	if (ex1)
		continue;
	statement3;
	statement4;
	statement5;
	if (ex2)
		continue;
	statement6;
	statement7;
}

STATEMENT_OUT;


hidden else (gizli else)


int max(int x, int y)
{
	if (x > y)
		return x;
	else
		return y;
}


redundancy (fuzuli olma - fazlalýk)
redundant

while (1) {
	statement1;
	statement2;
	statement3;
	if (expr)
		goto out;
	
	statement4;
	statement5;
	statement6;
	
}

out: 
	STATEMENTX;

------------------------


if (y != 0)
	x = y;
else
	x = 0;

--------------------
x = y


do while statement



while (1) {
	statement1;
	statement2;
	statement3;
	statement4;
	statement5;
	statement6;
	if (!expr)
		break;
}


do {
	statement1;
	statement2;
	statement3;
	statement4;
	statement5;
	statement6;
} while (expr);


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x;

	while (1) {
		printf("bir sayi giriniz: ");
		scanf("%d", &x);
		if (x > 0 && x < 100)
			break;
	}

	printf("giris basarili x = %d\n", x);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;

	do {
		printf("%d ", x);
		x--;
		if (x != 0)
			continue;
	//

	} while (0);


}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>


int main()
{
	int c;

	printf("evet mi (e) hayir mi (h): ");
	
	/*
	while ((c = _getch()) != 'e' && c != 'h')
		;
	*/

	//while ((c = _getch()) != 'e' && c != 'h')
	//{ 	}

	//while ((c = _getch()) != 'e' && c != 'h')
	//	continue;

	while ((c = _getch()) != 'e' && c != 'h')
		;  //null statement



}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

for föngü deyimi
================

for (exp1; exp2 ; exp3)
	statement;

expression_statement;
while (expr) {
	///code
	///
	expression_statement;
}

i = 0;
while (i < 100) {
	///statements
	++i;
}

for (i = 0; i < 100; ++i) {

}

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int i;

	i = 0;

	for (; i < 100; ++i) {
		printf("%d ", i);
	}
	printf("\n\n donguden cikildi\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int i;

	i = 0;

	for (; i < 100;) {
		printf("%d ", i);
		++i;
	}
	printf("\n\n donguden cikildi\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

while (1)

for (;;)

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int i;

	i = 0;

	for (;;) {
		if (i == 100)
			break;
		printf("%d ", i);
		++i;
	}
	printf("\n\n donguden cikildi\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int i;

	i = 0;

	while (i < 100) {
		printf("%d ", i);
		++i;
	}

	printf("\n\n donguden cikildi\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int i;
	
	for (i = 0; i < 100; ++i) {
		printf("%d ", i);
	}
	printf("\n\n donguden cikildi\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int i;
	
	for (i = 0; i < 100; i += 2) {
		printf("%d ", i);
	}
	printf("\n\n donguden cikildi\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

1>------ Build started: Project: csd13_17, Configuration: Debug Win32 ------
1>main.c
1>csd13_17.vcxproj -> C:\Users\Hp\source\repos\csd13_17\Debug\csd13_17.exe
========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>

int main()
{
	unsigned int i;

	for (i = 10; i >= 0 ; --i) {
		printf("%u ", i);
		_getch();
	}
	printf("\n\n donguden cikildi\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>

int main()
{

	for (int i = 1; i < 1000000000; i *= 10) {
		printf("%d\n", i);
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>

int main()
{

	for (int i = 1; i < 1000000000; i *= 2) {
		printf("%d\n", i);
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>

int f1(void);
int f2(void);
int f3(void);
int f4(void);

int main()
{
	for (f1(); f2(); f3())
		f4();
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>

//scope leakage

void func(int);

int main()
{
	
	int ix = 10;
	++ix;
	for (int i = 0; i < 10; ++i) {
		
	}

	func(i); //gecersiz

	

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>

int a[100] = {
	928, 773, 918, 827, 453, 879, 667, 492, 524, 541,
	335, 782, 239, 960, 814, 537, 191, 396, 218, 797,
	693, 951, 962, 787,  40, 124, 328, 626, 497, 162,
	967, 315, 283,  66, 620, 126, 336, 225, 508, 982,
	575, 642,  79, 483, 394, 737, 539, 463, 911, 267,
	100, 980, 581, 849, 139, 379, 698, 759, 501, 103,
	218, 336, 693, 908, 379, 684, 412, 354, 295, 909,
	328, 879, 625, 190,  19, 771, 507, 637, 357, 573,
	456, 842, 948, 863, 173,  64, 140, 317,  86, 349,
	594, 860, 838, 749, 485, 633, 702, 355,  71, 375,
};

int main()
{
	int sval;

	printf("aranacak degeri giriniz: ");
	scanf("%d", &sval);

	int i;
	for (i = 0; i < 100; ++i) {
		if (a[i] == sval)
			break;
	}

	if (i < 100)
		printf("evet bulundu dizinin %d indisli ogesi\n", i);
	else
		printf("bulunamadi\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>

int main()
{

	for (int i = 0, k = 5; ; ) {
		//
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>

int main()
{
	int i, k;

	//
	for (i = 1, k = i + 2; i * k < 100000; i++, k += i) {
		printf("%d %d\n", i, k);
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>

int main()
{
	int i;

	for (i = 0; i < 10; ++i);
		printf("%d\n", i);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>


int main()
{
	for (int i = 100; i < 1000; ++i) {
		int d1 = i / 100;
		int d2 = i / 10 % 10;
		int d3 = i % 10;

		if (d1 * d1 * d1 + d2 * d2 * d2 + d3 * d3 * d3 == i)
			printf("%d\n", i);


	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

perfect numbers (mükemmel sayý)
Her Mersenne asalýna karþý bir mükemmel sayý vardýr! (Necati)

6 = 1 + 2 + 3
28 = 2 + 4 + 7 + 14

necatiergin2020@gmail.com


n	
n!

factorial list
===============
0		1
1		1
2		2
3		6
4		24
5		120
6		720
7		5040
8		40320
9		362880
10		3628800
11		39916800
12		479'001'600
13		6'227'020'800
14		87178291200
15		1307674368000
16		20922789888000
17		355687428096000
18		6402373705728000
19		121'645'100'408'832'000
20		2'432'902'008'176'640'000
21		51090942171709440000


 0! = 1
 1! = 1
 2! = 2
 3! = 6
 4! = 24
 5! = 120
 6! = 720
 7! = 5040
 8! = 40320
 9! = 362880
10! = 3628800
11! = 39916800
12! = 479'001'600

C:\Users\Hp\source\repos\csd13_17\Debug\csd13_17.exe (process 7296) exited with code 0.
Press any key to close this window . . .


 0! = 1
 1! = 1
 2! = 2
 3! = 6
 4! = 24
 5! = 120
 6! = 720
 7! = 5040
 8! = 40320
 9! = 362880
10! = 3628800
11! = 39916800
12! = 479001600
13! = 6227020800
14! = 87178291200
15! = 1307674368000
16! = 20922789888000
17! = 355687428096000
18! = 6402373705728000
19! = 121645100408832000
20! = 2432902008176640000

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>


long long int factorial(int n)
{
	return n < 2 ? 1 : n * factorial(n - 1);
}

int main()
{
	for (int i = 0; i < 21; ++i) {
		printf("%2d! = %lld\n", i, factorial(i));
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int factorial(int n)
{
	const int a[] = {
		1,
		2,
		6,
		24,
		120,
		720,
		5040,
		40320,
		362880,
		3628800,
		39916800,
		479001600 };

	return a[n];
}

int main()
{
	int x;

	printf("kac factorial : ");
	scanf("%d", &x);
	printf("%d! = %d\n", x, factorial(x));


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int factorial(int n)
{
	const int a[] = {
		1,
		2,
		6,
		24,
		120,
		720,
		5040,
		40320,
		362880,
		3628800,
		39916800,
		479001600 };

	return a[n];
}

int main()
{
	for (int i = 0; i < 12; ++i) {
		printf("%2d! = %d\n", i, factorial(i));
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
kalýnan yer
1 / 0!   + 1 / 1! + 1 / 2!

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int factorial(int n)
{
	return n < 2 ? 1 : n * factorial(n - 1);
}

int main()
{
	double sum = 0.;

	for (int i = 0; i < 13; ++i) {
		sum += 1. / factorial(i);
	}

	printf("e sayisi = %f\n", sum);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


(1 / 1) - (1 / 3) + (1 / 5) - (1 / 7) + (1 / 9) ....  

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int n;
	double sum = 0.;

	printf("serinin kac terimini toplayalim:  ");
	scanf("%d", &n);

	for (int i = 0; i < n; ++i) {
		if (i % 2 == 0)
			sum += 1. / (i * 2 + 1);
		else
			sum -= 1. / (i * 2 + 1);
	}

	printf("%f\n", 4. * sum);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>

//tek bir karakter 
//ya da bir karakteri degistireceksiniz

int main()
{
	int n = 5;

	for (int i = 0; i < n; i--)
		printf("necati\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

ternary operator (koþul operatörü)
==================================


-------------------------------------------
13     ?    :                right associative
-------------------------------------------
14     = += ...
-------------------------------------------
15    ,
-------------------------------------------


op1 ? op2  : op3


x > y ? x : y

x > 0 ? x : -x

(x > 10 ? y : z) + 45


x > 10 ? y : (z + 45)

-------------------------------



int isleap(int y)
{
	return y % 4 == 0 && (y % 100 != 0 || y % 400 == 0);
}

int main()
{
	int y;

	printf("bir yil girin: ");
	scanf("%d", &y);

	//isleap(y) ? 366 : 365
	//isleap(y) ? 29 : 28
}

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int isleap(int y)
{
	return y % 4 == 0 && (y % 100 != 0 || y % 400 == 0);
}

int main()
{
	int x = -1;
	int y = 45;

	printf("%d\n", ++x ? y : x);
	
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

1. tema 
koþul operatörünün ürettiði deðeri bir nesneye aktarma

int min = a < b ? a : b;

abs = x > 0 ? x : -x;

-------------------------------------
max = x > y ? x : y;
-------------------------------------
if (x > y)
	max = x;
else
	max = y;

int max = x > y ? x : y;

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 30, y = 20;
	///

	for (int i = x > y ? x : y; i < 40; ++i)
		printf("%d ", i);

	printf("\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


koþul operatörünün ürettiði deðer ile bir iþlev çaðrýsý yapmak

if (x > 10)
	foo(a);
else
	foo(b);

foo(x > 10 ? a : b);
--------------------------

return x > 10 ? a : b;

if (x > 10)
	return a;
return b;

int y;

if (ndays > (isleap(y) ? 366 : 365)) 
	a = 20;


if (isleap(y)) {
	if (ndays > 366)
	    a = 20;
}
else if (ndays > 365)
	a = 20;

========================
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x;

	printf("bir sayi girin: ");
	scanf("%d", &x);

	int a = x == 5 ? 40 : (x == 17 ? 93 : (x == 33 ? 117 : 55));

	printf("a = %d\n", a);




}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x;

	printf("bir sayi girin: ");
	scanf("%d", &x);

	int a = 
		x == 5 ? 40 :
		x == 17 ? 93 :
		x == 33 ? 117 : 55;

	printf("a = %d\n", a);




}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



if (x > 10)
	a = y;
else
    b = y;


x > 10 ? a : b = y;

C dilinde koþul operatörünün 2. ve 3. operandlarý nesne olsa dahi
koþul operatörüyle oluþturulan ifade R value exp (C++'da L value expr.)




(x > 10 ? a : b) = y;

++x				ifadesi C'de R value C++'da L value
--x				ifadesi C'de R value C++'da L value
x,y				ifadesi C'de R value C++'da L value
x > 0 ? a : b


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 20, y = 34, z = 45, t = 12;

	*(x > 10 ? &y : &z) = t;


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	ival >= 10 ? printf("evet") : printf("hayir"); //iyi fikir degil

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

nested loops (iç içe döngüler)

while (exp) {
	

}

///

//asagidaki dongude veri tabanina .....
for () {
	///..
	//
}

try_connect_database();


avoid raw loops

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	for (int i = 0; i < 10; ++i) {
		for (int k = 0; k < 20; ++k) {
			printf("(%d %d) ", i, k);
		}
		printf("\n");

	}
	


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

int main()
{
	int i, k;

	for (i = 0; i < 5; ++i) 
		for (k = 0; k < 10; ++k);
			printf("(%d %d) ", i, k);
}

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int i, k;

	for (i = 0; i < 5; ++i)
		for (k = 0; k < 10; ++k)
			;
	
	printf("(%d %d) ", i, k);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	for (int i = 0; i < 5; ++i)
		for (int k = 0; k < 10; ++k);
			printf("(%d %d) ", i, k); //gecersiz
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int cnt = 0;

	for (int i = 0; i < 10; ++i) {
		for (int j = 0; j < 5; ++j) {
			for (int k = 0; k < 8; ++k) {
				++cnt;
			}
		}
	}

	printf("cnt = %d\n", cnt);



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	for (int i = 1; i <= 9; ++i) {
		for (int j = 0; j <= 9; ++j) {
			for (int k = 0; k <= 9; ++k) {
				for (int m = 0; m <= 9; ++m) {
					printf("%d%d%d%d ", i, j, k, m);
				}
				printf("\n");

			}
			printf("\n\n");

		}
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int val = 1000;
	for (int i = 1; i <= 9; ++i) {
		for (int j = 0; j <= 9; ++j) {
			for (int k = 0; k <= 9; ++k) {
				for (int m = 0; m <= 9; ++m) {
					if (val == i * i * i * i + j * j * j * j + k * k * k * k + m * m * m * m)
						printf("%d\n", val);
					++val;
				}
			}
		}
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x;

	printf("bir sayi girin: ");
	scanf("%d", &x);
	
	int n = 2;
	//90
	while (x != 1) {
		while (x % n == 0) {
			printf("%d ", n);
			x /= n;
		}
		++n;
	}

	printf("\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//asagida bildirilen fonksiyonlarý (iterative) olarak tanýmlayýnýz:

int gcd(int x, int y);
int lcf(int x, int y);

int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	printf("%d ve %d sayilari icin ebob = %d\n", x, y, gcd(x, y));
	printf("%d ve %d sayilari icin ekok = %d\n", x, y, lcf(x, y));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

friendly numbers
amicable number

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int are_friends(int x, int y);

int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	if (are_friends(x, y))
		printf("evet %d ve %d arkadas sayilar\n", x, y);
	else
		printf("evet %d ve %d arkadas sayilar degil\n", x, y);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

function prototypes (function declarations)
preprocessor directives
switch statement
goto statement
arrays
	string operations
	sizeof operator
random numbers


-------------------------------------------------
a) fonksiyonun geri dönüþ deðerinin türü
b) fonksiyonun parametre sayýsý
c) fonksiyonun parametrelerinin türü


//function declaration
//function prototype
//function prototype declaration

double func(int, int);

int main()
{
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------




func(12);

fonksiyona giriþ kodlari

linker'a hitaben referans isim (external reference)

fonksiyondan çýkýþ kodlari




int ahmet(int);
int selim(int);
int elif(int, int);

int main()
{
	int x = ahmet(12);

	int y = selim(x);

	int z = elif(x, y);

	z++;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

C 99 öncesinde
implicit function declaration 
kurali vardi.


eðer bir isim fonksiyon çaðrý operatörünün 
operandý olmuþ ise

func(123)

ve söz konusu isim (name lookup / isim arama) süreci ile bulunamamýþ ise

derleyici aþaðýdaki gibi bir bildirimin yapýlmýþ olduðunu varsayar

int func();

Bu bildirim þu anlama gelir:

çaðýrýlan fonksiyon int geri dönüþ deðeri türüne sahip
ve çaðrýlan func fonksiyonunu parametre deðiþkenleri bilinmiyor


//#include "necati.h"

//int func();

int main()
{
	func(12); 
	func(12, 45); 
	func(12, 89, 46); 
	//C++'da gecersiz
	//C99 ve sonrasinda gecersiz
	//C99 öncesinde gecerli ve derleyici 
	//int func(); bildiriminin yapýlmýþ oldugu var sayiyor

}


//fonksiyon bildirim sentaksý


double func(int, int);

-----------------------

a) file scope
b) block scope
c) function prototype scope
============================
c) function scope

double func(int x, int y);


/*
	C++ dilinde aþaðýdaki bildirimler ayný anlamdadýr
	Her iki bildirim de bildirilen fonksiyonlarýn parametre deðiþkeni
	olmadýðýný anlatir.
*/

void func();
void foo(void);

int main()
{
	//foo(12); //gecersiz
	func(12); //gecersiz
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



/*
	C dilinde aþaðýdaki bildirimler farklý anlamdadýr
	func bildirimi func'ýn parametre deðiþkeni olmadýðý anlamýna gelmiyor
	parametre deðiþkeni/deðiþkenleri hakkýnda bilgi verilmediði anlamýna geliyor
	oysa foo bildiriminde açýkça foo'nun parametre deðiþkenminin olmadýðý söyleniyor
*/

//warning C4087 : 'foo' : declared with 'void' parameter list

void func();
void foo(void);

int main()
{
	func(12);
	foo(12);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


Eðer derleyici bir fonksiyon bildirimi ile tekrar karþýlaþýr ise
bildirimler arasýnda fark olmamasý kaydýyla 



//function redeclaration

int func(int);
int func(int x);
int func(int y);
int func(int z);


//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



void func(void)
{

}

int main(void)
{


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


header file
uzantýsý .h olan dosyalar
C++ dilinde bu dosyalarýn bazen uzantýsý .hpp olabiliyor
h ==> header
header = header file
baþlýk dosyasý

source file
implementation file
dot c file



include ettiðimiz bir baþlýk dosyasýndan (tipik olarak) neler gelir?
====================================================================

a) fonksiyon bildirimleri
b) tür eþ isim bildirimleri (type alias decl.)
c) öniþlemci makrolarý
d) tür bildirimleri
e) isimlendirilmiþ sabitler
f) global deðiþkenlerin extern bildirimleri





a) bazý kodlar yazýlmýþ ama sizde derlenmiþ halleri var
b) bazý kodlar kaynak kod formunda
==========================================================

Soru:

Elimde derlenmiþ kodlar var
a) obje kodlar
b) doðrudan exe kod

Ben bu kodlaradan hareketle kaymak koda ulþabilir miyim?

C


hocam ben bir header dosyasý ve obje kodu vereceksem kaynak dosyada tanýmlý
her fonksiyonun bildirimini vermek zorunda mýyým?
---------------------------------------------------------------------------

öniþlemci programý ve öniþlemci komutlarý
-----------------------------------------

öniþlemci komutlarý

null directive

# 
#include
#define
#undef
	#if
	#endif
	#elif
	#else
	#ifdef
	#ifndef
#error
#line
#pragma


conditional compiling (koþullu derleme)



#include <file name>

#include "file name"


a) açýsal parantez içinde yazýlýrsa ön iþlemci
bu isimli dosyayayý önceden belirlenmiþ bir dizin
içinde arar. (default directory)



#include "falanca.h"


#include <stdio.h> //printf
#include <math.h>  //sqrt
#include <time.h>  //time_t


int main()
{
	printf("ali veli");
	int x = 10;

	double dval = sqrt(x);

	time_t y = 0;
	///

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

comment lines (yorum satýrlarý - açýklama satýrlarý)

#define   

#define komutu ne amaçla kullanýlýrsa kullanýlsýn
bu komutla bir isim öniþlemci programýna tanýtýlýr.
Öniþlemci programýna #define komutu ile tanýtýlan isimlere
C ve C++  dillerinde macro denir.

object-like macro
object  macro

function-like macro
functional macro

ALPHA

symbolic constant
manifest constant

#include <stdio.h>


#define			SIZE		100 + 500


int main()
{
	int x = 4 * SIZE;
	//int x = 4 * 100 + 500;

	printf("x = %d\n", x);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------




#include <stdio.h>


#define			SIZE		(100 + 500)


int main()
{
	int x = 4 * SIZE;

	printf("x = %d\n", x);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include <stdio.h>

#define			ERROR_MSG        "hata hata hata"


int main()
{
	printf(ERROR_MSG);
	//printf("hata hata hata");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include <stdio.h>

#define			MIN      100
#define			MAX      500
#define         AVE      ((MIN + MAX) / 2)

int main()
{
	int x = MIN;
	int y = AVE;

	printf("x = %d\n", x);
	printf("y = %d\n", y);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


NESNEL (basit) makrolarýn tipik kullaným senaryolarý

kodun okunmasýný ve/veya yazýlmasýný kolaylaþtýrmak için makro kullanmak
	a) sabitlerin isimlendirilmesi


Sembolik sabitlere baþka alternatif (seçenek) var mý?

a) enumaration constants (ileride göreceðiz)
b) const objects (const nesneler)

---------------------------------------------
functional macro
function-like macro
iþlevsel makro

SIZE

func(a, b)
-------------------------------------------

bazý durumlarda fonksiyon çaðrýlarýnýn oluþturduðu ilave maliyeti ortadan kaldýrmak


x = func(a, b);

x = a * a + b + 3;


#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>

#define   square(a)   a * a

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	//int x = square(ival);
	int x = ival * ival;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>

#define   square(a)   a * a

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival); //5

	//int x = square(ival + 1);
	int x = ival + 1 * ival + 1;

	printf("x = %d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>

#define   square(a)   (a) * (a)

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival); //5

	int x = square(ival + 1);
	//int x = (ival + 1) * (ival + 1);

	printf("x = %d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>

#define   square(a)   (a) * (a)

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival); //5

	//int x = 100 / square(ival);
	int x = 100 / (ival) * (ival);

	printf("x = %d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>

#define   square(a)		((a) * (a))

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival); //5

	int x = 100 / square(ival);
	//int x = 100 / ((ival) * (ival));

	printf("x = %d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>



#define  max2(a, b)		((a) > (b) ? (a) : (b))

int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	printf("max = %d\n", max2(x, y));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define isleap(y)   ((y) % 4 == 0 && ((y) % 100 != 0 || (y) % 400 == 0))

int main()
{
	int year;

	printf("bir yil girin: ");
	scanf("%d", &year);

	if (isleap(year)) {
		printf("%d artik yil\n", year);
	}
	else {
		printf("%d artik yil degil\n", year);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

standart ctype baþlýk dosyasýnda bildirilen

isupper iþlevine karþýlýk gelen

(ascii icin)

bir makro olusturun

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define ISUPPER(c)       ((c) >= 'A' && (c) <= 'Z')

int main()
{
	int ch;

	printf("bir karakter girin: ");
	ch = getchar();
	if (ISUPPER(ch)) {
		printf("evet buyuk harf\n");
	}
	else {
		printf("hayir buyuk harf degil\n");
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define TOUPPER(c)    (((c) >= 'a' && (c) <= 'z') ? (c) - 'a' + 'A' : (c))

int main()
{


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define    square(x)   ((x) * (x))

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival); //5

	//int a = square(ival++); //ub
	int a = ((ival++) * (ival++)); //ub

	printf("a = %d\n", a);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int func(int x)
{
	printf("func cagrildi  x = %d\n", x);

	return x + 10;
}


int square(int x)
{
	printf("square x =  %d\n", x);
	return x * x;
}


int main()
{
	int a = 5;

	int b = square(func(a));

	printf("b = %d\n", b);



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

GCC derleyicisinde kullanýlan bazý extension (eklentiler) var

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int func(int x)
{
	printf("func cagrildi  x = %d\n", x);

	return x + 10;
}


#define   square(x)    ((x) * (x))

int main()
{
	int a = 5;

	//int b = square(func(a));
	int b = ((func(a)) * (func(a)));

	printf("b = %d\n", b);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define  isLower(c)    ((c) >= 'a' && (c) <= 'z')
#define  toUpper(c)    (isLower((c)) ? (c) - 'a' + 'A' : (c))


int main()
{
	printf("bir karakter girin: ");
	int c = getchar();

	printf("%c ===> %c\n", c, toUpper(c));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <time.h>

#define		randomize()      srand((unsigned)time(0))

int main()
{
	//srand((unsigned)time(0));
	randomize();
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define get(x)    (ptr->a[x] * ptr->a[x2])

#define _CRT_SECURE_NO_WARNINGS

//swap makrosunu aþaðýdaki sorunu ortadan kaldýrack þekilde yeniden oluþturun

#include <stdio.h>

#define    swap(x, y)          {int temp = x; \
								x = y;    \
							    y = temp; }

int main()
{
	int a = 10, b = 20;

	if (a > 5)
		swap(a, b);
	else
		printf("ali\n");

	printf("a = %d\n", a);
	printf("b = %d\n", b);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

//swap makrosunu aþaðýdaki sorunu ortadan kaldýrack þekilde yeniden oluþturun

#include <stdio.h>

#define    swap(x, y)          {int temp = x; \
								x = y;    \
							    y = temp; }

int main()
{
	int a = 10, b = 20;

	if (a > 5)
	{
		int temp = a;
		a = b;
		b = temp;
	};
	else
		printf("ali\n");

	printf("a = %d\n", a);
	printf("b = %d\n", b);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

//swap makrosunu aþaðýdaki sorunu ortadan kaldýrack þekilde yeniden oluþturun

#include <stdio.h>

#define    swap(x, y)          {int temp = x; \
								x = y;    \
							    y = temp; } 

int main()
{
	int a = 10, b = 20;

	if (a > 5)
		swap(a, b);
	else
		printf("ali\n");

	printf("a = %d\n", a);
	printf("b = %d\n", b);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>


int square(int x)
{
	printf("gercek fonksiyon\n");
	return x * x;
}

#define square(a)     ((a) * (a))


int main()
{
	int y = 4;

	int z = (square)(y);

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------




x = (func)(12);

iþlevsel makrolar ile fonksiyonlarýn karþýlaþtýrýlmasý
======================================================

b) fonksiyonlar her zaman daha güvenli
c) makrolar türden baðýmsýz (generic)
	avantaj ya da dezavantaj olabilir

a) fonksiyonlarýn adresleri alýnabilir & operatörü ile
   makrolar adrese sahip deðil



d) debugger programlarýnýn verdiði destek

e) makrolar kodu daha büyük hale getirme eðiliminde




isleap(y)
isleap(y)
isleap(y)
isleap(y)
isleap(y)
isleap(y)


	#undef öniþlemci komutu


koþullu derleme komutlarý



#define       MAX      10


//warning C4005 : 'MAX' : macro redefinition


#define       MAX      40

------------------------------------------------
#undef MAX





#undef MAX 
#define    MAX    100

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------




void func()
{
#undef  SIZE
#define   SIZE   100


#undef  SIZE
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#include <stdio.h>
#include <stdlib.h>


int main()
{
	//RAND_MAX
	//SEEK_SET
	//FOPEN_MAX
	//BUFSIZ
	//EXIT_FAILURE
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#if
#endif
#else
#elif
#ifdef
#ifndef


#if P_EXPR
	#include "necati.h"
	#define    SIZE   100
	int func(int);
	typedef int Bool;
#else
	#include "deniz.h"
	#define    SIZE   500
	int foo(int);
#endif



#if PEX1
	//kodlar ve komutlar
#elif PEX2
	//kodlar ve komutlar
#elif PEX3
	//kodlar ve komutlar
#endif




 
 #if  PEX1

	#if  PEX2
		
	#endif

 #endif



 Tipik olarak C ve C++ baþlýk dosyalarýnda
 derleyicinin göreceðinden daha fazla bildirim
 ve öniþlemci programýn yürüteceðinden daha fazla öniþlemci komutu bulunur.
 Öniþlem program koþullu derleme komutlarý nedeniyle

	a) derleyicile bildirimlerini bir kýsmýný verir
	b) bazý komutlarý hiç görmez



1) Farklý donanýmlar için derleyiciye farklý kod vermek
2) Farklý derleyiciler için () 
3) Dile göre farklý kodlar
4) Versiyon kontrolu
5) Lokalizasyon
6) Ýþletim sistemi farklýlýðý
7) Dilin farklý standartlara
8) Debug/Release


assert
assertion (dogrulama)

if (y == 0) {
	//
}

a = x / y;


+ -
+ -

>
>=
<
<=
==
!=

!
&&
||


?   : 


/*--------------------------------------------------------------------
	Dikkat!
	ppexp sabit ifadesi olmak zorundA
	gerçek sayý aritmetiði kullanýlamýyor
----------------------------------------------------------------------*/

#define   SIZE    100
#define   NEC     500

#if  !(SIZE < NEC)
	void func(int);
	void foo(int);
#else
	void func(int, int);
	void foo(int, int);
#endif


	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------



#include <stdio.h>





int main()
{
#if    NEC > -5
	printf("necati ergin\n");
#endif

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

Bir makronun tanýmlý olup olmadýðýna göre (define edilmiþ ya da edilmemiþ olduguna göre)
öniþlemci koþullu derleme komutu oluþturmak çok yaygýn

//#define NEC




#ifdef   NEC


#endif


#include <stdio.h>

#define  NECO  

#ifdef  NECO
void func(int);
void foo(int);
void f(int, int);
#endif

#undef   NECO

#ifdef  NECO
void gf(int);
void gf2(int);
	
#endif

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>


#ifdef  NECO
	void func(int);
	void foo(int);
	void f(int, int);
#else
	void gf(int);
	void gf2(int);
#endif

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


öniþlemci operatörleri
======================
preprocessor operators


defined  operatörü

#   (stringify - string yapma operatörü)
##  (token-pasting op) (atom birleþtirme op)


defined NECO

#include <stdio.h>

#define   NECO

#if  defined NECO
	void func(int);
	void foo(int);
	void f(int, int);
#else
	void gf(int);
	void gf2(int);
#endif

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------




#include <stdio.h>

#define   NECO

#if  !defined NECO
	void func(int);
	void foo(int);
	void f(int, int);
#else
	void gf(int);
	void gf2(int);
#endif

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include <stdio.h>

//SIZE makrosu tanimli ise ancak NECO tanimli degil ise

#ifdef SIZE
#ifndef NECO
	void func(int);
	void foo(int);
	void f(int, int);
#endif
#endif

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

14:50'de devam

#
##

#yazi  "yazi"

#include <stdio.h>


#define   str(x)     #x


int main()
{
	printf(str(necati));
	//printf("necati");
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>


#define   iprint(x)   printf("%d\n", x)


int main()
{
	int x = 10;
	int y = 25;
	int z = 50;

	iprint(x);
	iprint(x + y);
	iprint(x * x + y * y + z * z);

	//printf("%d\n", x);
	//printf("%d\n", x + y);
	//printf("%d\n", x * x + y * y + z * z);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>


#define   iprint(x)   printf("%d\n", x)


int main()
{
	int x = 10;
	int y = 25;
	int z = 50;

	iprint(x); // x = 10
	iprint(x + y); // x + y = 35
	iprint(x * x + y * y + z * z); //x * x + y * y + z * z = 

	//printf("%d\n", x);
	//printf("%d\n", x + y);
	//printf("%d\n", x * x + y * y + z * z);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include <stdio.h>


int main()
{
	printf("ali"  "can");
	//printf("alican");
	//"alican"

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>


int main()
{
	printf("[1] Kayit Ekle\n"
		"[2] Kayit Ara\n"
		"[3] Kayit Sil\n"
		"[4] Kayit Degistir\n"
		"[5] Programdan Cik\n"
	);

	//printf("[1] Kayit Ekle\n[2] Kayit Ara\n[3] Kayit Sil\n[4] Kayit Degistir\n[5] Programdan Cik\n");


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>


#define   iprint(x)   printf(#x " = %d\n", x)

int main()
{
	int x = 10;
	int y = 25;
	int z = 50;

	iprint(x); // x = 10
	iprint(x + y); // x + y = 35
	iprint(x * x + y * y + z * z);

	//printf("%d\n", x);
	//printf("%d\n", x + y);
	//printf("%d\n", x * x + y * y + z * z);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

x##y  xy

#include <stdio.h>

#define   uni(x, y)    x##y

int main()
{
	int counter = 0;

	++uni(cou, nter);
	//++counter;

	printf("counter = %d\n", counter);


}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>



#define  cmf(t)    t max(t x, t y) { \
                       return x > y ? x : y;}


//cmf(int)
cmf(double)

int main()
{
	/*int val = max(12, 45);

	printf("val = %d\n", val);*/
	double dval = max(2.3, 1.2);

	printf("dval = %f\n", dval);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>



#define  cmf(t)    t max(t x, t y) { \
                       return x > y ? x : y;}


cmf(int)
cmf(double)
cmf(float)

int main()
{
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>



int max(int x, int y)
{
	return x > y ? x : y;
}

double max(double x, double y)
{
	return x > y ? x : y;
}

float max(float x, float y)
{
	return x > y ? x : y;
}


switch
goto

tür dönüþümleri (type conversions)

random number generations

diziler (array)

// case label
//case etiketi

switch (integer expr) {
case 1:
	//kod1
	break;
case 2:
	//kod2
case 3:
	//kod3
}


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int wd;

	printf("haftanin kacinci gunu: ");
	scanf("%d", &wd);

	switch (wd) {
	case 1: printf("Pazartesi\n"); 
	case 2: printf("Sali\n");
	case 3: printf("Carsamba\n");
	case 4: printf("Persembe\n");
	case 5: printf("Cuma\n");
	case 6: printf("Cumartesi\n");
	case 7: printf("Pazar\n");
	}

	printf("switch sonrasindaki deyim\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

default case

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int wd;

	printf("haftanin kacinci gunu: ");
	scanf("%d", &wd);

	switch (wd) {
	case 1: printf("Pazartesi\n"); break;
	case 2: printf("Sali\n"); break;
	case 3: printf("Carsamba\n"); break;
	case 4: printf("Persembe\n"); break;
	case 5: printf("Cuma\n"); break;
	case 6: printf("Cumartesi\n"); break;
	case 7: printf("Pazar\n"); break;
	default: printf("gecersiz gun\n");
	} 

	if (wd == 1) 
		printf("Pazartesi\n");
	else if (wd == 2)
		printf("Sali\n");
	else if (wd == 3)
		printf("Carsamba\n"); 
	else if (wd == 4)
		printf("Persembe\n");
	else if (wd == 5)
		printf("Cuma\n");
	else if (wd == 6)
		printf("Cumartesi\n"); 
	else if (wd == 7)
		printf("Pazar\n"); 
	else
		printf("gecersiz gun\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


case x:   //gecersiz

case 10 + 5 - 2:

case 3.4:  //gecersiz

case x + 54:  //gecersiz

case 'A':

case '\x1A'

case "ali" :
case "veli" :

#define   NECO  1
#define   PRT   2
#define   SLM   4


case NECO:
case PRT:
case SLM:



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void func()
{

neco:
	//there must be a statement after a label
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


void func(int x)
{
	switch (x) {
	case 1: printf("ali "); break;
	case 2: printf("veli"); break;
	case 3: //gcersiz label dan sonra statement olmali
	}
}

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10;

	switch (x) { //gecerli

	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10;

	switch (x)
	case 10: printf("evet dogru\n");
	

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	switch (printf("merhaba dunya\n")) {

	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

case 2:
case 7:
case 13:
case 21:
case 55:
case 98: 

standart deðil bazý derleyiciler böyle bir extension saðlýyorlar
case 2, 7, 13, 21, 55, 98: 

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include "Windows.h"

//st  nd  rd   th

void print_date(int d, int m, int y)
{
	printf("%02d", d);

	switch (d) {
	case 1:  
	case 21:
	case 31: printf("st "); break;
	case 2 :
	case 22: printf("nd "); break;
	case 3 :
	case 23: printf("rd "); break;
	default : printf("th "); break;
	}

	switch (m) {
	case 1: printf("Jan"); break;
	case 2: printf("Feb"); break;
	case 3: printf("Mar"); break;
	case 4: printf("Apr"); break;
	case 5: printf("May"); break;
	case 6: printf("Jun"); break;
	case 7: printf("Jul"); break;
	case 8: printf("Aug"); break;
	case 9: printf("Sep"); break;
	case 10: printf("Oct"); break;
	case 11: printf("Nov"); break;
	case 12: printf("Dec"); break;
	}
	printf(" %d\n", y);

}


int main()
{
	for (;;) {
		int y = rand() % 120 + 1900;
		int m = rand() % 12 + 1;
		int d = rand() % 28 + 1;
		print_date(d, m, y);
		Sleep(50);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


case 1: 
	do_xyz(); break;
case 2: 
	stementx;
	stementy;
	stementz;
	stementt;


-------------------------------------------------
switch(screen_color) {
case WHITE: 

switch (x) {
case 1: foo(); //fallthrough
case 2: func(); break;
case 3: f(); break;
//

}

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

#define   isleap(y)   ((y) % 4 == 0 && ((y) % 100 != 0 || (y) % 400 == 0))


int day_of_year(int d, int m, int y)
{
	int sum = d;

	switch (m - 1) {
	case 11: sum += 30; //fallthrough
	case 10: sum += 31; //fallthrough
	case 9:  sum += 30; //fallthrough
	case 8:  sum += 31; //fallthrough
	case 7:  sum += 31; //fallthrough
	case 6:  sum += 30; //fallthrough
	case 5:  sum += 31; //fallthrough
	case 4:  sum += 30; //fallthrough
	case 3:  sum += 31; //fallthrough
	case 2:  sum += isleap(y) ? 29 : 28; //fallthrough
	case 1:  sum += 31;
	}

	return sum;
}


int main()
{
	int day, mon, year;

	printf("gun ay yil olarak bir tarih girin: ");
	scanf("%d%d%d", &day, &mon, &year);

	printf("%d yilinin %d. gunu\n", year, day_of_year(day, mon, year));


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------





void func()
{
	int neco = 5;

neco:
	;
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

file scope
block scope
function prototype scope
function scope

void func()
{
	//

	goto neco;
	///code
	///code

	neco:
	statement;	
	
	


}


int f(int, int, int);

int main()
{
	int flag = 0;

	for (int i = 0; i < 100; ++i) {
		for (int j = 0; j < 1000; ++j) {
			for (int k = 0; k < 100; ++k) {
				///
				if (f(i, j, k)) {
					flag = 1;
					break;
				}
			}
			if (flag)
				break;
			//statement_1;
		}
		if (flag)
			break;
	}
	//statement_x;

}


//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


int f(int, int, int);

int main()
{
	for (int i = 0; i < 100; ++i) {
		for (int j = 0; j < 1000; ++j) {
			for (int k = 0; k < 100; ++k) {
				///
				if (f(i, j, k)) {
					goto out;
				}
			}
			//statement_1;
		}
	}
out:
	//statement_x;

}


//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


switch (x) {
case 1: f1(); break;
case 2: f2(); break;
case 3: f3(); break;
case 4: f4(); break;
defualt: f5(); break;
}

multiple inclusion guard
çoklu dahil etmeye karþý koruma

#ifndef  NUTILITY_H
#define  NUTILITY_H



struct Data {
	int x, y, z;
};



#endif


#line
#error
#pragma

#include <ctype.h>


int main()
{
	int c;

	c = getchar();

	if ()
	  printf("evet buyuk harf\n");

}

14:45'de devam



tür dönüþümleri (type conversions)
==================================

ival + dval

double temp = ival;
temp + dval


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	if (x != 0) {
		double dval = x / y;
		printf("dval = %f\n", dval);
		//
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	char c = 175;

	if (c == 175)
		printf("dogru\n");
	else
		printf("yanlis\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = -1;
	unsigned int y = 1;

	if (y > x)
		printf("evet dogru\n");
	else
		printf("hayir yanlis\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



type conversion
===============

implicit type conversion (örtülü - gizli)
explicit type conversion  (açýk - kod ile)
    type-cast
	type-cast operator

a + b

-----------
x = y;

int a = b;

func(c);


return ival;

int x;

double dval = 2.3;
int ival = dval;

//int temp = dval;
ival = temp;
----------------------------
#include <iostream>

int main()
{
	char c1 = 10;
	char c2 = 20;


	std::cout << typeid(c1 + c2).name() << "\n";

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


integral promotion

a > b     

x + y

rank
			long double
			double
			float

			long long
			long
			int
			============
			char short


_Bool
char 
signed char
unsigned char
short
unsigned short



char c1 = 5;
char c2 = 10;


c1 + c2

long              4 byte
unsigned int      4 byte


1. * x / y

#include <stdio.h>

int main()
{
	int x = 7;
	int y = 5;

	double dval = 1. * x / y;

	printf("dval = %f\n", dval);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

int x = -1;
unsigned int y = 10;

1111111111111

x > y 
x + y

x + y
10000   30000

32767

============================
1000 * 1000
i1 * i2

1
8234
1000

iþaretsiz türlerde taþma yoktur
iþaretsiz int türü 2 byte olsun


uval1 * uval2 = val

#include <stdio.h>
#include <stdlib.h>

int main()
{
	unsigned int uval = UINT_MAX;

	printf("%u\n", uval);
	printf("%u\n", uval + 1);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>
#include <stdlib.h>

int main()
{
	unsigned int uval = UINT_MAX;

	printf("uval = %d\n", uval);
	printf("uval = %u\n", uval);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
int trü 2 byte olsun

x * y * z        z * y * x

int x = 1000;
int y = 1000;
double z = 1.0;


#include <stdio.h>
#include <stdlib.h>


//tuzak sorulara dikkat!!!!
// koþul operatörünün 2. ve 3. operandlarý arasýnda
// örtülü tür dönüþümü söz konusudur

int main()
{
	int x = 5;
	int y = 10;
	double dval = 2.3;

	double dx = (y > 0 ? x : dval) / 2;

	printf("dx = %f\n", dx);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

atama tür dönüþümleri

double dval = ival;

i = d;

void func(double);

func(i);


double func(int x)
{
	////
	return x + 5;
}

veri kaybýndan kaçýnmak için

büyük türden ===>  daha küçük türe dönüþüm

#include <stdio.h>
#include <stdlib.h>


//warning C4244 : '=' : conversion from 'int' to 'short', possible loss of data

int main()
{
	short x;
	int ival = 12612;

	x = (short)ival; //yanlis


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>


int main()
{
	double dval;
	printf("bir gercek sayi giriniz: ");
	scanf("%lf", &dval);

	printf("dval = %f\n", dval);

	int ival = dval;

	
	printf("ival = %d\n", ival);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

//warning C4244: 'function': conversion from 'double' to 'float', possible loss of data

void func(float);

int main()
{
	double dval;
	printf("bir gercek sayi giriniz: ");
	scanf("%lf", &dval);

	printf("dval = %f\n", dval);

	func(dval);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


int türü 2 byte long türü 4 byte

ival * 5L  

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

//benim char isaretli char

int main()
{
	char c = 175;  //AF 1010 1111

	/// 00af  ffaf
	///0000 0000 1010 1111
	///1111 1111 1010 1111

	if (c == 175)  
		printf("dogru\n");
	else
		printf("yanlis\n");


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

tür dönüþtürme operatörü
type-cast operator

(double)(x + 4)

(T)op

(double)ival

(int)dval


i1 / i2

(double)i1 / i2
i1 / (double)i2

(double)(i1 / i2)   yanlis


(double)ival / 5

ival / 5.

(long)i1 * i2


#include <stdio.h>

#define			SIZE		100

int main()
{
	int a[SIZE];
	///code
	int odd_sum = 0;
	int odd_cnt = 0;

	for (int i = 0; i < SIZE; ++i) {
		if (a[i] % 2 != 0) {
			odd_sum += a[i];
			++odd_cnt;
		}
	}

	if (odd_cnt != 0) {
		(double)odd_sum / odd_cnt


	}
	//----------------------------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------------------



	#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	double dval;
	printf("bir gercek sayi giriniz: ");
	scanf("%lf", &dval);


	int ival = (int)dval;

	printf("ival = %d\n", ival);

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	double dval;

	printf("[-5 5] araliginda bir gercek sayi giriniz: ");
	scanf("%lf", &dval);
	printf("dval = %f\n", dval);
	int ival = dval; //dikkat ival deðiþkenine yuvarlanmýþ deðer kopyalanmali
	// = atomunub saðýna tek bir ifade yaziniz

	printf("ival = %d\n", ival);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int min, sec;

	printf("dakika ve saniye degerini girin: ");
	scanf("%d%d", &min, &sec);

	double hour = min / 60. + sec / 3600.;

	printf("hour = %f\n", hour);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

rastgele sayý üretimi
random number generation
=========================


true random number generation
pseudo random number generation


72847821838721487742381
98124123983421489712343   seed value  (tohum deðeri)

8 byte iþaretsiz

0 - 18..

mersenne - twister
------------------

random

rand
srand
-------------------------------


bitwise exor

a ^= b;
a ^= b;

seed 6576341

762
98765

- - - - - - - - - - - -

distribution (daðýlým)

PRNG
101010010100101010010010001001001010000101010110101001011

1 - 6
uniform distribution

insanlarýn yaþlarý 20 110

insanlarýn boylarý [30 - 250] 
insanlarýn kilolar

--------------------------------------------------

test iþlemleri
oyun programlarý
simülasyon programlarý
olasýlýk hesabý
þifreleme programlarý
genetic algorithm


#include <stdlib.h>
#include <stdio.h>


int main()
{
	for (int i = 0; i < 20; ++i) {
		printf("%d\n", rand());
	}
	

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


41
18467
6334
26500
19169
15724
11478
29358
26962
24464


21396
21006
13106
24957
27431
13173
470
23360
4622
12915

C:\Users\Hp\source\repos\csd13_17\Debug\csd13_17.exe (process 13480) exited with code 0.
Press any key to close this window . . .
#include <stdlib.h>
#include <stdio.h>


int main()
{
	srand(56712u);
	for (int i = 0; i < 10; ++i) {
		printf("%d\n", rand());
	}
	

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdlib.h>
#include <stdio.h>
#include <conio.h>


int main()
{
	for (unsigned int i = 1; i < 100; ++i) {
		srand(i);
		printf("seed value: %u\n", i);
		for (int k = 0; k < 200; ++k) {
			if (k && k % 20 == 0)
				printf("\n");
			printf("%5d ", rand());
		}
		_getch();
		system("cls");
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

randomize idiomu


#include <time.h>
#include <stdio.h>


int main()
{
	printf("%lld\n", time(NULL));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#include <time.h>
#include <stdio.h>


int main()
{
	for (;;) 
		printf("%lld\r", time(NULL));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"


int main()
{
	randomize();

	for (int i = 0; i < 10; ++i) {
		printf("%d %d\n", rand() % 6 + 1, rand() % 6 + 1);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

eger istediðiniz unifoem daðýlým ise % operatörünü kullanmayýn

#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"
#include <ctype.h>


int main()
{
	for (;;) {
		int c = rand() % 128;
		if (ispunct(c)) {
			putchar(c);
			sleep(20);
		}
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"
#include <ctype.h>


int main()
{
	for (;;) {
		int c = rand() % 128;
		if (isalnum(c)) {
			putchar(c);
			sleep(20);
		}
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"
#include <ctype.h>


int main()
{
	for (int i = 0; i < 10; ++i) {
		printf("%f\n", (double)rand() / RAND_MAX);
		sleep(20);
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"
#include <ctype.h>


#define			NTOSS      100000000

//yazý tura gelme olasýlýðý
// heads or tails

int main()
{
	int heads_count = 0;

	for (int i = 0; i < NTOSS; ++i) {
		if (rand() % 2 == 0)
			++heads_count;
	}

	printf("tura gelme olasiligi = %.15f\n", (double)heads_count / NTOSS);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

14:45'de devam edeceðiz
========================

7 - 11			oyuncu kazanýr
2 - 3 - 12      ouyuncu kaybeder

4 - 5 - 6 - 8 - 9 - 10
----------------------


11 kazandým
3  kaybettim
12  kaybettim

-------------
8
5 11 6 12 9 8  kazandým

10
5 9 2 6 8 6 7  kaybettim



#include <stdlib.h>
#include <stdio.h>
#include "nutility.h"

#define			NGAMES    100000000


//if return value is 1 player wins 
//if return value is 0 player loses

int rolldice(void)
{
	int dice1 = rand() % 6 + 1;
	int dice2 = rand() % 6 + 1;
	return dice1 + dice2;
}

int game_(int dice)
{

	for (;;) {
		int new_dice = rolldice();
		if (new_dice == 7)
			return 0;
		if (new_dice == dice)
			return 1;
	}

	return 0;
}


int game(void)
{
	int dice = rolldice();

	switch (dice) {
	case 7 :
	case 11: return 1;
	case 2 :
	case 3 :
	case 12: return 0;
	default: return game_(dice);
	}
	return 0;
}

int main()
{
	int win_cnt = 0;

	for (int i = 0; i < NGAMES; ++i) {
		win_cnt += game();
	}

	printf("kazanma olasiligi = %f\n", 100. * win_cnt / NGAMES);
}

//kazanma olasiligi = 49.230597
kazanma olasiligi = 49.292140
---------------------------------------


#include <stdlib.h>
#include <stdio.h>
#include <random>
#include "nutility.h"

#define			NGAMES    100000000


//if return value is 1 player wins 
//if return value is 0 player loses

int rolldice(void)
{
	static std::mt19937 eng;
	static std::uniform_int_distribution<> dist{ 1, 6 };

	int dice1 = dist(eng);
	int dice2 = dist(eng);
	return dice1 + dice2;
}

int game_(int dice)
{

	for (;;) {
		int new_dice = rolldice();
		if (new_dice == 7)
			return 0;
		if (new_dice == dice)
			return 1;
	}

	return 0;
}


int game(void)
{
	int dice = rolldice();

	switch (dice) {
	case 7 :
	case 11: return 1;
	case 2 :
	case 3 :
	case 12: return 0;
	default: return game_(dice);
	}
	return 0;
}

int main()
{
	int win_cnt = 0;

	for (int i = 0; i < NGAMES; ++i) {
		win_cnt += game();
	}

	printf("kazanma olasiligi = %f\n", 100. * win_cnt / NGAMES);
}




#include <stdlib.h>
#include <stdio.h>
#include <random>
#include "nutility.h"

#define			NPOINTS    100'000'000

using namespace std;

int main()
{
	int inside_count = 0;

	mt19937 eng;
	uniform_real_distribution<> dist{ 0., 1. };

	for (int i = 0; i < NPOINTS; ++i) {
		double x = dist(eng);
		double y = dist(eng);
		if (x * x + y * y <= 1.)
			++inside_count;
	}

	printf("pi sayisi = %.12f\n", 4. * inside_count / NPOINTS);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

diziler 
veri yapýlarý ve algoritmalara giriþ

arrays
======

array is a data structure


dynamic array (uzak ara en çok kullanýlan veri yapýsý) (dinamik dizi)
linked-list (baðlý liste)
	doubly linked list
	singly linked list
	rotating linked list
trees
	binary search tree
double ended queue (deque)

hash table


algorithm
	reverse
	sort
	partition
	linear seach
	unique
	merge
	.....,



algoritmanýn karmaþýklýðý 
(complexity of algorithm)

veri yapýsýndaki öðe sayýsýndaki artýþ ile maliyet artýþý arasýndaki iliþki

constant time algorithm

Big O notasyon
______________

O(1)     
O(log n)     
O(n)		
O(n * logn)		
O(n2)    
O(n2 * logn)		
O(n3)    
O(n!)    

reverse algoritmasý O(n)


O(1)
O(n)
O(n2)
O(n3)


--------------------------------

sabit kod

döngü   


döngü   


döngü
	döngü

-------------------------------------------
merge (sýralý birleþtirme)

1   3   6   9  12   89  987 ....
2  5  12  7675 9078 ....


O(n)
O(n2)

----------------------------
arrays (fixed array)


//array size
//array length

int main()
{
	int a[10];

	//a 10 elemanlý (elemanlarý) int türden bir dizi

}



//vla

int a[20];

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	int a[ival]; //expected constant expression

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

dizi tanýmlamada dizi boyutunu belirten ifade

a) tamsayý türlerinden olmak zorunda
b) sabit ifadesi olmak zorunda
b) 0 deðerinden büyük olmak zorunda

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 21;
	//int a[0];
	//int a[];
	//int a[4.5];
	//int a[-4];
	//int a[x];
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

1) C ve C++ dillerinde fonkiyonlarýn parametre deðiþkenleri dizi olamaz


void func(int a[10])
{

}

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//a bir pointer deðiþken
void func(int a[10])
{

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

C'e fonksiyonlar dizi döndüremez

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//a bir pointer deðiþken
void func(int a[10])
{

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

dizinin elemanlarýna eriþim

elemanlara eriþim bir pointer (gösterici) operatörü ile olur

[]  index - subscript

-------------------------------------
1      ()  []  .   ->
-------------------------------------

int a[10];  buradaki köþeli parantez bildirimde kullanýlan bir declarator

a[5]  //buradaki k.parantez bir operatör



a[tamsayi ifadesi]
C ve C++ dillerinde dizilerin indekslenmesi

int a[10];

a[0] ...... a[9]
a[0]  ilk eleman
a[9]  son eleman

ub

a[x]

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int a[10];
	int x = 10;

	//a[5] = 10;
	//a[2] + a[3]
	++a[a[2]];

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

traverse  
traversal
array traversal

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100


int a[SIZE];

int main()
{
	for (int i = 0; i < 10; ++i) {
		printf("%d ", a[i]);
	}

	printf("\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100



int main()
{
	int a[SIZE];
	
	for (int i = 0; i < 10; ++i) {
		a[i] = i;
	}

	for (int i = 0; i < 10; ++i) {
		printf("a[%d] = %d\n", i, a[i]);
	}

	printf("\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int a[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };

	for (int i = 0; i < 10; ++i) {
		printf("%d ", a[i]);
	}

	printf("\n");

	
	

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//dizinin oges sayýsýndan daha fazla sayýda
//ilk deðer veren ifade olamaz

int main()
{
	int a[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }; //gecersiz

	for (int i = 0; i < 10; ++i) {
		printf("%d ", a[i]);
	}

	printf("\n");

	
	

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[10] = { 0, 1, 2, 3, 4};

	for (int i = 0; i < 10; ++i) {
		printf("%d ", a[i]);
	}

	printf("\n");

	
	

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	//int a[10] = {}; //C'de gecersiz
	int a[10] = {0};

	for (int i = 0; i < 10; ++i) {
		printf("%d ", a[i]);
	}

	printf("\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[10] = {1, 4, 6, 7, 9, 12, 7, 18, 90, 13,}; //trailing comma

	for (int i = 0; i < 10; ++i) {
		printf("%d ", a[i]);
	}

	printf("\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[]; //gecersiz

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[] = { 2, 6, 7, 90, 132 };
	//int a[] = { 2, 6, 7, 90, 132, };
	//yukaridaki dizinin boyutu 5

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//designated initializer C99

int main()
{
	int a[10] = { [5] = 7, [2] = 9, [8] = 65 };

	for (int i = 0; i < 10; ++i) {
		printf("%d ", a[i]);
	}

	printf("\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//designated initializer C99

int main()
{
	//asagidaki dizinin boyutu 100

	int a[] = { [5] = 7, [2] = 9, [8] = 65, [99] = 666};


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//designated initializer C99

int main()
{
	//asagidaki dizinin boyutu 100

	int a[] = { [5] = 7, [2] = 9, [8] = 65, [99] = 666};


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//designated initializer C99

int main()
{
	int x = 10;

	int a[] = { [5] = 7, [x] = 9, [8] = 65, [99] = 666};
	//gecersiz
	//designated init. kullanýlmasý durumunda [] Ýçindeki ifade sabit ifadesi olmak zorunda


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10;

	int a[100] = { [12...25] = 6 }; //compiler extension

	for (int i = 0; i < 100; ++i)
		printf("%d ", a[i]);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


dizi üstünde koþturulan temel algoritmalar

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


#define			SIZE		100

int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	//a dizisinin tüm öðelerinin kümültatif toplamýný hesaplayýnýz

	int sum = 0;
	for (int i = 0; i < SIZE; ++i) {
		sum += a[i];
	}

	printf("toplam = %d\n", sum);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


#define			SIZE		100

int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	//a dizisinin tüm öðelerinin kümültatif toplamýný hesaplayýnýz

	int sum = 0;
	for (int i = 0; i < SIZE; ++i) {
		sum += a[i];
	}

	printf("ortalama = %f\n", (double)sum / SIZE);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


#define			SIZE		100

int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	//a dizisineki tek (odd) sayilarin aritmetik ortalamasýný hesaplayýnýz:
	int odd_sum = 0;
	int odd_cnt = 0;

	for (int i = 0; i < SIZE; ++i) {
		if (a[i] % 2 != 0) {
			odd_sum += a[i];
			++odd_cnt;
		}
	}

	if (odd_cnt != 0) {
		printf("teklerin ortalamasi %f\n", (double)odd_sum / odd_cnt);
	}
	else {
		printf("dizide hic tek sayi yok\n");
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

#include "nutility.h"


#define			SIZE		100


//dizide arama iþlemi (search)
//linear search 


int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);

	int val;

	printf("aranacak degeri giriniz:  ");
	scanf("%d", &val);

	int i;

	for (i = 0; i < SIZE; ++i) {
		if (a[i] == val)
			break;
	}

	if (i < SIZE) {
		printf("bulundu dizinin %d indisli elemani : %d\n", i, a[i]);
	}
	else {
		printf("bulunamadi\n");
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

#include "nutility.h"


#define			SIZE		100


//dizide arama iþlemi (search)
//linear search 


int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);

	int val;

	printf("aranacak degeri giriniz:  ");
	scanf("%d", &val);

	int i;

	for (i = 0; i < SIZE && a[i] != val; ++i)
		;

	if (i < SIZE) {
		printf("bulundu dizinin %d indisli elemani : %d\n", i, a[i]);
	}
	else {
		printf("bulunamadi\n");
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

#include "nutility.h"


#define			SIZE		100


//dizide arama iþlemi (search)
//linear search 


int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);

	int val;

	printf("aranacak degeri giriniz:  ");
	scanf("%d", &val);

	int i;
	int flag = 0;

	for (i = 0; i < SIZE; ++i)
		if (a[i] == val) {
			flag = 1;
			break;
		}

	if (flag) {
		printf("bulundu dizinin %d indisli elemani : %d\n", i, a[i]);
	}
	else {
		printf("bulunamadi\n");
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

3 * SIZE iþlem yerine 2 * SIZE iþlem ile aranan deðeri bulun ya da olmadýðýný yazdýrýn.


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

#include "nutility.h"


#define			SIZE		100



int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	int val;

	printf("aranacak degeri giriniz:  ");
	scanf("%d", &val);
	int cnt = 0;
	for (int i = 0; i < SIZE; ++i) {
		if (a[i] == val) {
			printf("a[%d] = %d\n", i, a[i]);
			++cnt;
		}
	}

	if (cnt) {
		printf("Toplam %d tane bulundu\n", cnt);
	}
	else {
		printf("bulunamadi\n");
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

max element
min element
min max element algoritmalarý



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

#include "nutility.h"


#define			SIZE		20



int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);

	int max = a[0];

	for (int i = 1; i < SIZE; ++i) {
		if (a[i] > max) {
			max = a[i];
		}
	}

	printf("max = %d\n", max);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

#include "nutility.h"


#define			SIZE		20



int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);

	int max = a[0];
	int max_idx = 0;

	for (int i = 1; i < SIZE; ++i) {
		if (a[i] > max) {
			max = a[i];
			max_idx = i;
		}
	}

	printf("max = %d dizinin %d indisli elemani\n", max, max_idx);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

#include "nutility.h"


#define			SIZE		20



int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);

	int min = a[0];

	for (int i = 1; i < SIZE; ++i) {
		if (a[i] < min) {
			min = a[i];
		}
	}

	printf("min = %d\n", min);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

#include "nutility.h"


#define			SIZE		20



int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);

	int min = a[0];
	int max = a[0];

	for (int i = 1; i < SIZE; ++i) {
		if (a[i] < min) {
			min = a[i];
		}
		else if (a[i] > max)
			max = a[i];
	}

	printf("min = %d  max = %d\n", min, max);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

runner-up

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

#include "nutility.h"


#define			SIZE		10



int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	int max = a[0];
	int runner_up = a[1];
	if (a[1] > a[0]) {
		max = a[1];
		runner_up = a[0];
	}

	for (int i = 1; i < SIZE; ++i) {
		if (a[i] > max) {
			runner_up = max;
			max = a[i];
		}
		else if (a[i] > runner_up) {
			runner_up = a[i];
		}
	}

	printf("runner_up = %d\n", runner_up);
	
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

bayrak dizileri

unique random number generator

#include "nutility.h"
#include <stdio.h>
#include <stdlib.h>


//urand iþlevi her çaðrýldýðýnda 0 - 100 arasýnda (100 dahil deðil)
// rastgele bir sayi uretmeli: Ýþlev daha önce üettiði bir deðeri tekrar
//üretmeyecek 
//Bu durumda fonksiyon en cok URAND_MAX çaðrýlabilir.
//eger fonksiyon daha fazla kez cagrilirsa hata kodu olarak -1 döndürmeli

#define			URAND_MAX    20


int urand(void)
{
	static int flags[URAND_MAX] = { 0 };
	static int count = 0;

	if (count == URAND_MAX)
		return -1;
	
	int val;
	while (1) {
		val = rand() % URAND_MAX;
		if (flags[val] == 0)
			break;
	}

	flags[val] = 1;
	++count;

	return val;
}

int main()
{
	randomize();

	for (int i = 0; i < URAND_MAX; ++i) {
		if (i && i % 20 == 0)
			printf("\n");

		printf("%3d ", urand());
	}
	printf("\n\n");
	printf("%3d ", urand());
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include "nutility.h"
#include <stdio.h>
#include <stdlib.h>


//urand iþlevi her çaðrýldýðýnda 0 - 100 arasýnda (100 dahil deðil)
// rastgele bir sayi uretmeli: Ýþlev daha önce üettiði bir deðeri tekrar
//üretmeyecek 
//Bu durumda fonksiyon en cok URAND_MAX çaðrýlabilir.
//eger fonksiyon daha fazla kez cagrilirsa hata kodu olarak -1 döndürmeli

#define			URAND_MAX    20


int urand(void)
{
	static int flags[URAND_MAX] = { 0 };
	static int count = 0;

	if (count == URAND_MAX)
		return -1;
	
	int val;
	/*while (1) {
		val = rand() % URAND_MAX;
		if (flags[val] == 0)
			break;
	}*/

	/*while (flags[val = rand() % URAND_MAX])
		;*/

	/*while (flags[val = rand() % URAND_MAX])
	{ }*/

	while (flags[val = rand() % URAND_MAX])
		continue;

	flags[val] = 1;
	++count;

	return val;
}

int main()
{
	randomize();

	for (int i = 0; i < URAND_MAX; ++i) {
		if (i && i % 20 == 0)
			printf("\n");

		printf("%3d ", urand());
	}
	printf("\n\n");
	printf("%3d ", urand());
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include "nutility.h"
#include <stdio.h>
#include <stdlib.h>


//urand iþlevi her çaðrýldýðýnda 0 - 100 arasýnda (100 dahil deðil)
// rastgele bir sayi uretmeli: Ýþlev daha önce üettiði bir deðeri tekrar
//üretmeyecek 
//Bu durumda fonksiyon en cok URAND_MAX çaðrýlabilir.
//eger fonksiyon daha fazla kez cagrilirsa hata kodu olarak -1 döndürmeli

#define			URAND_MAX    20


int urand(void)
{
	static int flags[URAND_MAX] = { 0 };
	static int count = 0;

	if (count == URAND_MAX)
		return -1;
	
	int val;
	/*while (1) {
		val = rand() % URAND_MAX;
		if (flags[val] == 0)
			break;
	}*/

	/*while (flags[val = rand() % URAND_MAX])
		;*/

	/*while (flags[val = rand() % URAND_MAX])
	{ }*/

	while (flags[val = rand() % URAND_MAX])
		continue;

	flags[val] = 1;
	++count;

	return val;
}

int main()
{
	randomize();

	for (int i = 0; i < URAND_MAX; ++i) {
		if (i && i % 20 == 0)
			printf("\n");

		printf("%3d ", urand());
	}
	printf("\n\n");
	printf("%3d ", urand());
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

 11  14  16   3  14  19   6   1  14   8   5   3  13  16   3  19  19   4   8   2

 11  6   1    5  13  4   2

 #include "nutility.h"
#include <stdio.h>
#include <stdlib.h>


#define			SIZE		20

int main()
{
	int a[SIZE];

	randomize();
	for (int i = 0; i < SIZE; ++i) {
		a[i] = rand() % 20;
		printf("%3d ", a[i]);
	}
	printf("\n");
	// a dizisindeki unique (eþsiz - tek) öðeleri ekrana yazdýran (dizide bulunduklarý sýrayla(
	//bir C kodu yazýnýz
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


reverse
sorting
sorting criteria
stable sort algorithms

binary search algorithm
merge algorithm



23  45 12 98 76 88 21 66 14
14  45 12 98 76 88 21 66 23
14  66 12 98 76 88 21 45 23
14  66 21 98 76 88 12 45 23
14  66 21 88 76 98 12 45 23


14  66 21 88 76 98 12 45 23


#include "nutility.h"
#include <stdio.h>
#include <stdlib.h>


#define			SIZE		20

int main()
{
	int a[SIZE];

	randomize();
	for (int i = 0; i < SIZE; ++i) {
		a[i] = rand() % 20;
		printf("%3d ", a[i]);
	}
	printf("\n");
	// a dizisindeki unique (eþsiz - tek) öðeleri ekrana yazdýran (dizide bulunduklarý sýrayla(
	//bir C kodu yazýnýz
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

#include "nutility.h"


#define			SIZE		100

int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	
	for (int i = 0; i < SIZE / 2; ++i) {
		int temp = a[i];
		a[i] = a[SIZE - 1 - i];
		a[SIZE - 1 - i] = temp;
	}

	display_array(a, SIZE);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

sort
sorting


quick sort
merge sort
heap sort
radix sort
shell sort
selection sort
bubble sort
insertion_sort
intro sort
.....

O(nlogn)   O(n2)

worst-case scenario
best-case scenario


n 1024


O(1)  1
O(logn)  10
O(n)  1024
O(n * logn)  10.240
O(n2)  10.240


14:50'de devam edeceðiz

----------------------------------
algoritmanýn karmaþýklýðý
kullanýlan (ilave bellek alaný)
best-case  worst_case
stable sort olup olmadýðý

key (anahtar)

Person

Mustafa Aksoy
Aysu Karaca
	Deniz Ersoy
Hasan Yesil
	Deniz Abat
Nur Cimen
	Deniz Firat
Ayla Erkus
	Deniz Erkaya


Ayla Erkus
Aysu Karaca
Deniz Ersoy
Deniz Abat
Deniz Firat
Deniz Erkaya
Hasan Yesil
Mustafa Aksoy
Nur Cimen

bubble sort O(n2)


92 23 76 123 8 16 55 45
23 92 76 123 8 16 55 45
23 76 92 123 8 16 55 45
23 76 92  8 16 123 55 45
23 76 92  8 16 55 123 45
23 76 92  8 16 55 45  123
23 76 92  8 16 55 92  123
23  92  8 16   76 92  123




(n - 1) (n - 1) => n2

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

#include "nutility.h"


#define			SIZE		100

int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	
	for (int i = 0; i < SIZE - 1; ++i) {
		for (int k = 0; k < SIZE - 1 - i; ++k) {
			if (a[k] > a[k + 1]) {
				int temp = a[k];
				a[k] = a[k + 1];
				a[k + 1] = temp;
			}
		}
	}
	display_array(a, SIZE);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

#include "nutility.h"


#define			SIZE		100

int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	
	for (int i = 0; i < SIZE - 1; ++i) {
		for (int k = 0; k < SIZE - 1 - i; ++k) {
			if (a[k] < a[k + 1]) {
				int temp = a[k];
				a[k] = a[k + 1];
				a[k + 1] = temp;
			}
		}
	}
	display_array(a, SIZE);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


3 7 21 97 123  137  167 891 1235 2 4 18 90 122 456 ...

a[k] cift ise ve a[k + 1] tek ise

63 17
17 63


988 120

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>

#include "nutility.h"


#define			SIZE		100

int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	
	for (int i = 0; i < SIZE - 1; ++i) {
		for (int k = 0; k < SIZE - 1 - i; ++k) {
			if ((a[k] % 2 == 0 && a[k + 1] % 2 != 0)  || a[k] % 2 == a[k + 1] % 2 && a[k] > a[k + 1]) {
				int temp = a[k];
				a[k] = a[k + 1];
				a[k + 1] = temp;
			}
		}
	}
	display_array(a, SIZE);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include "nutility.h"
#include <stdlib.h>



#define			SIZE		20

int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	
	for (int i = 0; i < SIZE - 1; ++i) {
		for (int k = 0; k < SIZE - 1 - i; ++k) {
			if (a[k] > a[k + 1]) {
				int temp = a[k];
				a[k] = a[k + 1];
				a[k + 1] = temp;
			}
		}
		display_array(a, SIZE);
		_getch();
		system("cls");
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include "nutility.h"
#include <stdlib.h>
#include <time.h>



#define			SIZE		500'000

int main()
{
	int *pd = malloc(SIZE * sizeof(int));
	if (!pd) {
		printf("bellek yetersiz\n");
		return 1;
	}
	printf("dizinin bellek alani elde edildi....\n");

	for (int i = 0; i < SIZE; ++i)
		pd[i] = rand();
	printf("dizi rastgele degerlerle dolduruldu....\n");
	printf("dizi siralama islemi baslatildi\n");
	clock_t start = clock();
	for (int i = 0; i < SIZE - 1; ++i) {
		for (int k = 0; k < SIZE - 1 - i; ++k) {
			if (pd[k] > pd[k + 1]) {
				int temp = pd[k];
				pd[k] = pd[k + 1];
				pd[k + 1] = temp;
			}
		}
	}
	clock_t end = clock();

	printf("dizi siralandi %f saniye\n", (double)(end - start) / CLOCKS_PER_SEC);
	_getch();
	display_array(pd, SIZE);

	free(pd);

}


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include "nutility.h"
#include <stdlib.h>
#include <time.h>



#define			SIZE		10'000'000

int icmp(const void *vp1, const void *vp2)
{
	return *(const int *)vp1 - *(const int *)vp2;
}



int main()
{
	int *pd = malloc(SIZE * sizeof(int));
	if (!pd) {
		printf("bellek yetersiz\n");
		return 1;
	}
	printf("dizinin bellek alani elde edildi....\n");

	for (int i = 0; i < SIZE; ++i)
		pd[i] = rand();
	printf("dizi rastgele degerlerle dolduruldu....\n");
	printf("dizi siralama islemi baslatildi\n");
	clock_t start = clock();
	qsort(pd, SIZE, sizeof(int), &icmp);
	/*for (int i = 0; i < SIZE - 1; ++i) {
		for (int k = 0; k < SIZE - 1 - i; ++k) {
			if (pd[k] > pd[k + 1]) {
				int temp = pd[k];
				pd[k] = pd[k + 1];
				pd[k + 1] = temp;
			}
		}
	}*/
	clock_t end = clock();

	printf("dizi siralandi %f saniye\n", (double)(end - start) / CLOCKS_PER_SEC);
	_getch();
	display_array(pd, SIZE);

	free(pd);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

sizeof operatörü
================


sizeof is a keyword
sizeof is a compile-time operator

10 + 20


4 8 12 2

sizeof operatörünün ürettiði deðer iþaretsiz (bir) tamsayi türündendir
size_t türü

size_t   unsigned int
size_t   unsigned long
size_t   unsigned long long


storage

sizeof (int)
sizeof int  gecersiz

sizeof(int)

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	//printf("sizeof(int)       = %zu\n", sizeof int);  //gecersiz
	printf("sizeof(int)       = %zu\n", sizeof(int));
	printf("sizeof(double)    = %zu\n", sizeof(double));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

sizeof expr

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 12;

	printf("%zu\n", sizeof 2.34);
	printf("%zu\n", sizeof (x + 2.3));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 12;

	printf("%zu\n", sizeof x + 12);
	printf("%zu\n", sizeof (x + 12));


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

Dikkat!
sizeof operatörünün operandý olan ifade için iþlem kodu üretilemez

unevaluated context

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 12;

	unsigned int uval = sizeof(++x);
	printf("uval = %u\n", uval);
	printf("x = %d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int func()
{
	printf("func cagrildi\n");
	return 1;
}

int main()
{
	int x = 12;

	unsigned int uval = sizeof(func());
	printf("uval = %u\n", uval);
	printf("x = %d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[5] = { 1, 2, 3, 4, 5 };
	double b[] = { 1.1, 4.5, 6.6, 9.1, .5 };

	//printf("sizeof(a) = %zu\n", sizeof(a));
	printf("sizeof(b) = %zu\n", sizeof(b));
	printf("sizeof(b) = %zu\n", sizeof b);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[] = { 1, 2, 3, 4, 5, 56, 10, 6, 8, 2 };

	printf("a dizisinin boyutu = %zu\n", sizeof(a) / sizeof(a[0]));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[] = { 1, 2, 3, 4, 5, 56, 10, 6, 8, 2 };
	int b[sizeof(a) / sizeof(a[0])] = { 0 };

	//printf("a dizisinin boyutu = %zu\n", sizeof(a) / sizeof(a[0]));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[] = { 1, 2, 3, 4, 5, 56, 10, 6, 8, 2, 6, 1, 2, 3};
	
	for (int i = 0; i < sizeof(a) / sizeof(a[0]); ++i) {
		printf("%d ", a[i]);
	}

	printf("\n");


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


int main()
{
	int a[] = { 1, 2, 3, 4, 5, 56, 10, 6, 8, 2, 6, 1, 2, 3};
	
	for (int i = 0; i < asize(a); ++i) {
		printf("%d ", a[i]);
	}

	printf("\n");


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


int main()
{
	int a[] = { 1, 2, 3, 4, 5, 56, 10, 6, 8, 2, 6, 1, 2, 3};
	int b[2 * asize(a)];

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


int main()
{
	printf("sizeof(size_t) = %zu\n", sizeof(size_t));
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


16:14'de devam edeceðiz

array to pointer conversion
array decay

int a[10];

a --->  &a[0]

C'de bir dizi ismi bir ifade içinde kullanýldýðýnda
derleyici dilin kurallarý gereði dizi ismini söz konusu dizinin
ilk öðesinin adresine dönüþtürür.

array decay
array to pointer conversion


C'de adres operatörü ile oluþturulan ifadeler R value expression

a L value expression

a ==> &a[0]

#include<stdio.h>

//C'de bir dizi  ismi atama operatörünün sol operandý olamaz:

int main()
{
	int a[5] = { 1, 2, 3, 4, 5 };
	int b[5];

	&b[0] = a;
	//b = a; //Gecersiz
	//b = 
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include <stdio.h>

//C'de bir dizi  ismi atama operatörünün sol operandý olamaz:

int main()
{
	int a[5] = { 1, 2, 3, 4, 5 };
	int b[5];


	for (int i = 0; i < 5; ++i)
		b[i] = a[i];
	//
	//memcpy
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
a[i] 
i[a]


adres + tamsayi
tamsayi + adres

*adres
a[i]		*(a + i)
i[a]        *(i + a)

#include <stdio.h>

int main()
{
	int a[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

	for (int i = 0; i < 10; ++i)
		printf("%d ", i[a]);

	printf("\n");

	for (int i = 0; i < 10; ++i)
		printf("%d ", a[i]);

	printf("\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

merge algoritmasý (sirali birlestirme)


2 5 7 12 98 123 235
5 12 45 67 871 


 47 270 378 434 448 481 724 831 881 914
-------------------------------------------------------------------------------
 22  30  65 133 242 264 384 430 701 736
-------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		10


int main()
{
	int a[SIZE];
	int b[SIZE];
	int c[SIZE * 2];

	randomize();
	set_random_array(a, SIZE);
	sort(a, SIZE);
	display_array(a, SIZE);
	set_random_array(b, SIZE);
	sort(b, SIZE);
	display_array(b, SIZE);
	
	int idxa = 0;
	int idxb = 0;

	for (int i = 0; i < 2 * SIZE; ++i) {
		if (idxa == SIZE) 
			c[i] = b[idxb++];
		else if (idxb == SIZE)
			c[i] = a[idxa++];
		else if (a[idxa] < b[idxb])
			c[i] = a[idxa++];
		else
			c[i] = b[idxb++];
	}

	display_array(c, 2 * SIZE);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

		16  19   8   3   2  15  16  12  15  19


-------------------------------------------------------------------------------
		
		****************
		*******************
		********
		***
		**
		***************
		****************
		************
		***************
		*******************

C:\Users\Hp\source\repos\csd13_17\Release\csd13_17.exe (process 13700) exited with code 0.
Press any key to close this window . . .

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		10

int main()
{
	int a[SIZE];

	randomize();

	for (int i = 0; i < SIZE; ++i)
		a[i] = rand() % 20 + 1;

	display_array(a, SIZE);
	for (int i = 0; i < SIZE; ++i) {
		for (int k = 0; k < a[i]; ++k) {
			putchar('*');
		}
		printf("\n");

	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#include "nutility.h"
#include <stdio.h>
#include <stdlib.h>


#define			SIZE		20

int main()
{
	int a[SIZE];

	randomize();
	for (int i = 0; i < SIZE; ++i) {
		a[i] = rand() % 20;
		printf("%3d ", a[i]);
	}
	printf("\n");

	for (int i = 0; i < SIZE; ++i) {
		//eger a[i] deðeri dizide sadece bir tane varsa onu yazdir
		int k;
		for (k = 0; k < SIZE; ++k) 
			if (i != k && a[k] == a[i]) 
				break;
		if (k == SIZE)
			printf("%3d ", a[i]);
	}
	printf("\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include "nutility.h"
#include <stdio.h>
#include <stdlib.h>


#define			SIZE		20

int main()
{
	int a[SIZE];

	randomize();
	for (int i = 0; i < SIZE; ++i) {
		a[i] = rand() % 20;
		printf("%3d ", a[i]);
	}
	printf("\n");
	int cnt[20] = { 0 };

	for (int i = 0; i < SIZE; ++i)
		++cnt[a[i]];

	for (int i = 0; i < 20; ++i) {
		if (cnt[i] == 1)
			printf("%3d ", i);
	}
	printf("\n");



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


binary search algoritmasý


  2  16  20  30  35  39  45  65  66  84  85  93  94  98 101 104 142 162 180 191
194 207 208 211 241 242 255 264 277 287 295 305 312 314 320 330 344 345 347 348
363 365 368 369 387 387 395 398 403 410 426 428 457 471 471 474 480 501 503 510
537 548 550 554 564 565 572 574 575 591 626 647 656 672 677 686 708 711 722 745
753 754 770 805 810 822 830 835 837 840 855 856 857 922 929 952 959 967 977 980


#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <stdlib.h>


#define			SIZE		100

int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	sort(a, SIZE);
	display_array(a, SIZE);

	int ival;
	printf("aranacak degeri giriniz: ");
	scanf("%d", &ival);

	int idx_first = 0;
	int idx_last = SIZE - 1;
	int idx_mid;

	while (idx_first <= idx_last) {
		idx_mid = (idx_first + idx_last) / 2;
		if (a[idx_mid] == ival)
			break;

		if (a[idx_mid] > ival) {
			idx_last = idx_mid - 1;
		}
		else {
			idx_first = idx_mid + 1;
		}
	}

	if (idx_first > idx_last) {
		printf("aranan deger bulunamadi\n");
	}
	else {
		printf("bulundu dizinin %d. indisli ogesi\n", idx_mid);
	}




}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <stdlib.h>


#define			SIZE		4000

int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	sort(a, SIZE);
	//display_array(a, SIZE);

	int ival;
	printf("aranacak degeri giriniz: ");
	scanf("%d", &ival);

	int idx_first = 0;
	int idx_last = SIZE - 1;
	int idx_mid;
	int cnt = 0;

	while (idx_first <= idx_last) {
		++cnt;
		idx_mid = (idx_first + idx_last) / 2;
		if (a[idx_mid] == ival)
			break;

		if (a[idx_mid] > ival) {
			idx_last = idx_mid - 1;
		}
		else {
			idx_first = idx_mid + 1;
		}
	}

	if (idx_first > idx_last) {
		printf("aranan deger bulunamadi\n");
	}
	else {
		printf("bulundu dizinin %d. indisli ogesi\n", idx_mid);
	}

	printf("cnt = %d\n", cnt);



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <stdlib.h>


#define			SIZE		1000

int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	sort(a, SIZE);
	//display_array(a, SIZE);

	int ival;
	printf("aranacak degeri giriniz: ");
	scanf("%d", &ival);

	int idx_first = 0;
	int idx_last = SIZE - 1;
	int idx_mid;
	int cnt = 0;

	while (idx_first <= idx_last) {
		++cnt;
		idx_mid = (idx_first + idx_last) / 2;
		if (a[idx_mid] == ival)
			break;

		if (a[idx_mid] > ival) {
			idx_last = idx_mid - 1;
		}
		else {
			idx_first = idx_mid + 1;
		}
	}

	if (idx_first > idx_last) {
		printf("aranan deger bulunamadi\n");
	}
	else {
		printf("bulundu dizinin %d. indisli ogesi\n", idx_mid);
	}

	printf("cnt = %d\n", cnt);



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

a) sentaks hatasý içeren
b) warning 

----------------------------------------------


int isxyz(int x)
{


	if (x % 2 == 0 && y % 2 == 0)
		return 1;
	else
		return 0;


	//return x % 2 == 0 && y % 2 == 0;
}

#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <stdlib.h>


#define			SIZE		1000

int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	sort(a, SIZE);
	//display_array(a, SIZE);

	int ival;
	printf("aranacak degeri giriniz: ");
	scanf("%d", &ival);

	int idx_first = 0;
	int idx_last = SIZE - 1;
	int idx_mid;
	int cnt = 0;

	while (idx_first <= idx_last) {
		++cnt;
		idx_mid = (idx_first + idx_last) / 2;
		if (a[idx_mid] == ival)
			break;

		if (a[idx_mid] > ival) {
			idx_last = idx_mid - 1;
		}
		else {
			idx_first = idx_mid + 1;
		}
	}

	if (idx_first > idx_last) {
		printf("aranan deger bulunamadi\n");
	}
	else {
		printf("bulundu dizinin %d. indisli ogesi\n", idx_mid);
	}

	printf("cnt = %d\n", cnt);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
//açýklama satýrlarý

yazýlar

string

int ival = 10;
string str = "ahmet";

#include <string>
#include <iostream>

using namespace std;


int main()
{
	string name = "hasan";

	if (name == "hasan")
		name += "can";

	name = "emine";
	//

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------




'\0'    null character  tamsayi degeri ne? 0
'A'    65

0000 0000

'0'    ascii  48
'\0'   0


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100

int main()
{
	char str[SIZE] = "veysel";
	///code

	for (int i = 0; str[i] != '\0'; ++i) {
		printf("%c ", str[i]);
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100

int main()
{
	char str[SIZE] = "veysel";
	///code

	for (int i = 0; str[i] != '\0'; ++i) {
		putchar(str[i]);
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100

int main()
{
	char str[SIZE] = "veysel";
	///code

	for (int i = 0; str[i] != '\0'; ++i) {
		putchar(str[i]);
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100

int main()
{
	char str[100];
	///

	str[0] = 'C';
	str[1] = 'A';
	str[2] = 'N';

	for (int i = 0; str[i] != '\0'; ++i) { //ub
		putchar(str[i]);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100

int main()
{
	char str[100];
	///

	str[0] = 'C';
	str[1] = 'A';
	str[2] = 'N';
	str[3] = '\0';

	for (int i = 0; str[i] != '\0'; ++i) { 
		putchar(str[i]);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100

char str[100];

int main()
{
	///

	str[0] = 'C';
	str[1] = 'A';
	str[2] = 'N';

	for (int i = 0; str[i] != '\0'; ++i) { //ok
		putchar(str[i]);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100


int main()
{
	///
	static char str[100];

	str[0] = 'C';
	str[1] = 'A';
	str[2] = 'N';

	for (int i = 0; str[i] != '\0'; ++i) { //ok
		putchar(str[i]);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100


int main()
{
	char str[100] = "1000 TL";

	int i;

	for (i = 0; str[i] != '\0'; ++i) {
		printf("%d ", str[i]);
	}
	printf("\n%d ", str[i]);




}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100


int main()
{
	char str[100] = "ONUR OZCAN";

	for (int i = 0; str[i] != '\0'; ++i) {
		printf("%c", str[i]);
	}
	




}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100

//null (character)terminated string

int main()
{
	char str[100] = "ONUR OZCAN";

	for (int i = 0; str[i]; ++i) {
		printf("%c", str[i]);
	}
	




}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



yazýnýn standart çýkýþ akýmýna yazdýrýlmasý
char türden dizilere ilk deðer verme
bir dizide yazý oluþturmanýn yollarý

14:40

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100


int main()
{
	char str[100] = "necati ergin ";

	printf("isim = (%s)\n", str);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100


int main()
{
	char name[SIZE] = "necati";
	char surname[SIZE] = "aksoy";
	int age = 24;

	printf("%s isimli ve %s soyisimli kisi %d yasinda\n", name, surname, age);

	

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100


int main()
{
	char name[SIZE] = "necati";
	char surname[SIZE] = "aksoy";

	puts(name);
	puts(surname);
	printf("Pazar\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

#define			SIZE		100


int main()
{
	char str[100] = { 'A', 'L', 'P', 'E', 'R' };

	puts(str);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100


int main()
{
	char str[] = { 'A', 'L', 'P', 'E', 'R' };

	printf("size str = %zu\n", asize(str));
	puts(str); //ub

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100


int main()
{
	char str[] = { 'A', 'L', 'P', 'E', 'R', '\0' };

	printf("size str = %zu\n", asize(str));
	puts(str); 

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100


int main()
{
	char str[100] = "mustafa";

	
	puts(str); 

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100


int main()
{
	char str[] = "mustafa";

	printf("size a = %zu\n", asize(str));
	puts(str); //ok

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100


int main()
{
	char str[10] = { 'a', 'l', 'i' };

	puts(str);

	for (int i = 0; i < 10; ++i) {
		printf("%d ", str[i]);
	}
	printf("\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100


int main()
{
	char str[4] = "KAYA"; //C'de gecerli C++'da gecersiz


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100


int main()
{
	char str[4] = "KAYA"; 

	puts(str); //ub


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100


int main()
{
	char str[4] = "KAYA";

	printf("%s", str); //ub


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100


int main()
{
	char str[100];

	str[0] = 'A';
	str[1] = 'K';

	puts(str); //ub

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100


int main()
{
	char str[] = { 'M', 'E', 'R', 'T' };

	puts(str); //ub


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100


int main()
{
	char str[4] = { 'M', 'E', 'R', 'T' };

	puts(str); //ub


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100


int main()
{
	char str[4] = "mert";

	puts(str); //ub


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100


int main()
{
	char str[SIZE];

	printf("bir isim girin: ");
	scanf("%s", str);

	printf("isim : (%s)\n", str);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100


int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);

	printf("(%s)\n", str);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


//scanf  %s
//sgets

int main()
{
	//char str[100] = "";
	char str[100] = { 0 };
	printf("(%s)\n", str);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


//scanf  %s
//sgets

int main()
{
	char str[10];

	printf("bir yazi girin: ");
	scanf("%9s", str); 

	printf("(%s)\n", str);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

C'de tipik yazý iþlemleri (yazý üzerinde koþturulan algoritmalar)
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100

//bir yazýnýn uzunlugunu bulmak

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);

	int len = 0;
	for (int i = 0; str[i] != '\0'; ++i) {
		++len;
	}

	printf("(%s) yazisinin uzunlugu = %d\n", str, len);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100

//bir yazýnýn uzunlugunu bulmak

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);

	int i;
	for (i = 0; str[i] != '\0'; ++i)
		;
	

	printf("(%s) yazisinin uzunlugu = %d\n", str, i);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

str
len

str[len] ===> null character

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100

//bir yazýnýn uzunlugunu bulmak

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);

	int i;
	for (i = 0; str[i] != '\0'; ++i)
		;
	

	printf("(%s) yazisinin uzunlugu = %d\n", str, i);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100

//bir yazýnýn uzunlugunu bulmak

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);

	int len = 0;

	while (str[len] != '\0')
		++len;


	printf("(%s) yazisinin uzunlugu = %d\n", str, len);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100

//bir yazýnýn uzunlugunu bulmak

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);

	int len = 0;

	while (str[len])
		++len;


	printf("(%s) yazisinin uzunlugu = %d\n", str, len);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100

//bir yazýnýn uzunlugunu bulmak

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);

	int len = 0;

	while (str[len++])  //yanlis
		;


	printf("(%s) yazisinin uzunlugu = %d\n", str, len);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100

//bir yazýnýn uzunlugunu bulmak

//necati
int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);

	int len;

	for (len = 0; str[len] != '\0'; ++len)
		;

	for (int i = len - 1; i >= 0; --i)
		putchar(str[i]);

	printf("\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100

//bir yazýnýn uzunlugunu bulmak

//necati
int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);
	printf("girilen yazi = (%s)\n", str);
	//yazinin sonuna ! karakteri yerlestirin:

	int i;

	for (i = 0; str[i] != '\0'; ++i)
		;
	str[i] = '!';
	str[i + 1] = '\0';
	printf("yazi = (%s)\n", str);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100

//yazýyý ters çevirmek

//necati
int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);
	printf("girilen yazi = (%s)\n", str);
	int len;

	for (len = 0; str[len] != '\0'; ++len)
		;

	for (int i = 0; i < len / 2; ++i) {
		char c = str[i];
		str[i] = str[len - 1 - i];
		str[len - 1 - i] = c;
	}

	printf("yazi = (%s)\n", str);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

char str[100] = "veysel";

printf("%c", str[3]); //s
printf("%d", str[3]); //s'nin kodu
printf("%s", str[3]); //ub

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100

//yazýyý ters çevirmek

//necati
int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);
	printf("girilen yazi = (%s)\n", str);

	printf("sayilacak karakteri girin:  ");
	int c = getchar();

	int cnt = 0;

	for (int i = 0; str[i] != '\0'; ++i) {
		if (str[i] == c)
			++cnt;
	}

	printf("(%s) yazisinda %d tane (%c) karakteri var\n", str, cnt, c);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		100

//yazýyý ters çevirmek

//necati
int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);
	printf("girilen yazi = (%s)\n", str);

	printf("sayilacak karakteri girin:  ");
	int c = getchar();

	int cnt = 0;

	for (int i = 0; str[i] != '\0'; ++i) {
		if (toupper(str[i]) == toupper(c))
			++cnt;
	}

	printf("(%s) yazisinda %d tane (%c) karakteri var\n", str, cnt, c);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000

//bir yazidaki tum harf karakterlerinin sayilmasi (ASCII)

int main()
{
	char str[SIZE];
	int cnts[26] = { 0 };

	printf("bir yazi girin: ");
	sgets(str);
	printf("girilen yazi = (%s)\n", str);
	
	for (int i = 0; str[i] != '\0'; ++i) {
		if (isalpha(str[i])) {
			++cnts[toupper(str[i]) - 'A'];
		}
	}

	for (int i = 0; i < 26; ++i) {
		if (cnts[i] != 0)
			printf("%c  %d\n", 'A' + i, cnts[i]);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000

//bir yazidaki tum harf karakterlerinin sayilmasi (ASCII)

int main()
{
	char str[SIZE];
	int cnts[26] = { 0 };

	printf("bir yazi girin: ");
	sgets(str);
	printf("girilen yazi = (%s)\n", str);
	
	for (int i = 0; str[i] != '\0'; ++i) {
		if (isalpha(str[i])) {
			++cnts[toupper(str[i]) - 'A'];
		}
	}

	for (int i = 0; i < 26; ++i) {
		if (cnts[i] != 0)
			printf("%c  %d\n", 'A' + i, cnts[i]);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000

int main()
{
	char str[SIZE];

	printf("iki isim girin (arada bir bosluk olmali): ");
	sgets(str); //can mustafa
	printf("girilen yazi (%s)\n", str);  //(can mustafa)
	//bu iki isim yer degistirecek
	printf("yazi (%s)\n", str); //(mustafa can)
	//kodda ikinci bir dizi tanimlanmayacak

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

16:13'te devam

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000

int main()
{
	char str[SIZE];

	printf("iki isim girin (arada bir bosluk olmali): ");
	sgets(str); //can mustafa
	printf("girilen yazi (%s)\n", str);  //(can mustafa)
	//bu iki isim yer degistirecek
	printf("yazi (%s)\n", str); //(mustafa can)
	//kodda ikinci bir dizi tanimlanmayacak

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

Para hazýr ama Rýza harap!
Traþ neden þart?
Ana Naci dede ne dedi Canan'a?
madam, I'm Adam.
A man, a plan, a canal: Panama
en iyi meþe beþe mi yine?
At sahibi gibi hasta

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000

int main()
{
	char str[SIZE];

	printf("bir cumle girin: ");
	sgets(str); // (At sahibi gibi hasta.)
	printf("girilen yazi (%s)\n", str);  //

	//kod
	//palindrom (degil)
	//2. bir dizi kullanilmayacak 
	//str dizisindeki yazi degistirilmeyecek

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	int a[SIZE + 1];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	int ival;

	printf("aranacak degeri girin: ");
	scanf("%d", &ival);

	a[SIZE] = ival;
	int i;

	for (i = 0; a[i] != ival; ++i)
		;

	if (i == SIZE)
		printf("bulunamadi\n ");
	else {
		printf("bulundu dizinin %d indisli ogesi\n", i);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char s1[SIZE];
	char s2[SIZE];
	char s3[SIZE];

	printf("iki isim giriniz: "); //Dogac Akyildiz
	scanf("%s%s", s1, s2);
	//s1 ve s2'deki isimleri s3 dizisinde birlestirin
	//code

	int i, k;
	for (i = 0; s1[i] != '\0'; ++i) {
		s3[i] = s1[i];
	}

	for (k = 0; s2[k] != '\0'; ++k)
		s3[i + k] = s2[k];

	s3[i + k] = '\0';


	printf("(%s)\n", s3); //(DogacAkyildiz)

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char s1[SIZE];
	char s2[SIZE];
	char s3[SIZE];

	printf("iki isim giriniz: "); //Dogac Akyildiz
	scanf("%s%s", s1, s2);
	//s1 ve s2'deki isimleri s3 dizisinde birlestirin
	//code

	int i;
	for (i = 0; s1[i] != '\0'; ++i) {
		s3[i] = s1[i];
	}

	for (int k = 0; s2[k] != '\0'; ++k)
		s3[i++] = s2[k];

	s3[i] = '\0';


	printf("(%s)\n", s3); //(DogacAkyildiz)

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char s1[SIZE];
	char s2[SIZE];

	printf("iki isim giriniz: "); //Dogac Akyildiz
	scanf("%s%s", s1, s2);
	//s1 yazisinin sonuna s2 yazisini ekleyiniz concatanation / append

	int i;

	for (i = 0; s1[i] != '\0'; ++i)
		; //null statement

	for (int k = 0; s2[k] != '\0'; ++k)
		s1[i++] = s2[k];

	s1[i] = '\0';

	printf("(%s)\n", s1);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char source[SIZE];
	char dest[SIZE];

	printf("bir cumle girin: ");
	sgets(source);
	printf("girilen cumle (%s)\n", source);

	//source adresindeki yazinin tersini dest adresine kopyalayin
	int i;

	for (i = 0; source[i] != '\0'; ++i)
		dest[i] = source[i];
	dest[i] = '\0';

	printf("(%s)\n", dest);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char source[SIZE];
	char dest[SIZE];

	printf("bir cumle girin: ");
	sgets(source);
	printf("girilen cumle (%s)\n", source);

	//source adresindeki yazinin tersini dest adresine kopyalayin

	printf("(%s)\n", dest);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


reverse copy algoritmasý
remove copy algoritmasý

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char source[SIZE];
	char dest[SIZE];

	printf("bir cumle girin: ");
	sgets(source);
	printf("girilen cumle (%s)\n", source);

	int ch;
	printf("silinecek karakter: ");
	ch = getchar();
	//ch karakteri silinmis bicimde yaziyi dest adresine kopyalayin
	int idx = 0;


	for (int i = 0; source[i] != '\0'; ++i)
		if (source[i] != ch) { //silinecek karakter olmadigindan kopyalanmali
			dest[idx++] = source[i];			
		}

	dest[idx] = '\0';

	printf("(%s)\n", dest);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


(inplace) remove

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char source[SIZE];
	

	printf("bir cumle girin: ");
	sgets(source);
	printf("girilen cumle (%s)\n", source);

	int ch;
	printf("silinecek karakter: ");
	ch = getchar();
	int idx = 0;

	for (int i = 0; source[i] != '\0'; ++i) {
		if (source[i] != ch)
			source[idx++] = source[i];
	}
	source[idx] = '\0';

	printf("(%s)\n", source);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char s1[SIZE];
	char s2[SIZE];

	printf("birinci yaziyi girin: ");
	sgets(s1);
	printf("ikinci yaziyi girin: ");
	sgets(s2);
	//girilen 2 yazinin esitligini sinayan bir C kodu yazin
	//ekrana esit ya da esit degil yazisi yazdirilacak

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);

	//partition (bölümleme - partisyon)
	//ciftler basa - tekler sona
	// sizin kodunuz
	//partition point: koþulu saðlamayan ilk öðenin indeksi
	//partition point ekrana yazdýrýlacak
	//tek döngü ile kodlamaya calisin

	display_array(a, SIZE);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");

	sgets(str);
	printf("(%s)\n", str);
	//yazidaki (bosluk karakterleri ile ayrilmis) kelime sayisini bulup ekrana yazdirin
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

Yazýlar ve sayilar arasindaki donusumler

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000

//negatif deger yok

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");

	sgets(str);
	printf("(%s)\n", str);
	int ival = 0;

	//

	printf("ival = %d\n", ival);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000

//negatif deger yok
// 4567

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");

	sgets(str);
	printf("(%s)\n", str);

	for (int i = 0; str[i] != '\0'; ++i) {
		printf("%d   %d\n", str[i], str[i] - '0');
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000

//negatif deger yok
// 4567
// val = 0
// val = val * 10 + digitval


int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");

	sgets(str);
	printf("(%s)\n", str);

	int val = 0;

	for (int i = 0; str[i] != '\0'; ++i) {
		val = val * 10 + str[i] - '0';
	}

	printf("val = %d\n", val);




}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000

//negatif deger yok
// 4567
// val = 0
// val = val * 10 + digitval


int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");

	sgets(str);
	printf("(%s)\n", str);

	
	int val = 0;
	int sign = 1;
	int idx = 0;

	if (str[0] == '-') {
		sign = -1;
		idx = 1;
	}

	for (int i = idx; str[i] != '\0'; ++i) {
		val = val * 10 + str[i] - '0';
	}
	val *= sign;

	printf("val = %d\n", val);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000


int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");

	sgets(str);
	printf("(%s)\n", str);
	int val = 0;

	for (int i = 0; str[i] != '\0'; ++i) {
		val = val * 8 + str[i] - '0';
	}

	printf("val = %d\n", val);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000


int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");

	sgets(str);
	printf("(%s)\n", str);
	int val = 0;

	for (int i = 0; str[i] != '\0'; ++i) {
		if (isdigit(str[i]))
			val = val * 16 + str[i] - '0';
		else if (isxdigit(str[i])) {
			val = val * 16 + toupper(str[i]) - 'A' + 10;
		}
	}

	printf("val = %d\n", val);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000


int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");

	sgets(str);
	printf("(%s)\n", str);
	int val = 0;

	for (int i = 0; str[i] != '\0'; ++i) {
		val = val * 2 + str[i] - '0';
	}

	printf("val = %d\n", val);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000

//876123   3
//87612    2
//8761     1
//876     6
//87     7
//8     8


int main()
{
	char str[SIZE]; //321678

	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);
	int temp = ival;
	int idx = 0;

	while (temp) {
		str[idx++] = temp % 10 + '0';
		temp /= 10;
	}
	str[idx] = '\0';

	//ve yaziyi ters ceviriyoruz
	for (int i = 0; i < idx / 2; ++i) {
		char ctemp = str[i];
		str[i] = str[idx - 1 - i];
		str[idx - 1 - i] = ctemp;
	}

	printf("(%d) (%s)\n", ival, str);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


___ali____meryem___mert__hasan__

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000
#define			INWORD		1
#define			OUTWORD		0

int main()
{
	char str[SIZE];
	int word_flag = OUTWORD;
	int word_cnt = 0;

	printf("bir yazi girin:  ");
	sgets(str);
	printf("girilen yazi : (%s)\n", str);

	for (int i = 0; str[i] != '\0'; ++i) {
		if (isspace(str[i])) {
			word_flag = OUTWORD;
		}
		else if (word_flag == OUTWORD) {
			++word_cnt;
			word_flag = INWORD;
		}
	}

	printf("toplam %d kelime\n", word_cnt);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000
#define			INWORD		1
#define			OUTWORD		0

int isdelim(int c)
{
	return isspace(c) || ispunct(c);
}

int main()
{
	char str[SIZE];
	int word_flag = OUTWORD;
	int word_cnt = 0;

	printf("bir yazi girin:  ");
	sgets(str);
	printf("girilen yazi : (%s)\n", str);

	for (int i = 0; str[i] != '\0'; ++i) {
		if (isdelim(str[i])) {
			word_flag = OUTWORD;
		}
		else if (word_flag == OUTWORD) {
			++word_cnt;
			word_flag = INWORD;
		}
	}

	printf("toplam %d kelime\n", word_cnt);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000

//alican
//ali

int main()
{
	char s1[SIZE];
	char s2[SIZE];

	printf("birinci yaziyi girin: ");
	sgets(s1);
	printf("ikinci yaziyi girin: ");
	sgets(s2);

	int idx = 0;
	int flag = 0;

	while (s1[idx] == s2[idx]) {
		if (s1[idx] == '\0') {
			flag = 1;
			break;
		}

		++idx;
	}

	if (flag)
		printf("evet esit\n");
	else
		printf("hayir esit degil\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000

//reverse copy

int main()
{
	char s1[SIZE];  //ahmet
	char s2[SIZE];

	printf("bir yazi girin: ");
	sgets(s1);

	int i;

	for (i = 0; s1[i] != '\0'; ++i)
		;

	int k = 0;

	while (i--) {
		s2[k++] = s1[i];
	}

	s2[k] = '\0';

	printf("(%s) (%s)\n", s1, s2);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


const anahtar sözcüðü - 1

oxymoron

const variable

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000


int main()
{
	//x deðeri hiç deðiþmeyecek 
	//adeta bir sabitmiþ gibi kullanilacak bir degisken
	// mutate
	// mutable  immutable

	const int x = 10;
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000


int main()
{
	const int a[] = { 2, 6, 7, 9, 3, 6, 1 };

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000


int main()
{
	const int x = 10;
	//L-value specifies const object
	//x = 24; //gecersiz


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

#define			SIZE		1000


int main()
{
	const int a[] = { 2, 6, 7, 9, 3, 6, 1 };

	//a[4] = 456; //gecersiz

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

const semantics

soru
neden const anahtar sözcüðü?

1. kendimizi (lojik hatalara karþý) korumak
2. okuyana yardýmcý olmak
3. derleyiciye yardýmcý oluyoruz



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"


int main()
{
	//dikkat!
	//C'de const nesneler ilk deðer verilmeden tanýmlanabilir. 
	//otomatik ömürlü deðiþkenler için (legal ama yanlýþ)
	//C++ dilinde gecersiz


	


	
	
	

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"

int func(void);

int main()
{
	//dikkat! aþaðýdaki x deðiþkenine bir sabit ifadesi (constant expression) ile 
	//ilk deger veriliyor
	//C'de sabit ifadesi ile ilk deðerini almýþ deðiþkenler sabit
	//ifadesi gereken yerde kullanýlamzlar
	//orneðin dizi boyutu ifadesi yapýlamazlar
	//C++'ta legal
	const int x = 20;
	int a[x] = { 0 }; //gecersiz


	
	
	

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



14:45'te devam edeceðiz

derleyicilerin tipik uyarý mesajlarý

açýklama satýrlarý - yorum satýrlarý

comment lines




/* satirin tamami aciklama  */
int x = 10;  /* once kod sonra aciklama */
/* once aciklama sonra kod */ int y = 20;
int t1 = 45; /* once kod sonra aciklama sonra kod */ int t2 = 56;


/*
	aciklama satiri 1
	aciklama satiri 2
	aciklama satiri 3
	aciklama satiri 4
*/



/*
#include <stdio.h>

#define			SIZE		100

*/





int x = 10;  //once kod sonra aciklama

//aciklama aciklama
//aciklama devam ediyor


kodun ne anlama geldiðinin
nelere dikkat edilmesi gerektiðinin
kodun ne yaptýðýnýn
kodun bu iþi nasýl yaptýðýnýn açýklanmasý

en iyi açýklama hiç yapýlmayandýr


self-eplanatory

int xyzt = 10; //

if (x % 2 == 0) //eger x cift ise

comment-out

commit etmiþ

//x = y++
// func(x, y);


nested comment lines

//
raw loop


derleyicilerin uyarý mesajlarý

warning messages (diagnostics)

#include <stdio.h>

int func(int x)
{
	if (x % 2 == 0) {
		printf("aliveli");
		return 1;
	}
    else if (x % 5 == 0)
        return 7;
    else if (x % 13 == 0)
        return 12;
    
    ///....
}

int main()
{

}



[[nodiscard]] int func(int x)
{
	return x * x;
}

//warning C4834 : discarding return value of function with 'nodiscard' attribute
int main()
{
	func(12);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

14   -24   13   -15   21   -23   -38   1   -14   -29   30   -33   13   -17   -19   9   -16   17   21   -24

max. subsequence problem


//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


//asagidaki dizinin max-subsequence deðerini hesaplayýnýz
//Bunu O(n) karmaþýklýðýndaki bir algoritma ile hesaplamaya çalýþýn.

int a[] = {
	-125, -759, 144, 671, 537, -612, -691, -272, 419, 436,
-755, -147, 286, -387, -109, -655, 290, -376, -844, 156,
-346, -919, 35, 26, 741, 306, 597, -907, 686, -708,
765, 372, 885, -933, 446, -608, 740, -729, -661, 572,
-114, -264, -706, -564, 499, 391, -938, 804, -429, 246,
-56, 736, -613, 473, 71, 797, 768, 551, 785, -374,
715, 909, 652, -768, 868, 212, 512, 342, 518, 663,
-114, -214, 824, 950, 812, 521, 679, -45, 202, 543,
728, 270, -855, 761, -127, 819, 534, 333, -987, 557,
-193, 118, 622, -592, -157, -569, -658, -404, 164, -417, };

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


16:17'de devam

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>


#define			SIZE		1000


int main()
{
	int a[SIZE];
	int b[SIZE];
	int c[SIZE];

	////
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);  //987761
	///  a[123] +b[467] + c[981] = 987761

	//algoritmanýn karmaþýklýðý nedir



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

pointers 

adres

ifade
--------------------------------------

T x;

eðer bir ifade x'in adresi anlamýna geliyor ise

T *

char    char *
int     int *
double   double *

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	//pointer to int (int *)
	//ptr int türden bir deðiþkenin (nesnenin) adresini tutmak için oluþturulmuþ bir deðiþken;

	int *p1;
	int *p2;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	//pointer to int (int *)
	//ptr int türden bir deðiþkenin (nesnenin) adresini tutmak için oluþturulmuþ bir deðiþken;

	int *p1, p2;
	int *p1;
	int p2;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	//pointer to int (int *)
	//ptr int türden bir deðiþkenin (nesnenin) adresini tutmak için oluþturulmuþ bir deðiþken;

	int *p1, *p2;
	//int *p1;
	//int *p2;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x, a[10], b[20];
	//int x;
	//int a[10];
	//int b[10];

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	//int x, *p, a[5];
	int x;
	int *p;
	int a[5];

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;
	int *ptr = &x;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int *gp;

void func(int *param)
{
	int *p;
	static int *sp;
}

int main()
{
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	printf("sizeof(char)           = %zu\n", sizeof(char));
	printf("sizeof(char*)          = %zu\n", sizeof(char*));
	printf("sizeof(short)          = %zu\n", sizeof(short));
	printf("sizeof(short*)         = %zu\n", sizeof(short*));
	printf("sizeof(int)            = %zu\n", sizeof(int));
	printf("sizeof(int*)           = %zu\n", sizeof(int*));
	printf("sizeof(double)         = %zu\n", sizeof(double));
	printf("sizeof(double*)        = %zu\n", sizeof(double*));


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

pointer ops.

--------------------------
1                []   ->
-----------------------
2        &   *
-----------------------

&    address of  (adres operatörü)

*    [indirection op / dereferencing] (içerik operatörü)

[]   index - subscript op  (indeks - köþeli parantez)

->   member selection op (arrow op)  (ok operatörü)


adres operatörü

unary prefix
operandý nesne gösteren ifade olmak zorunda  L value expression


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>



int main()
{
	int x = 10;

	&5; //gecersiz adres operatörünün operandý L val. expr. deðil
	&(x - 3); //gecersiz adres operatörünün operandý L val. expr. deðil



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

adres operatörünün ürettiðið deðer operandý olan nesnenin adresi

&x


int main()
{
	int x = 10;
	int *ptr;

	//&x  ifadesinin türü (data type) int *
	//&x  ifadesinin val. category'si R value expr
	//ptr ifadesinin türü int * value cat. L value expr
}

T x;

&x  

T *




int main()
{
	//int *p1, p2;
	int *p1;
	int p2;

	int *ptr1, *ptr2, *ptr3;
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



int main()
{
	int x, *p, a[5];
	//int x;
	//int *p;
	//int a[5];


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	printf("sizeof(char)           = %zu\n", sizeof(char));
	printf("sizeof(char*)          = %zu\n", sizeof(char*));
	printf("sizeof(short)          = %zu\n", sizeof(short));
	printf("sizeof(short*)         = %zu\n", sizeof(short*));
	printf("sizeof(int)            = %zu\n", sizeof(int));
	printf("sizeof(int*)           = %zu\n", sizeof(int*));
	printf("sizeof(double)         = %zu\n", sizeof(double));
	printf("sizeof(double*)        = %zu\n", sizeof(double*));


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

[]  index (subscript) (indeks - köþeli parantez)
->  member selection op (arrow op)
--------------------------------------
&  address of (adres operatörü)
* (dereferencing - indirection) (içerik operatörü)
--------------------------------------

adres operatörü

2. öncelik seviyesinde
unary prefix (tek operand alan öne ek konumunda operator)
operandý L val expr olmak zorunda

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;
	double dval;

	//&x   ifadesinin türü int *
	//&dval   ifadesinin  türü double *



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

C'de adres operatörü ile oluþturulmuþ bir ifade "R value exp" deðer kategorisindedir.

Örneðin &x ifadesi atama operatörünün sol operandý olamaz
Örneðin &x ifadesi ++ operatörünün operandý olamaz

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;

	// &x =   gecersiz



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;
	int *ptr = &x;

	//ptr deðiþkenine x deðiþkeninin adresi ile ilk deger veriliyor



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10, *ptr = &x;

	//ptr deðiþkenine x deðiþkeninin adresi ile ilk deger veriliyor

	int y;

	ptr = &y;
	//burada da ptr deðiskenine y nesnesinin adresi ataniyor

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//warning C4047 : 'initializing' : 'int *' differs in levels of indirection from 'int'

int main()
{
	int *ptr = 3400; 

	//C'de int türünden int * türüne otomatik dönüþüm var. Yukaridaki kod C'de gecerli ama yanlis
	//C derleyicilerinin hemen hepsi lojik uyari mesaji verir
	//C++'da sentaks hatasi


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

warning C4047: 'initializing': 'int *' differs in levels of indirection from 'int'

Asla bir pointer deðiþkene adres olmayan bir veri ile ilk deðer vermeyin
Asla bir pointer deðiþkene adres olmayan bir veriyi atamayýn
C'de bunlarýn legal olmasý doðru olduðu anlamýna gelmiyor!!!!
Zaten C derleyicileri (tipik olarak) lojik uyarý mesajý verirler
C++'da bu durumlar sentaks hatasý


Asla bir pointer deðiþkene farklý türden bir adres ile ilk deðer vermeyin
Asla bir pointer deðiþkene farklý türden bir adres atamayým
C'de bunlarýn legal olmasý doðru olduðu anlamýna gelmiyor!!!!
Zaten C derleyicileri (tipik olarak) lojik uyarý mesajý verirler
C++'da bu durumlar sentaks hatasý

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//warning C4133 : 'initializing' : incompatible types - from 'double *' to 'int *'

int main()
{
	double dval = 4.5;
	int *ptr = &dval; //yanlis C++'da gecersiz


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



&  * []   ->

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int *ptr;  //Buradaki yildiz atomu bir declarator
	int x = 10;

	//*ptr = &x;  //buradaki * ise bir operatör




}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10;

	printf("&x = %p\n", &x);
	printf("&x = %d\n", (int)(&x));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10;
	int *ptr = &x;

	//ptr'nin degeri x'in adresi
	//ptr x'i gösteriyor
	//ptr x'e iþaret ediyor
	//ptr points to x


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10;
	int *ptr = &x;

	printf("&x  = %p\n", &x);
	printf("ptr = %p\n", ptr);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10;
	int *ptr = &x;

	printf("&x   = %p\n", &x);  //x'in adresi
	printf("ptr  = %p\n", ptr); //ptr'nin degeri olan adres yani x'in adresi
	printf("&ptr = %p\n", &ptr); //ptr'nin kendi adresi (ptr nerede sorusunun cevabý)

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10;
	int y = 20;
	int *p = &x;
	int *q = &y;

	p = q;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

array decay
array to pointer conversion

C dilinde bir dizi ismi bir ifade içinde kullanýldýðýnda (bir istisna hariç)
her zaman dizinin ik öðesinin adresine dönüþtürülür.

a bir dizi ismi olmak üzere C'de

&a[0]

yazmak ile doðrudan

a

yazmak arasýnda bir fark yok!!!!!

puts(str);

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[10] = {0};
	int *ptr = a;

	printf("a         = %p\n", a);
	printf("&a[0]     = %p\n", &a[0]);
	printf("ptr       = %p\n", ptr);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[10] = {0};
	int b[10] = {0};
	int x = 10;

	//&x =
	//&a[0] = 
	a = b;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	//int x = 10, *p1 = &x, a[] = { 2, 4, 5 }, *p2 = a, *p3 = p1;
	int x = 10;
	int *p1 = &x;
	int a[] = { 2, 4, 5 };
	int *p2 = a;
	int *p3 = p1;
	///...


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[10] = { 0 };

	printf("%zu\n", sizeof(&a[0]));
	printf("%zu\n", sizeof(a));



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

ptr = a;
int *ptr = a[0];

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	char str[] = "mustafa";

	puts(str);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

dereferencing operator
indirection operator
içerik operatörü


a & b  bitwise and
&x     address of

x * y  multiplication op
*ptr   dereferencing



---------------------------------
2     *   &          saðdan sola
---------------------------------

int *ptr;


*operand

içerik operatörünün operandý bir adres ifadesi olmak zorunda

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 20;

	
	// *x   gecerli degil cunku * operatörünün operandý adres olmak zorunda
	//*4500  gecerli degil cunku * operatörünün operandý adres olmak zorunda



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

*ptr
*&x
*a


içerik operatörü ile oluþturulan bir ifade bir L val expr.
içerik operatörü operandý olan adresteki nesneye eriþimi saðlar


*adres

bu adresteki nesne

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 20;
	
	printf("x = %d\n", x);
	*&x = 99;
	printf("x = %d\n", x);
	++*&x;
	printf("x = %d\n", x);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 20;
	
	++*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&*&x;

	printf("x = %d\n", x);



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[5] = { 10, 45, 67, 90, 2 };

	printf("a[0] = %d\n", a[0]);

	*a = 999;

	printf("a[0] = %d\n", a[0]);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



a[0]
*a


ptr bir pointer (gösterici) deðiþken olmak üzere

*ptr

ifadesi

ptr'nin gösterdiði nesnedir

14:45'de devam edecegiz

pointer
pointee

addressee
payee
referee

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10;
	int y = 40;
	int z = 60;
	int *ptr;

	ptr = &x;
	*ptr = 1000;
	ptr = &y;
	*ptr = 1000;
	ptr = &z;
	*ptr = 1000;

	printf("x = %d\n", x);
	printf("y = %d\n", y);
	printf("z = %d\n", z);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10, y = 34, *p1 = &x, *p2 = &y;


	*p1 = *p2;

	printf("x = %d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[] = { 1, 2, 3 };
	int b[] = { -1, -2, -3 };

	*a = *b;

	printf("a[0] = %d\n", a[0]);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10, *p1 = &x, *p2 = p1, *p3 = p1;

	++*p1;
	++*p2;
	++*p3;

	printf("x = %d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

pointer'lar ne iþe yarýyor?

fonksiyonlarýn parametre deðiþkenlerinin pointer olmasý

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void func(int *p)
{
	//p'nin degeri x'in adresi
	*p = 999;
	//...
}

int main()
{
	int x = 10;

	func(&x);

	printf("x = %d\n", x);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

void Swap(int a, int b)
{
	int temp = a;
	a = b;
	b = temp;
}

int main()
{
	int x = 10;
	int y = 45;

	printf("x = %d  y = %d\n", x, y);

	Swap(x, y);
	/*int temp = x;
	x = y;
	y = temp;*/

	printf("x = %d  y = %d\n", x, y);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

int main()
{
	int a[] = { 2, 4, 6 };
	int b[] = { 10, 30, 67 };

	swap(a, b);

	printf("a[0] = %d\n", a[0]);
	printf("b[0] = %d\n", b[0]);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

int main()
{
	int x = 45, y = 98;
	int *p = &x, *q = &y;

	printf("x = %d  y = %d\n", x, y);

	swap(p, q);

	printf("x = %d  y = %d\n", x, y);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

neden call by reference?

1. çaðrýlan fonksiyonun çaðýran fonksiyona deðer aktarýmýný gerçekleþtirmek

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


int sum_square(int a, int b)
{
	return a * a + b * b;
}


int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);

	int z = sum_square(x, y);

	printf("z = %d\n", z);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


void sum_square(int a, int b, int *ptr)
{
	*ptr = a * a + b * b;
}


int main()
{
	int x, y;
	printf("iki tamsayi girin: ");
	scanf("%d%d", &x, &y);
	int z;

	sum_square(x, y, &z);

	printf("z = %d\n", z);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


double get_circle_area(double radius)
{
	return 3.1415926 * radius * radius;
}

int main()
{
	double r;
	double area;

	printf("dairenin yaricapini girin: ");
	scanf("%lf", &r);

	area = get_circle_area(r);

	printf("alan = %f\n", area);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


void get_circle_area(double radius, double *parea)
{
	*parea = 3.1414926 * radius * radius;
}


int main()
{
	double r;
	double area;

	printf("dairenin yaricapini girin: ");
	scanf("%lf", &r);

	get_circle_area(r, &area);

	printf("alan = %f\n", area);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


double get_circle_area(double radius)
{
	return 3.1415926 * radius * radius;
}


int main()
{
	double r;

	printf("dairenin yaricapini girin: ");
	scanf("%lf", &r);

	if (get_circle_area(r) > 100.) {
		///
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

maliyet!!!!!!


area = get_circle_area(r);


double gn = 3.1415926 * radius * radius;
area = gn;


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


typedef struct {
	int a[20][20];
	int row;
	int col;
}Matrix;


Matrix add_matrix(Matrix m1, Matrix m2)
{
	Matrix m3;
	///

	return m3;
}

int main()
{
	printf("sizeof(Matrix) = %zu\n", sizeof(Matrix));
	Matrix x, y, result;
	///

	result = add_matrix(x, y);
	


}

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


typedef struct {
	int a[20][20];
	int row;
	int col;
}Matrix;


void add_matrix(Matrix m1, Matrix m2, Matrix *p)
{


}

int main()
{
	printf("sizeof(Matrix) = %zu\n", sizeof(Matrix));
	Matrix x, y, result;
	///

	add_matrix(x, y, &result);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


typedef struct {
	int a[20][20];
	int row;
	int col;
}Matrix;


void add_matrix(const Matrix *p1, const Matrix *p2, Matrix *presult)
{
	

}

int main()
{
	printf("sizeof(Matrix) = %zu\n", sizeof(Matrix));
	Matrix x, y, result;
	///

	add_matrix(&x, &y, &result);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"


typedef struct {
	int a[20][20];
	int row;
	int col;
}Matrix;


void add_matrix(const Matrix *p1, const Matrix *p2, Matrix *presult)
{
	

}

int main()
{
	printf("sizeof(Matrix) = %zu\n", sizeof(Matrix));
	Matrix x, y, result;
	///

	add_matrix(&x, &y, &result);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



T bir tür olmak üzere

//set function
//setter
//mutator

void func(T *ptr) //output parameter
{
*ptr =
}

//accessor
//getter
//get functions

void foo(const T *ptr)
{
	*ptr = 
}



const semantiði


void add_matrix(const Matrix *p1, const Matrix *p2, Matrix *p3);

void print_matrix(const Matrix *p);  //input parameter

void 

16:12'de devam edeceðiz

diziler (arrays)


const anahtar sözcüðü ve pointer deðiþkenler


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10;
	int y = 56;
	int * const ptr = &x;

	// const pointer
	// const pointer to int
	// top level const

	//ptr = &y; //gecersiz

	*ptr = 876; //gecerli

	printf("x = %d\n", x);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10;
	int y = 56;
	//int const *  ptr = &x;
	const int *ptr = &x;
	//pointer to const int
	//low level const

	//*ptr = 999; //gcersiz

	ptr = &y;  //gcerli
	
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10;
	int y = 56;

	const int * const ptr = &x;

	//ptr = &y; //gecersiz
	//*ptr = 245; //gecersiz


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



10 + 20

int ival = 20;

ival + 5


[]

pointer aritmetiði
--------------------------------------

ptr + n
n + ptr
ptr - n

	n - ptr

C dilinde 
	bir adres ile bir tam sayý toplanabilir.
	bir tamsayý ile bir adres toplanabilir.
	bir adresten bir tam sayý çýkartýlabilir.
	(Bir tam sayidan bir adresin çýkartýlmasý gecersizdir.)

Bu iþlemler legal ve doðru iþlemlerdir.

Bu iþlemlerden elde edilen deðer adrestir.

Bir adrese 1 topladýðýmýzda bir sonraki ayný türden nesnenin adresini elde ediyoruz

Bir dizinin bir elemanýnýn adresine 1 toplarsanýz dizinin 1 sonraki elemanýnýn adresini elde edersiniz
Bir dizinin bir elemanýnýn adresinden 1 çýkartýrsanýz dizinin 1 önceki elemanýnýn adresini elde edersiniz
Bu durum dizinin türünden baðýmsýz olarak her zaman doðrudur


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	char a[10] = { 0 };

	for (int i = 0; i < 10; ++i) {
		printf("%p\n", a + i);
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	char a[10] = { 0 };

	for (int i = 0; i < 10; ++i) {
		printf("%p\n", a + i);
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


++ptr;

--ptr;


a bir dizi olsun 

a dizisinin idx indisli öðesinin adresi

&a[idx]

ifadesi olarak yazýlabilir. Ancak

a + idx

ifadesi de ayný anlama geliyor


&a[idx]   a + idx

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	int a[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	int *ptr = a;

	for (int i = 0; i < 10; ++i) {
		printf("%p  %p  %p\n", &a[i], a + i, i + a);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	short a[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	short *ptr = a;

	for (int i = 0; i < 10; ++i) {
		printf("%p  %p  %p\n", &a[i], a + i, i + a);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	int a[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	int *ptr = a;

	for (int i = 0; i < 10; ++i) {
		printf("%d %d %d %d\n", *(a + i), *(i + a), a[i], *ptr);
		++ptr;
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	int a[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	int *ptr = a + 5;

	//3 - ptr; //gecersiz
	//ptr - 3

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

index / subscript

----------------------------------------------
1   () []  .  ->   soldan saða
----------------------------------------------

x[y]     *(x + y)

a[5]     *(a + 5)
5[a]      *(5 + a)

ptr[2]    *(ptr + 2)

ptr[-3]   *(ptr - 3)


--------------------------------------

a[idx]     *(a + idx)
&a[idx]     a + idx

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	int a[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	int *ptr = a;

	for (int i = 0; i < 10; ++i) {
		printf("%d  %d  %d  %d  %d  %d\n", a[i], i[a], *(a + i), *(i + a), ptr[i], i[ptr]);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	int x = 10;

	++(&x)[0];

	printf("x = %d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

ptr[0]   *ptr
a[0]     *a


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	int a[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	int *ptr = a + 5;

	printf("%d\n", *ptr);
	printf("%d\n", ptr[0]);
	printf("%d\n", ptr[3]);
	printf("%d\n", ptr[-3]);
	printf("%d\n", *(ptr - 3));
	//printf("%d\n", *(ptr + 3));


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	int a[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	int *ptr = a;

	printf("%d\n", *ptr);
	printf("%d\n", ptr[0]);
	printf("%d\n", ptr[3]);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


C dilinde 
	bir adres ile bir tam sayý toplanabilir.
	bir tamsayý ile bir adres toplanabilir.
	bir adresten bir tam sayý çýkartýlabilir.
	(Bir tam sayidan bir adresin çýkartýlmasý gecersizdir.)

Bu iþlemler legal ve doðru iþlemlerdir.

Bu iþlemlerden elde edilen deðer adrestir.

Bir adrese 1 topladýðýmýzda bir sonraki ayný türden nesnenin adresini elde ediyoruz

Bir dizinin bir elemanýnýn adresine 1 toplarsanýz dizinin 1 sonraki elemanýnýn adresini elde edersiniz
Bir dizinin bir elemanýnýn adresinden 1 çýkartýrsanýz dizinin 1 önceki elemanýnýn adresini elde edersiniz
Bu durum dizinin türünden baðýmsýz olarak her zaman doðrudur

C ve C++ dillerinde iki adresin toplanmasý geçersizdir

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	int a[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	int *p1 = a + 5;
	int *p2 = a + 2;


	//p1 + p2; //gecersiz


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

valid pointers / invalid pointers
geçerli ve geçersiz göstericiler.

ya geçerli ya da geçersiz

geçerli bir pointer bazý iþlemlerde kullanýlabilir bir pointer demek
				    ===============

gerçersiz bir pointer hiç bir ifadede kullanmamamýz gereken bir pointer
ona geçerli bir adres atamak dýþýnda


(Hayatý devam etmekte olan) bir nesnenin adresini tutan pointer deðiþkenler
Bir dizinin bittiði yerin adresini tutan pointer
Deðeri NULL pointer olan pointer

int *ptr = a - 3;

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	int a[5] = { 34, 21, 12, 9, 3 };
	//int *ptr = a + 5;
	int *ptr = &a[5];

	//printf("%d\n", *ptr);  //ub
	//printf("%d\n", a[5]);  //ub
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	int x = 10;
	int *ptr = &x;

	++ptr; 
	//ptr gecerli bir pointer
	++ptr;
	//ptr gecersiz bir pointer







}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	int x = 10;
	int *ptr = &x;

	--ptr;  //uýb
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

dangling pointer is also an invalid pointer
dinamik bellek yönetimi

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	int *ptr; 
	//ptr gecersiz bir pointer invalid pointer

	if (1) {
		int x = 10;
		ptr = &x;
		//ptr gecerli bir pointer
	}

	//bu noktada ptr gecersiz bir pointer (dangling pointer)


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

(x + 5) - (x + 2)

x + 5 - x - 2
3


&a[5]  -  &a[2]


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	int a[10] = { 0 };
	int *p1 = a + 3;
	int *p2 = a + 7;
	int *pend = a + 10;

	printf("p1 - p2  = %d\n", p1 - p2);
	printf("p2 - p1  = %d\n", p2 - p1);
	printf("pend - a = %d\n", pend - a);;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	int x = 20;
	int y = 45;

	&x - &y //islemi legal code ancak anlamsiz
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

ptr bir pointer deðiþken ve a dizisinin geçerli bir elemanýný gösteriyor.
ptr'nin gösterdiði dizi elemanýnýn indeksi nedir?

ptr - a

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


int main()
{
	int a[10] = { 0 };
	int *ptr = a + 5;

	printf("%d\n", ptr - a);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

 dizilerin fonksiyonlara gönderilmesi

 14:41'de devam edeceðiz

 #define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


#define			SIZE		100


void set_random_array(int *ptr, int size)
{
	while (size--) {
		*ptr = rand() % 1000;
		++ptr;
	}
}


//void set_random_array(int *ptr, int size)
//{
//	for (int i = 0; i < size; ++i) {
//		ptr[i] = rand() % 1000;
//	}
//}

int main()
{
	int a[SIZE];

	set_random_array(a, SIZE);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

void display_array(const int *ptr, int size)
{
	for (int i = 0; i < size; ++i) {
		if (i && i % 20 == 0)
			printf("\n");
		printf("%3d ", ptr[i]);
	}
	printf("\n-------------------------------------------------------------------------------\n");
}

void set_random_array(int *ptr, int size)
{
	while (size--) {
		*ptr = rand() % 1000;
		++ptr;
	}
}


//void set_random_array(int *ptr, int size)
//{
//	for (int i = 0; i < size; ++i) {
//		ptr[i] = rand() % 1000;
//	}
//}


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>


#define			SIZE		100

//warning C4028: formal parameter 1 different from declaration
void func(int x);
void func(double x);

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"


#define			SIZE		20

int main()
{
	int a[SIZE];

	set_random_array(a, SIZE);
	display_array(a, SIZE);
	display_array(a, 5);
	display_array(a + 5, 3);
	display_array(a + SIZE - 5, 5);

}

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"


#define			SIZE		20

int main()
{
	int a[SIZE];
	int *p1 = a + 2;
	int *p2 = a + 7;

	set_random_array(a, SIZE);
	display_array(a, SIZE);
	display_array(p1, p2 - p1 + 1);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"


#define			SIZE		100


//elemanlarý int türen olan bir dizinin öðelerinin kümülatif toplamýný hesaplayan bir fonk yazýnýz

int sum_array(const int *ptr, int size)
{
	int sum = 0;

	for (int i = 0; i < size; ++i) {
		sum += ptr[i];
	}

	return sum;
}


int main()
{
	int a[SIZE];

	randomize();

	set_random_array(a, SIZE);
	display_array(a, SIZE);
	printf("dizi toplami = %d\n", sum_array(a, SIZE));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"


#define			SIZE		100


//elemanlarý int türen olan bir dizinin öðelerinin kümülatif toplamýný hesaplayan bir fonk yazýnýz

int sum_array(const int *ptr, int size)
{
	int sum = 0;

	while (size--) {
		sum += *ptr;
		++ptr;
	}

	return sum;
}


//int sum_array(const int *ptr, int size)
//{
//	int sum = 0;
//
//	for (int i = 0; i < size; ++i) {
//		sum += ptr[i];
//	}
//
//	return sum;
//}


int main()
{
	int a[SIZE];

	randomize();

	set_random_array(a, SIZE);
	display_array(a, SIZE);
	printf("dizi toplami = %d\n", sum_array(a, SIZE));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <math.h>


#define			SIZE		100


//elemanlarý int türen olan bir dizinin öðelerinin kümülatif toplamýný hesaplayan bir fonk yazýnýz

int sum_array(const int *ptr, int size)
{
	int sum = 0;

	while (size--) {
		sum += *ptr;
		++ptr;
	}

	return sum;
}

double get_mean(const int *ptr, int size)
{
	return (double)sum_array(ptr, size) / size;
}

double get_std_dev(const int *ptr, int size)
{
	double mean = get_mean(ptr, size);
	double sum_square = 0.;

	for (int i = 0; i < size; ++i) {
		sum_square += (ptr[i] - mean) * (ptr[i] - mean);
	}

	return sqrt(sum_square / size);
}

int main()
{
	int a[SIZE];

	randomize();

	set_random_array(a, SIZE);
	display_array(a, SIZE);
	//printf("dizi toplami = %d\n", sum_array(a, SIZE));
	//printf("dizi ortalamasi = %f\n", get_mean(a, SIZE));
	printf("dizi std. sapmasi = %f\n", get_std_dev(a, SIZE));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <math.h>


#define			SIZE		20

int get_array_min(const int *p, int size)
{
	int min = *p;
	//int min = p[0]
	for (int i = 1; i < size; ++i) {
		if (p[i] < min)
			min = p[i];
	}

	return min;
}


int get_array_max(const int *p, int size)
{
	int max = *p;
	//int max = p[0]
	for (int i = 1; i < size; ++i) {
		if (p[i] > max)
			max = p[i];
	}

	return max;
}


int main()
{
	int a[SIZE];

	randomize();

	set_random_array(a, SIZE);
	display_array(a, SIZE);
	printf("max = %d\n", get_array_max(a, SIZE));
	printf("min = %d\n", get_array_min(a, SIZE));
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <math.h>


#define			SIZE		20

void get_min_max(const int *pa, int size, int *pmin, int *pmax)
{
	*pmin = *pmax = *pa;
	//*pmin = *pmax = pa[0];
	for (int i = 1; i < size; ++i) {
		if (pa[i] > *pmax)
			*pmax = pa[i];
		else if (pa[i] < *pmin)
			*pmin = pa[i];
	}
}

int main()
{
	int a[SIZE];
	int min, max;

	randomize();

	set_random_array(a, SIZE);
	display_array(a, SIZE);
	get_min_max(a, SIZE, &min, &max);

	printf("min = %d\n", min);
	printf("max = %d\n", max);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <math.h>


#define			SIZE		100

void bsort(int *p, int size)
{
	for (int i = 0; i < size - 1; ++i) {
		for (int k = 0; k < size - 1 - i; ++k) {
			if (p[k] > p[k + 1]) {
				int temp = p[k];
				p[k] = p[k + 1];
				p[k + 1] = temp;
			}
		}
	}
}


int main()
{
	int a[SIZE];

	randomize();

	set_random_array(a, SIZE);
	display_array(a, SIZE);
	bsort(a, SIZE);
	display_array(a, SIZE);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <math.h>


#define			SIZE		100

void bsort(int *p, int size)
{
	for (int i = 0; i < size - 1; ++i) {
		for (int k = 0; k < size - 1 - i; ++k) {
			if (p[k] > p[k + 1]) {
				//swap(&p[k], &p[k + 1]);
				swap(p + k, p + k + 1);
			}
		}
	}
}


int main()
{
	int a[SIZE];
	randomize();

	set_random_array(a, SIZE);
	display_array(a, SIZE);
	bsort(a, SIZE);
	display_array(a, SIZE);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <math.h>


#define			SIZE		100

void copy_array(int *pdest, const int *psource, int n)
{
	while (n--) {
		*pdest = *psource;
		++pdest;
		++psource;
	}
}

int main()
{
	int a[SIZE];
	int b[SIZE];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);

	copy_array(b, a, SIZE);

	display_array(b, SIZE);



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <math.h>


#define			SIZE		100

void copy_array(int *pdest, const int *psource, int n)
{
	while (n--) {
		*pdest = *psource;
		++pdest;
		++psource;
	}
}

int main()
{
	int a[SIZE];
	int b[SIZE] = { 0 };

	int idxa, idxb, n;

	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	printf("a dizisinde index: ");
	scanf("%d", &idxa);
	printf("b dizisinde index: ");
	scanf("%d", &idxb);
	printf("kac oge kopyalanacak: ");
	scanf("%d", &n);
	copy_array(b + idxb, a + idxa, n);
	display_array(b, SIZE);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <math.h>


#define			SIZE		20


void reverse_array(int *p, int size)
{
	int n = size / 2;
	int *pe = p + size;

	while (n--) {
		swap(p++, --pe);
	}

}

//void reverse_array(int *p, int size)
//{
//	for (int i = 0; i < size / 2; ++i) {
//		swap(p + i, p + size - 1 - i);
//	}
//}


int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	reverse_array(a, SIZE);
	display_array(a, SIZE);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

16.10'da devam edeceðiz



(p[i]  - ave) * (p[i] - ave)

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <math.h>


#define			SIZE		20


void func(int *p);
void func(int p[]); //redeclaration


int main()
{

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>

void func(int *ptr)
{
	printf("sizeof(ptr) = %zu\n", sizeof(ptr));
}

void foo(int ptr[])
{
	printf("sizeof(ptr) = %zu\n", sizeof(ptr));
}


int main()
{
	int a[1000] = { 0 };

	func(a);
	foo(a);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>

void func(int *ptr)
{
	printf("sizeof(ptr) = %zu\n", sizeof(ptr));
}

void foo(int ptr[10000])
{
	printf("sizeof(ptr) = %zu\n", sizeof(ptr));
}


int main()
{
	int a[1000] = { 0 };

	func(a);
	foo(a);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

pointerlar ve karþýlaþtýrma iþlemleri
adresler ve karþýlaþtýrma iþlemleri

C'de 2 adres karþýlaþtýrma operatörleri ile karþýlaþtýrýlabilir

== !=

	p1 == p2

1) 2 pointer'da ayný nesnenin adresi ise

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 10;
	int y = 20;
	int *p1 = &x;
	int *p2 = &y;

	if (p1 == p2)
		printf("evet esit\n");
	else
		printf("hayir esit degil\n");

	p2 = &x;

	if (p1 == p2)
		printf("evet esit\n");
	else
		printf("hayir esit degil\n");


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		20

//range
void display_array_r(const int *ps, const int *pe)
{
	while (ps != pe) {
		printf("%3d ", *ps);
		++ps;
	}
	pline();
}


int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	display_array_r(a, a + SIZE);

	printf("\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



p1 < p2

&x < &y


a + 5  <   a + 9

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		20

//range
void display_array_r(const int *ps, const int *pe)
{
	while (ps != pe) {
		printf("%3d ", *ps);
		++ps;
	}
	pline();
}


int main()
{
	int a[SIZE] = { 0 };

	int *p1 = a + 5;
	int *p2 = a + 13;

	printf("%d\n", p1 < p2);
	printf("%d\n", p1 > p2);




}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		20


void reverse_array(int *p, int size)
{
	int *pe = p + size;

	while (p < pe) {
		swap(p++, --pe);
	}
}

int main()
{



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		20


void reverse_copy(int *pdest, const int *psource, int n)
{
	const int *pe = psource + n;

	while (n--) 
		*pdest++ = *--pe;
}

int main()
{
	int a[10] = { 12, 34, 56, 3, 9, 1, 7, 8, 341, 987 };
	int b[10];

	display_array(a, 10);
	reverse_copy(b, a, 10);
	display_array(b, 10);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


*p1 == *p2
p1 == p2


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		20


int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	int *px, *pz;
	px = a + 5;
	pz = a + 9;
	//kod

	if (px < pz )
		display_array(px, pz - px + 1);
	else
		display_array(pz, px - pz + 1);



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

pointer idioms
NULL pointer ve kullaným senaryolarý
pointerlar ve yazý iþlemleri
string kütüphanesi


++ operatörü
-- operatörü
	operand L val. expr olmalý
	2. öncelik seviyesinde right associative
	++x  --y  x++ y-- ifadeleri R value expr
		(C++ dilinde ++x ve ++y ifadeleri L val. expression)
		(C++ dilinde x++ ve y++ ifadeleri R val. expression)


++x ifadesinin deðeri x + 1 
--x ifadesinin deðeri x - 1 
x++ ifadesinin deðeri x
x-- ifadesinin deðeri x
-----------------------------------------------------------------
& operatörü
	
	operand L val. expr olmalý
	2. öncelik seviyesinde right associative
	&x ifadesi R value expression
-----------------------------------------------------------------
* operatörü
	operand adres olmak zorunda (adres deðilse sentaks hatasý)
	*ptr ifadesi L value expression
	2. öncelik seviyesinde right associative
-----------------------------------------------------------------
[]  index / subscript

	operatör öncelik tablomuzun 1. öncelik seviyesinde (left associative)
	a[b]
	operandlarýndan biri adres diðeri tam sayý olmak zorunda
	L value expresson
	


#include <stdio.h>

int main()
{
	int x = 10;
	&x++;
}

#define _CRT_SECURE_NO_WARNINGS

int main()
{
	int x = 10;
	&x++; //gecersiz cunku & op.nun operandi olan x++ ifadesi L val exp. degil

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

int main()
{
	int x = 10;
	&++x; //gecersiz cunku & op.nun operandi olan ++x ifadesi L val exp. degil

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

int main()
{
	int x = 10;
	++&x;  //gecersiz cunku ++ operatörünün operandý olan &x ifadesi R val. expr.

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


&x++
&++x
++&x

#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"

int main()
{
	int a[5] = { 10, 20, 30, 40, 50 };
	display_array(a, 5);
	int *ptr = a;

	*ptr++ = 99;
	display_array(a, 5);
	*ptr = 77;
	display_array(a, 5);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

*ptr--

----------------------------------------

*ptr = 40;
ptr = ptr + 1;

*ptr++ = 40;



#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"


int sum_array_(const int *p, int size)
{
	int sum = 0;

	while (size--) {
		sum += *p;
		++p;
	}

	return sum;
}



int sum_array(const int *p, int size)
{
	int sum = 0;

	while (size--)
		sum += *p++;

	return sum;
}


int main()
{
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"


void copy_array(int *pdest, const int *psource, int n)
{
	while (n--) 
		*pdest++ = *psource++;
}

void copy_array_(int *pdest, const int *psource, int n)
{
	while (n--) {
		*pdest = *psource;
		++pdest;
		++psource;
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

int main()
{
	int a[5] = {10, 20, 30, 40, 50};

	*a++ = 999;
}


#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"


int main()
{
	int a[5] = { 10, 20, 30, 40, 50 };

	*a++ = 999; //gecersiz
	//*(&a[0])++ = 999;
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

*ptr++


#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"


int main()
{
	int a[5] = { 10, 20, 30, 40, 50 };
	int *ptr = a;

	display_array(a, 5);
	*++ptr = 999;
	display_array(a, 5);
	*ptr = 333;
	display_array(a, 5);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


ptr = ptr + 1;
*ptr = exp;

*++ptr = expr;

#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"

void reverse_copy(int *pdest, const int *psource, int n)
{
	psource += n;

	while (n--) 
		*pdest++ = *--psource;

}


//void reverse_copy(int *pdest, const int *psource, int n)
//{
//	psource += n;
//
//	while (n--) {
//		--psource;
//		*pdest = *psource;
//		++pdest;
//	}
//}


int main()
{
	int a[5] = { 10, 20, 30, 40, 50 };
	int b[5];

	reverse_copy(b, a, 5);

	display_array(a, 5);
	display_array(b, 5);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

++ptr;

ptr = a;
ptr += size;

#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"

void reverse_copy(int *pdest, const int *psource, int n)
{
	psource += n;

	while (n--) 
		*pdest++ = *--psource;

}


//void reverse_copy(int *pdest, const int *psource, int n)
//{
//	psource += n;
//
//	while (n--) {
//		--psource;
//		*pdest = *psource;
//		++pdest;
//	}
//}


int main()
{
	int a[5] = { 10, 20, 30, 40, 50 };
	int *p = a;

	display_array(a, 5);
	++*p;

	display_array(a, 5);

	printf("%d\n", *p);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"

void reverse_copy(int *pdest, const int *psource, int n)
{
	psource += n;

	while (n--) 
		*pdest++ = *--psource;

}


//void reverse_copy(int *pdest, const int *psource, int n)
//{
//	psource += n;
//
//	while (n--) {
//		--psource;
//		*pdest = *psource;
//		++pdest;
//	}
//}


int main()
{
	int a[5] = { 10, 20, 30, 40, 50 };

	display_array(a, 5);
	++*a;
	display_array(a, 5);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"

void reverse_copy(int *pdest, const int *psource, int n)
{
	psource += n;

	while (n--) 
		*pdest++ = *--psource;

}


//void reverse_copy(int *pdest, const int *psource, int n)
//{
//	psource += n;
//
//	while (n--) {
//		--psource;
//		*pdest = *psource;
//		++pdest;
//	}
//}


int main()
{
	int a[5] = { 10, 20, 30, 40, 50 };
	int *ptr = a;

	//a => &a[0]
	//++&a[0] //gecersiz cunku ++operatörünün operandý olan ifade R value expr.
	



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"

void reverse_copy(int *pdest, const int *psource, int n)
{
	psource += n;

	while (n--) 
		*pdest++ = *--psource;

}


//void reverse_copy(int *pdest, const int *psource, int n)
//{
//	psource += n;
//
//	while (n--) {
//		--psource;
//		*pdest = *psource;
//		++pdest;
//	}
//}


int main()
{
	int a[5] = { 10, 20, 30, 40, 50 };
	int *ptr = a;

	*++ptr
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



*ptr++
*++ptr
++*ptr

int n = 5;

ptr[++n] = 20;


typedef bildirimleri - 1
-------------------------

Bir türe bir eþ isim (type alias) vermek






typedef int Word;
typedef int Bool;
typedef int Myint;


int main()
{
	Word x; 	Bool flag; 	Myint y;
	int x, flag, y;
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


typedef int Word;
typedef Word Myint;

Word func(Word);

int main()
{
	Word x = 5;
	Word* ptr = &x;
	Word a[20];


}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


scope



typedef int Word;

void f1()
{
	Word a = 5;
}

void f2()
{
	Word b = 5;

}

void f3()
{
	Word c = 5;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------




void f1()
{
	typedef int Word;

	Word a = 5;
}

void f2()
{
	Word b = 5; //gecersiz

}

void f3()
{
	Word c = 5; //gecersiz

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

14:45'de devam edeceðiz

#include <stdio.h>
#include <time.h>



int main()
{
	size_t x = 10;
	ptrdiff_t y = 0;
	time_t timer;
	clock_t start;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

Necati, Bir türe eþ isim vermek istiyorum. Ancak bunu
nasýl yapacaðýmý bilemiyorum.

1. Hangi türe eþ isim vermek istiyorsanýz o türden bir deðiþken tanýmlayýn.
2. Tanýmlamanýn baþýna typedef anahtar sözcüðünü koyun.
3. Deðiþken ismini "tür eþ ismi" olarak deðiþtirin.

int * türüne eþ isim oluþturalým

int *ptr; //1
typedef int *ptr; //2
typedef int *Iptr; //3


int [10] türüne eþ isim vermek istiyorum

int a[10]; //1
typedef int a[10]; //2
typedef int INTA10[10]; //2

#include <stdio.h>
#include <time.h>

typedef int INTA10[10]; //2

int main()
{
	INTA10 a, b, c;
	//int a[10];
	//int b[10];
	//int c[10];

	for (int i = 0; i < 10; ++i) {
		a[i] = b[i] = c[i] = i;
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include <stdio.h>
#include <time.h>

//const int * türüne eþ isim

typedef const int *CIPTR;

int main()
{
	int x = 10;
	CIPTR ptr = &x;

	//*ptr = 455;  //gecersiz

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

C ve C++ dillerine neden typedef isimleri (type alias) kullanýlýyor.

1) kodun okunmasýný ve yazýlmasýný kolaylaþtýrmak.
	- Bir türü daha daraltýlmýþ baðlamda kullanmak

typedef double Dollar;
typedef double Euro;
typedef double Pound;

#include <stdio.h>
#include <time.h>


typedef int Bool;
typedef int CounterType;

int main()
{
	Bool flag;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

karmaþýk bildirimleri indirgemek

#include <stdio.h>
#include <time.h>


//int func(int);
//int func(int *ptr);

//int func(int* (*f)(int *));

int* (*func(int* (*f1)(int *), int* (*f2)(int *)))(int *);

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include <stdio.h>
#include <time.h>


typedef int *(*Fptr)(int *);


//int* (*func(int* (*f1)(int *), int* (*f2)(int *)))(int *);
Fptr func(Fptr, Fptr);

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>
#include <time.h>


typedef double DistanceType;

DistanceType get_distance(DistanceType);

int main()
{
	DistanceType dst[10];

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

standart kütüphane taþýnabilirlik saðlamak için
bir çok yerde typedef bildirimleri kullanýyor.


typedef unsigned long size_t;

size_t strlen(const char *p);


size_t
time_t
clock_t
ptrdiff_t
fpos_t
ldiv_t

------------------
size_t standart tür eþ ismi

sizeof operatörünün ürettiði deðerin türü

		unsigned int
		unsigned long
		unsigned long
size_t

stddef, stdio

size_t türü standart kütüphane tarafýndan nerelerde kullaniliyor?

1. Bazý fonksiyonlarýn geri dönüþ deðeri yazý uzunluðu 
	ve yazý uzunluðu türü olarak std. kütüphane size_t türünü kullanýr.

2. Bazý fonksiyonlarýn parametre deðiþkenleri zaten bir türün sizeof deðerini ister.
	Bu parametreler size_t türünden olur

3. Dizi boyutu
	std. kutuphanenin bazý fonksiyonlarýnýn parametre deðiþkenleri dizi boyutu ister
	size_t 

4. Tane - adet türü

ptrdiff_t  (pointer difference type)


int8_t
int16_t
int32_t
int64_t

uint8_t
uint16_t
uint32_t
uint64_t


#include <stdio.h>



int main()
{
	printf("sizeof(int) = %zu\n", sizeof(int));


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


adres döndüren fonksiyonlar
functions returning pointers
============================

int func(int);

int a = func(12);

func iþlevinin parametresinin türü int
	 geri dönüþ deðeri türü int

----------------------------------
int *func(int);

func iþlevinin parametresinin türü int
	 geri dönüþ deðeri türü int *

int *ptr = func(10);

T *foo(void);



int *foo(void);

int x = 10;
int a[20];
int *ptr = &x;
int *p = ptr;

p = a;
p = foo();

#include <stdio.h>

int g = 10;

int *func(void)
{
	//code
	return &g;
}

int main()
{
	int *ptr = func();
	int *p;

	p = func();



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>

int g = 10;

int *func(void)
{
	//code
	return &g;
}

int main()
{
	int *ptr = func();

	printf("g = %d\n", g);
	*ptr = 999;
	printf("g = %d\n", g);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>

int g = 10;

int *func(void)
{
	//code
	return &g;
}

int main()
{
	int *ptr = func();
	//....

	ptr = func();
	///
	*func() = 999;

	printf("g = %d\n", g);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>

int *func(void);
void foo(int *);

int main()
{
	foo(func());
	//func islevinin döndürdüðü adres ile foo iþlevine cagri yapýyoruz
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>

#define			SIZE		100

int *get_array_max(const int *p, size_t size);

int main()
{
	int a[SIZE];
	//...

	
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

Dikkat!!!
Dikkat!!!
Dikkat!!!
Dikkat!!!
Dikkat!!!

asla otomatik ömürlü bir nesnenin adresini döndürmeyin. (ub)


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int *get_value(void)
{
	int x;
	printf("bir tam sayi girin: ");
	scanf("%d", &x);

	return &x;
}

int main()
{
	int *p1, *p2, val;

	p1 = get_value(); //ub

	printf("alinan deger = %d\n", *p1);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"


char *get_name()
{
	char str[1000];
	///
	sgets(str);
	return str;  //yanlis
}

//returning address of local variable or temporary: str

int main()
{
	printf("bir isim girin ");
	char *ptr = get_name();
	printf("isminiz : (%s)\n", ptr); //ub
}
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"

char *get_sentence()
{
	static char str[1000];
	///
	sgets(str);
	return str;  //yanlis
}



int main()
{
	printf("bir cumle girin ");
	char *ptr = get_sentence();
	printf("isminiz : (%s)\n", ptr); 

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



1. statik ömürlü bir nesne adresi döndüren fonksiyonlar
	a) global deðiþkenlerin adreslerini döndüren fonksiyonlar
	b) static yerel deðiþkenlerin adreslerini döndüren fonksiyonlar
	c) string literalleri (statik ömürlü diziler)


2. Çaðýran koddan aldýklarý adresleri döndüren fonksiyonlar

3. Dinamik ömürlü nesne adresleri döndüren fonksiyonlar.

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		20

int* get_array_max(const int *ptr, size_t size)
{
	int *pmax = (int *)ptr;
	for (size_t i = 1; i < size; ++i) {
		if (ptr[i] > *pmax)
			pmax = (int *)(ptr + i);
	}

	return pmax;
}

int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	int *pmax = get_array_max(a, SIZE);

	printf("max index = %d\n", pmax - a);
	display_array(a, pmax - a + 1);
	display_array(pmax, SIZE - (pmax - a));
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		20

int* get_array_max(const int *ptr, size_t size)
{
	int *pmax = (int *)ptr;
	for (size_t i = 1; i < size; ++i) {
		if (ptr[i] > *pmax)
			pmax = (int *)(ptr + i);
	}

	return pmax;
}

int* get_array_min(const int *ptr, size_t size)
{
	int *pmin = (int *)ptr;
	for (size_t i = 1; i < size; ++i) {
		if (ptr[i] < *pmin)
			pmin = (int *)(ptr + i);
	}

	return pmin;
}

int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	int *pmax = get_array_max(a, SIZE);
	int *pmin = get_array_min(a, SIZE);

	printf("max = %d dizinin %d indisli ogesi\n", *pmax, pmax - a);
	printf("min = %d dizinin %d indisli ogesi\n", *pmin, pmin - a);

	swap(pmin, pmax);
	display_array(a, SIZE);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		20

int* get_array_max(const int *ptr, size_t size)
{
	int *pmax = (int *)ptr;
	for (size_t i = 1; i < size; ++i) {
		if (ptr[i] > *pmax)
			pmax = (int *)(ptr + i);
	}

	return pmax;
}

int* get_array_min(const int *ptr, size_t size)
{
	int *pmin = (int *)ptr;
	for (size_t i = 1; i < size; ++i) {
		if (ptr[i] < *pmin)
			pmin = (int *)(ptr + i);
	}

	return pmin;
}

int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	swap(get_array_max(a, SIZE), get_array_min(a, SIZE));

	display_array(a, SIZE);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

295  90 994 809 922 728  98 566 368 824
90  295 994 809 922 728  98 566 368 824
90  98  994 809 922 728 295 566 368 824
90  98  295 809 922 728 994 566 368 824
90  98  295 368 922 728 994 566 809 824
90  98  295 368 922 728 994 566 809 824
90  98  295 368 566 728 994 922 809 824
90  98  295 368 566 728 809 922 994 824
90  98  295 368 566 728 809 824 994 922
90  98  295 368 566 728 809 824 922 944


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100

int* get_array_max(const int *ptr, size_t size)
{
	int *pmax = (int *)ptr;
	for (size_t i = 1; i < size; ++i) {
		if (ptr[i] > *pmax)
			pmax = (int *)(ptr + i);
	}

	return pmax;
}

int* get_array_min(const int *ptr, size_t size)
{
	int *pmin = (int *)ptr;
	for (size_t i = 1; i < size; ++i) {
		if (ptr[i] < *pmin)
			pmin = (int *)(ptr + i);
	}

	return pmin;
}

void selection_sort(int *ptr, size_t size)
{
	for (size_t i = 0; i < size - 1; ++i) {
		swap(get_array_minx(ptr + i, size - i), ptr + i);
	}
}

int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	selection_sort(a, SIZE);
	display_array(a, SIZE);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

const cast (tür dönüþümleri)

T *
const T *

int *
const int *

Bir ifadenin türü T bir tür olmak üzere

T *
ya da
const T * (T const *)



int main()
{
	int x = 10;
	const int cx = 45;
	int *ptr = &x;
	const int *p = &x;
	int a[5] = {0};
	const int b[] = { 2, 7, 8, 2, 1 };
	//&x ifadesinin türü int *
	//&cx ifadesinin türü const int *
	//ptr ifadesinin türü int *
	//p ifadesinin türü const int *
	//a ifadesinin türü (dönüþümden sonra) int *
	//b ifadesinin türü (dönüþümden sonra) const int *
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


T * türünden const T * türüne dönüþüm yanlýþ deðil (doðru)
tür dönüþtürme operatörü kullanmadan bu dönüþümü yaptýrabilirsiniz.

const T* türünden T * türüne dönüþüm (istisnai durumlar haricinde) her zaman yanlýþ
fakat C'de bu dönüþüm sentaks hatasý deðil. (C++'da sentaks hatasý)
Ancak C derleyicileri bu otomatik dönüþüm için (tipik olarak) uyarý mesajý verirler

Eðer bilerek isteyerek (doðru þekilde) 
const T * 
türünden
T * türüne 
dönüþüm yaptýrmak isterseniz bu dönüþümü (implicit) deðil (explicit olarak) yani tür
dönüþtürme op. ile yapalýsýnýz.

Sahibinden koruma sözüyle adres alýp sahibine T * olarak geri vermek için kullanýlýyor tipik olarak


//pointer to const int
low level const
const int *ptr = &x;
*ptr = 
ptr[i] = 
ptr = &y;

const pointer to int
int *const ptr = &x
top level const

#include "nutility.h"


//const cast

int* get_array_max(const int *ptr, size_t size)
{
	int *pmax = (int *)ptr;
	for (size_t i = 1; i < size; ++i) {
		if (ptr[i] > *pmax)
			pmax = (int *)(ptr + i);
	}

	return pmax;
}



int main()
{


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include "nutility.h"


int main()
{
	const int x = 10;
	x = 67; //gecersiz

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include "nutility.h"


int main()
{
	const int x = 10;
	int *ptr = (int *)&x;

	*ptr = 999; //ub

	printf("x = %d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include "nutility.h"

#include <stdio.h>

int main()
{
	const int x = 10;
	int *ptr = (int *)&x;

	*ptr = 999; //ub

	printf("x = %d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#include "nutility.h"

#include <stdio.h>

//warning C4018 : '<' : signed / unsigned mismatch
void PrintArray(const int *p, size_t size)
{
	for (size_t i = 0; i < size; ++i) {
		printf("%d ", p[i]);
	}
}


int main()
{


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#include "nutility.h"

#include <stdio.h>

//warning C4018 : '<' : signed / unsigned mismatch
void PrintArray(const int *p, size_t size)
{
	for (int i = 0; i < (int)size; ++i) {
		printf("%d ", p[i]);
	}
}


int main()
{


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdio.h>


int* get_array_max(const int *ptr, size_t size)
{
	int *pmax = (int *)ptr;
	for (size_t i = 1; i < size; ++i) {
		if (ptr[i] > *pmax)
			pmax = (int *)(ptr + i);
	}

	return pmax;
}

int main()
{
	const int a[] = { 12, 56, 178, 23, 98 };

	//const int *ptr = get_array_max(a, 5)  //dogru
	int *ptr = get_array_max(a, 5); //yanlis

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include <stdio.h>

int main()
{
	int *p = NULL;
	double *dp = NULL;
	char *ptr = NULL;
	///....

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#define  NULL  ????????

if (p1 == p2)
		printf("dogru\n");
	else
		printf("yanlis\n");

	#include <stdio.h>

int *gp;

int main()
{
	static int *p;

	printf("%d\n", gp == NULL);
	printf("%d\n", p == NULL);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int x = 10;
int y = 10;
int z = 10;

int main()
{
	int *pa[10] = { &x, &y, &z };

	printf("%d\n", pa[5] == NULL);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	//int *ptr = 0x8000; //yanlis
	int *ptr = (int *)0x8000; 

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



NULL pointer
===============

NULL  bir makrodur.  
bir anahtar sözcük (keyword) deðildir.
Bir identifier (isim) deðildir.

NULL makrosu C'nin birçok standart baþlýk dosyasýnda "define" edilmiþtir. (tanýmlanmýþtýr)
<stddef.h>
<stdio.h>
<stdlib.h>
<string.h>
<time.h>

"NULL pointer" olarak söyleyiniz (Necati)
sadece NULL demeyiniz

null character  '\0' ya da NULL pointer hangisini kast ediyorsunuz?

NULL bir adres verisidir. 
Bir pointer deðiþkene ilk deðer olarak verilebilir ya da atanabilir.
NULL göstericinin pointer olmayan deðiþkenlere atanmasý her zaman yanlýþtýr. (Sentaks hatasi olmayabilir)
Herhangi türden bir pointer deðiþkene NULL pointer atanabilir;

Bir pointer deðiþkeninin deðerinin NULL pointer olmasý onu geçerli (valid) pointer yapar
Ancak deðeri NULL pointer olan bir pointer deðiþkenin

içerik operatörünün operandý olmasý
[] operatörünün operandý olmasý
+ -
++ --  operatörlerinin operandý olmasý
tanýmsýz davranýþtýr.

Deðeri NULL pointer olan bir pointer deðiþken hiçbir nesneyi göstermeyen pointer deðiþkendir

Ýki pointer karþýlaþtýrýldýðýnda eðer her ikisinin deðeri de NULL pointer ise iki pointer eþittir.

Statik ömürlü bir pointer deðiþkene ilk deðer verilmez ise derleyici
böyle deðiþkenleri NULL pointer deðeri ile baþlatýr.

C dilinde lojik ifade beklenen yerlerde bir pointer (bir adres ifadesi) kullanýlabilir .
Bu durumda lojik yorumlama þöyle yapýlýr:
	Nesne adresleri "dogru"
	NULL pointer yanlis

yani
if (ptr != NULL)
yazmak ile
if (ptr)
yazmak ayný anlama gelir.

yine ayný þekilde

if (ptr == NULL)
yazmak ile
if (!ptr)
yazmak ayný anlamdadýr.

while (ptr) {

}

----------------------------------------------
Normal olarak bir pointer deðiþkene bir adres atanmalýdýr.
Bir pointer deðiþkene bir tam sayi ya da bir gerçek sayi ifadesinin
atanmasý yanlýþtýr. (C++'da sentaks hatasý)

Ancak bu durumun bir istisnasý vardýr
eðer bir pointer deðiþkene tamsayý sabiti olarak 0 deðeri atanýrsa

int *ptr = 0;

Bu durumda derleyici 0 sabitini NULL pointer'a dönüþtürür

ptr = NULL;
ptr = 0;

demek arasýnda fark yok.

Eðer bir pointer dizisine ilk deðer verirken öðe sayýsýndan  daha az sayýda ilk deðer verirsek
ilk deðer vermediðimiz öðeler hayata NULL pointer deðeri ile baþlar.


Ne iþe yarýyor?

1) adres döndüren fonksiyonlar
Baþarýlý olursam (iþimi yapabilirsem) sana bir nesne adresi döndüreceðim ki
sen bu nesneyi kullanabileceksin. NULL pointer döndürürsem anla ki ben iþimi
yapamadým.

FILE *fopen
void *malloc
char *setlocale

2) dizilerde ya da yazýlarda ya da veri yapýlarýnda arama yapan fonksiyonlar
tipik olarak adres döndürürler. 
Eðer aranan deger bulunursa bu deðere sahip nesnenin adresini
Eðer aranan deger bulumaz ise NULL pointer 
döndürürler.

Örnek bir arama fonksiyonu

int *search_in_array(const int *ptr, size_t size, int val);

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100

int *search_in_array(const int *ptr, size_t size, int val)
{
	for (size_t i = 0; i < size; ++i)
		if (ptr[i] == val)
			return (int *)(ptr + i);

	return NULL;
}


//int *search_in_array(const int *ptr, size_t size, int val)
//{
//	while (size--) {
//		if (*ptr == val)
//			return (int *)ptr;
//		++ptr;
//	}
//
//	return NULL;
//}


int main()
{
	int a[SIZE];
	int *ptr;
	int sval;

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	printf("aranacak degeri giriniz: ");
	scanf("%d", &sval);

	ptr = search_in_array(a, SIZE, sval);
	//if (ptr == NULL) {
	if (!ptr) {
		printf("bulunamadi\n");
	}
	else {
		printf("bulundu... dizinin %d indisli elemani %d\n", ptr - a, *ptr);
		*ptr = -1;
		display_array(a, SIZE);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

Bazý fonksiyonlar (std c fonksiyonlari / 3rd party library functions)
pointer parametre deðiþkenine sahip.

Ancak bazý fonksiyonlar bu pointer parametreye kullanýcý kodun
NULL pointer göndermesini kullanuýcý koda bir opsiyon olarak veriyorlar


bana ya bir nesne adresi göndereceksin ya da NULL pointer göndereceksin!
eðer nesne adresi gönderirsen "bunu" yaparým
eðer NULL adresi gönderirsen "sunu" yaparým
-------------------------------------------------------------------------

void func(int *ptr);

a) bu iþleve NULL ptr göndermek tanýmsýz davranýþ
b) bu iþleve NULL ptr göndermek özel bir anlama geliyor


time_t time(time_t *p);
int fflush(FILE *f);


void func(int *ptr);

-----------------------------------------

int *ptr = NULL;

if (expr) {
	//

}

if (ptr)
------------------------------------

dangling pointer => invalid pointer

dinamik bellek yönetimi

int *ptr = (int *)malloc(n * sizeof(int));
///
ptr pointer deðiþkeni burada gecerli

free(ptr);
//ptr bu noktada dangling pointer
ptr = NULL;
-----------------------------------------------------------------------------------

<string.h>

C'nin std. kütüphanesinin en sýk kullanýlan modüllerinden biri


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

//puts

#define			SIZE		100

void myputs2(const char *p)
{
	while (*p != '\0') 
		putchar(*p++);

	putchar('\n');
}


void myputs(const char *p)
{
	for (int i = 0; p[i] != '\0'; ++i)
		putchar(p[i]);

	putchar('\n');
}

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	scanf("%s", str);

	puts(str);
	myputs(str);
	myputs2(str);
	printf("alican");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

void sgets(char *p)
{
	int c;

	while ((c = getchar()) != '\n') {
		*p++ = (char)c;
	}
	*p = '\0';
}


C11
	_s

<string.h>

strlen(const char *)
strchr
strrchr
strstr
strpbrk
strspn
strcspn
strcpy
strcat
strcmp
strncpy
strncat
strncmp
strtok

16.10'da devam

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100


int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);

	size_t len = strlen(str);

	printf("uzunluk = %zu\n", len);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100

size_t strlen4(const char *p)
{
	size_t len;

	for (len = 0; p[len] != '\0'; ++len)
		;

	return len;
}


size_t strlen3(const char *p)
{
	const char *ps = p;

	while (*p)
		++p;

	return (size_t)(p - ps);
}


size_t strlen2(const char *p)
{
	size_t len = 0;
	while (*p++) 
		++len;
	

	return len;
}


size_t strlen1(const char *p)
{
	size_t len = 0;
	while (*p != '\0') {
		++p;
		++len;
	}

	return len;
}

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);

	size_t len = strlen(str);
	size_t len1 = strlen1(str);
	size_t len2 = strlen2(str);
	size_t len3 = strlen3(str);
	size_t len4 = strlen4(str);

	printf("uzunluk = %zu\n", len);
	printf("uzunluk = %zu\n", len1);
	printf("uzunluk = %zu\n", len2);
	printf("uzunluk = %zu\n", len3);
	printf("uzunluk = %zu\n", len4);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

str

cumartesi'\0

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);

	size_t len = strlen(str);

	for (size_t i = 0; i < len; ++i) {
		puts(str + i);
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100


void rputs(const char *p)
{
	const char *pe = p + strlen(p);

	//while döngüsü ile -- operatörünü kullanarak
	//yaziyi tersten yazdirin
	//yazinin tum karakterleri yazdirilacak
	//null karakter yazdýrýlmayacak
}

//void rputs(const char *p)
//{
//	int len = (int)strlen(p);
//
//	for (int i = (int)strlen(p) - 1; i >= 0; --i) {
//		putchar(p[i]);
//	}
//	putchar('\n');
//}

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);
	rputs(str);

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100


char *strchr1(const char *p, int c)
{
	while (*p != '\0') {
		if (*p == c)
			return (char *)p;
		++p;
	}
	if (c == '\0')
		return (char *)p;

	return NULL;
}

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);
	int c;

	printf("aranacak karakteri girin: ");
	c = getchar();
	char *p = strchr1(str, c);
	if (p != NULL) {
		printf("bulundu.. yazinin %d indisli karakteri\n", p - str);
		*p = '!';
		puts(str);
	}
	else {
		printf("bulunamadi\n");
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100


char *strchr1(const char *p, int c)
{
	while (*p != '\0') {
		if (*p == c)
			return (char *)p;
		++p;
	}
	if (c == '\0')
		return (char *)p;

	return NULL;
}

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);

	char *p = strchr1(str, '\0');
	*p++ = 'X';
	*p = '\0';

	puts(str);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100


char *strrchr2(const char *p, int c)
{
	const char *ptr = NULL;

	while (*p != '\0') {
		if (*p == c) {
			ptr = p;
		}
		++p;
	}
	if (c == '\0')
		return (char *)p;

	return (char *)ptr;
}


int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets(str);
	printf("aranacak karakter: ");
	int ch = getchar();

	char *p1 = strchr(str, ch);
	if (p1) {
		printf("bulundu %d indisli karakter\n", p1 - str);
		*p1 = '!';
	}
	else {
		printf("bulunamadi\n");
	}

	char *p2 = strrchr(str, ch);
	if (p2) {
		printf("bulundu %d indisli karakter\n", p2 - str);
		*p2 = '?';
	}
	else {
		printf("bulunamadi\n");
	}

	printf("[%s]\n", str);




}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


C'de string fonkisyonlarý ile ilgili en sýk kullanýlan konvensiyonlardan biri:

eðer bir fonksiyon bir adresini aldýðý char dizideki yazýyý deðiþtirecek ise
ya da
adresini aldýðý diziye bir yazý yerleþtirecek ise

fonksiyon aldýðý adresi döndürür

#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100

//char *strrev(char *p);

int main()
{
	char s1[SIZE];
	char s2[SIZE];
	
	printf("bir yazi girin: ");
	sgets(s1);

	//puts(strcpy(s2, s1));

	printf("[%s]  [%s]\n", s1, s2);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100

//char *strrev(char *p);

int main()
{
	char s1[SIZE];
	char s2[SIZE];
	char s3[SIZE];

	printf("iki yazi girin:  ");
	scanf("%s%s", s1, s2);

	strcpy(s3, s1);
	strcpy(s3 + strlen(s3), s2);

	printf("[%s] [%s] [%s]\n", s1, s2, s3);
	//

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

aþaðýdaki ifade str adresindeki yazýnýn sonundaki null karakterin adresidir

str + strlen(str)

strcpy(char *pdest, const char *p);


#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100

int main()
{
	char s1[SIZE];
	char s2[SIZE];

	printf("bir yazi girin:  ");
	sgets(s1);
	strcpy(s2, s1);
	printf("(%s) (%s)\n", s1, s2);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100

char *strcpy1(char *pdest, const char *psource)
{
	char *ptemp = pdest;

	while (*psource != '\0') {
		*pdest = *psource;
		++pdest;
		++psource;
	}

	*pdest = '\0';

	return ptemp;
}

int main()
{
	char s1[SIZE];
	char s2[SIZE];

	printf("bir yazi girin:  ");
	sgets(s1);
	strcpy1(s2, s1);
	printf("(%s) (%s)\n", s1, s2);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


while (*p1++ = *p2++)
	;


restrict


#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100

char *strcpy2(char *pdest, const char *psource)
{
	char *ptemp = pdest;

	while (*pdest++ = *psource++)
		;

	
	return ptemp;
}


char *strcpy1(char *pdest, const char *psource)
{
	char *ptemp = pdest;

	while (*psource != '\0') {
		*pdest = *psource;
		++pdest;
		++psource;
	}

	*pdest = '\0';

	return ptemp;
}

int main()
{
	char s1[SIZE];
	char s2[SIZE];

	printf("bir yazi girin:  ");
	sgets(s1);
	strcpy2(s2, s1);
	printf("(%s) (%s)\n", s1, s2);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100

char *strcpy2(char *pdest, const char *psource)
{
	char *ptemp = pdest;

	while (*pdest++ = *psource++)
		;

	
	return ptemp;
}


char *strcpy1(char *pdest, const char *psource)
{
	char *ptemp = pdest;

	while (*psource != '\0') {
		*pdest = *psource;
		++pdest;
		++psource;
	}

	*pdest = '\0';

	return ptemp;
}

int main()
{
	char str[SIZE] = "gulden";

	///oyle bir kopyalama yapýlacak ki
	//gulden yazisi   gulgulden

	printf("%s\n", str);
	strcpy(str + 3, str); //ub

	printf("%s\n", str);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


overlapped blocks  (kesiþen bloklar)

#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100

char *strcpy2(char *pdest, const char *psource)
{
	char *ptemp = pdest;

	while (*pdest++ = *psource++)
		;

	
	return ptemp;
}


char *strcpy1(char *pdest, const char *psource)
{
	char *ptemp = pdest;

	while (*psource != '\0') {
		*pdest = *psource;
		++pdest;
		++psource;
	}

	*pdest = '\0';

	return ptemp;
}

int main()
{
	char str[SIZE] = "gulden";

	///oyle bir kopyalama yapýlacak ki
	//gulden yazisi   gulgulden

	printf("%s\n", str);
	strcpy(str + 3, str); //ub
	//strcpy islevinin "overlapped blocks" çalýþmasý tanýmsýz davranýþ

	printf("%s\n", str);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS


#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100

int main()
{
	char s1[10];
	char s2[100];

	printf("bir yazi girin: ");
	sgets(s2);  //ub ihtimali
	strcpy(s1, s2);  //un ihtimali

	puts(s1);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


char *ptr;
///

--------------------------------------------------
while (*ptr != '\0')
	++ptr;
--------------------------------------------------
while (*ptr)
	++ptr;
--------------------------------------------------
while (*ptr++)
	;
--ptr;
--------------------------------------------------
ptr += strlen(ptr);
--------------------------------------------------
ptr = strchr(ptr, '\0');
--------------------------------------------------

while (*++ptr)
	;


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100

int main()
{
	char str[100];
	str[0] = '\0';

	char *ptr = str;

	/*while (*ptr)
		++ptr;
	*/
	
	//while (*ptr++)
	//	;
	//--ptr;

	//ptr += strlen(ptr);

	/*while (*++ptr)  //yazi bos ise tanimsiz davranis
		;*/

	printf("%d\n", ptr - str);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
while (*ptr && *ptr++)
		;
//----------------------------------------------------------------------------------------------------

concatanete 
append


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100

int main()
{
	char s1[SIZE];
	char s2[SIZE];

	printf("iki isim giriniz: ");
	scanf("%s%s", s1, s2);

	strcat(s1, s2);

	printf("(%s) (%s)\n", s1, s2);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100

char *strcat1(char *pdest, const char *psource)
{
	char *ptemp = pdest;

	while (*pdest)
		++pdest;

	while (*pdest++ = *psource++)
		;

	return ptemp;

}

int main()
{
	char s1[SIZE];
	char s2[SIZE];

	printf("iki isim giriniz: ");
	scanf("%s%s", s1, s2);

	puts(strcat1(s1, s2));

	//printf("(%s) (%s)\n", s1, s2);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100


char *strcat1(char *pdest, const char *psource)
{
	strcpy(strchr(pdest, '\0'), psource);
	
	return pdest;
}

//char *strcat1(char *pdest, const char *psource)
//{
//	strcpy(pdest + strlen(pdest), psource);
//	
//	return pdest;
//}


//char *strcat1(char *pdest, const char *psource)
//{
//	char *ptemp = pdest;
//
//	while (*pdest)
//		++pdest;
//
//	while (*pdest++ = *psource++)
//		;
//
//	return ptemp;
//
//}

int main()
{
	char s1[SIZE];
	char s2[SIZE];

	printf("iki isim giriniz: ");
	scanf("%s%s", s1, s2);

	strcat1(s1, s2);

	printf("(%s) (%s)\n", s1, s2);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		100

int main()
{
	char s1[SIZE];
	char s2[SIZE];
	char s3[SIZE];

	printf("iki isim giriniz: ");
	scanf("%s%s", s1, s2);

	//tek bir statement yazýlacak ve virgül operatörü kullanýlmayacak
	strcat(strcpy(s3, s1), s2);

	printf("(%s) + (%s) = (%s)\n", s1, s2, s3);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		1000

int main()
{
	char str[SIZE];
	char s[SIZE];

	printf("bir yazi giriniz: ");
	sgets(str);
	printf("girilen yazi : [%s]\n", str);
	printf("aranacak yaziyi giriniz: ");
	sgets(s);
	printf("arancak yazi : [%s]\n", s);

	char *ptr = strstr(str, s);
	if (ptr == NULL) {
		printf("bulunamadi\n");
	}
	else {
		printf("bulundu idx = %d\n", ptr - str);
		printf("[%s]\n", ptr);
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		1000

int main()
{
	char str[SIZE];
	char s[SIZE];

	printf("bir yazi giriniz: ");
	sgets(str);
	printf("girilen yazi : [%s]\n", str); //bugun gunlerden cumartesi
	printf("aranacak yaziyi giriniz: ");
	sgets(s);
	printf("aranacak yazi : [%s]\n", s);  //gunlerden
	
	char *ptr = strstr(str, s);

	if (ptr) {
		printf("bulundu\n");
		size_t n = strlen(s);
		while (n--)
			*ptr++ = '*';
	}
	else {
		printf("bulunamadi\n");
	}

	printf("[%s]\n", str); //  bugun ********* cumartesi


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		1000

int main()
{
	char str[SIZE];
	char s[SIZE];

	printf("bir yazi giriniz: ");
	sgets(str);
	printf("girilen yazi : [%s]\n", str); //bugun gunlerden cumartesi
	printf("aranacak yaziyi giriniz: ");
	sgets(s);
	printf("aranacak yazi : [%s]\n", s);  //gunlerden
	
	char *ptr = strstr(str, s);

	if (ptr) {
		printf("bulundu\n");
		memset(ptr, '*', strlen(s));
		//standart memset iþlevini ileride göreceðiz
		printf("[%s]\n", str); 

	}
	else {
		printf("bulunamadi\n");
	}

	printf("[%s]\n", str); //  bugun ********* cumartesi


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


14:41'de devam


yazýlarýn karþýlaþtýrýlmasý


<
<=
>
>=
==
!=

islessthan(s1, s2)
---------------------

int compare(T x, T y);


int strcmp(const char *p1, const char *p2);


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		1000

int main()
{
	char s1[SIZE];
	char s2[SIZE];


	printf("iki isim girin: ");
	scanf("%s%s", s1, s2);
	//

	//if (strcmp(s1, s2) == 0)
	//if (!strcmp(s1, s2))  //iki yazý esit ise
	//if (strcmp(s1, s2) != 0)  //iki yazý esit deðil ise
	//if (strcmp(s1, s2))  //iki yazý esit deðil ise
	//if (strcmp(s1, s2) > 0) //s1'deki yazi s2'deki yazidan buyuk ise
	if (strcmp(s1, s2) < 0) //s1'deki yazi s2'deki yazidan kucuk ise


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


necati   necati 

Yazýlarýn büyüklüðü küçüklüðü ne anlama geliyor?

2 veri yapýsýný karþýlaþtýran
	lexicographical compare


12 45 67 93  3 18
5 45 67 134 3 18

hem boyutlarýnýn eþit olmasý hem de
karþýlýklý tüm elemanlarýnýn eþit olmasý demek

karþýlaþtýrmasý yapýlan ilk farklý çiftte büyük deðere sahip olan büyükdür


5			size = 1
4 ......    size = 800000

12 34 45

12 34 45 90




denge
deniz

su
cumhuriyet
---------------------------------------

masa
MASA


buyuk masa
kucuk masa

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		1000

int main()
{
	char s1[SIZE];
	char s2[SIZE];


	printf("iki kelime girin: ");
	scanf("%s%s", s1, s2);
	
	int cmp_result = strcmp(s1, s2);

	if (cmp_result > 0) {
		printf("(%s) > (%s)\n", s1, s2);
	}
	else if(cmp_result < 0)
		printf("(%s) < (%s)\n", s1, s2);
	else {
		printf("(%s) = (%s)\n", s1, s2);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		1000

int main()
{
	char s1[SIZE];
	char s2[SIZE];


	printf("iki kelime girin: ");
	scanf("%s%s", s1, s2);
	
	if (!strcmp(s1, s2))
		printf("esit\n");
	else
		printf("esit degil\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		1000

int strcmp(const char *p1, const char *p2)
{
	while (*p1 == *p2) {
		if (*p1 == '\0')
			return 0;
		++p1;
		++p2;
	}

	return (int)*p1 - (int)*p2;

}

int main()
{
	char s1[SIZE];
	char s2[SIZE];


	printf("iki kelime girin: ");
	scanf("%s%s", s1, s2);
	
	if (!strcmp(s1, s2))
		printf("esit\n");
	else
		printf("esit degil\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>

#define			SIZE		1000


//  baskent ankara
//  ankara

int is_at_end(const char *p1, const char *p2)
{
	size_t len1 = strlen(p1);
	size_t len2 = strlen(p2);

	if (len1 < len2)
		return 0;

	return !strcmp(p1 + len1 - len2, p2);
}

int main()
{
	char s1[SIZE];
	char s2[SIZE];

	printf("birinci yaziyi girin: "); //baskent ankara
	sgets(s1);
	printf("ikinci yaziyi girin: ");  //ankara
	sgets(s2);

	if (is_at_end(s1, s2)) {
		printf("[%s] yazisinin sonunda [%s] yazisi var\n", s1, s2);
	}
	else {
		printf("[%s] yazisinin sonunda [%s] yazisi yok\n", s1, s2);
	}
}


//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>
#include <ctype.h>

#define			SIZE		1000


int stricmp1(const char *p1, const char *p2)
{
	while (toupper(*p1) == toupper(*p2)) {
		if (*p1 == '\0')
			return 0;
		++p1;
		++p2;
	}

	return toupper(*p1) - toupper(*p2);

}


int main()
{
	char s1[SIZE];
	char s2[SIZE];


	printf("iki kelime girin: ");
	scanf("%s%s", s1, s2);

	//int cmp_result = stricmp1(s1, s2);
	int cmp_result = _stricmp(s1, s2);

	if (cmp_result > 0) {
		printf("(%s) > (%s)\n", s1, s2);
	}
	else if (cmp_result < 0)
		printf("(%s) < (%s)\n", s1, s2);
	else {
		printf("(%s) = (%s)\n", s1, s2);
	}

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
locale kavramý
local
//----------------------------------------------------------------------------------------------------

print_date

locale


C locale

standart C functions
	locale dependent functions
	locale independent functions



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>
#include <ctype.h>
#include <locale.h>


#define			SIZE		1000

int main()
{
	char *ploc = setlocale(LC_ALL, "turkish");

	if (!ploc) {
		printf("locale degisikligi yapilamadi\n");
		return 1;
	}

	//printf("locale degistirildi locale ismi: (%s)\n", ploc);
	double dval;
	printf("bir gercek sayi giriniz: ");
	scanf("%lf", &dval);

	printf("dval = (%f)\n", dval);

}


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>
#include <ctype.h>
#include <locale.h>
#include <time.h>



#define			SIZE		1000

int main()
{
	char *ploc = setlocale(LC_ALL, "italian");

	if (!ploc) {
		printf("locale degisikligi yapilamadi\n");
		return 1;
	}

	printf("locale degistirildi locale ismi: (%s)\n", ploc);
	char str[SIZE];
	time_t timer;
	time(&timer);
	struct tm *p = localtime(&timer);

	strftime(str, SIZE, "%A %B %Y", p);

	printf("%s\n", str);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>
#include <ctype.h>
#include <locale.h>
#include <time.h>

#define			SIZE		1000

int main()
{
	char str[SIZE];
	char schars[] = "aeiou";

	printf("bir yazi girin: ");
	sgets(str);
	printf("girilen yazi : [%s]\n", str);
	char *p = strpbrk(str, schars);
	if (!p) {
		printf("[%s] yazisinda [%s] karakterlerinden hicbiri yok\n", str, schars);
	}
	else {
		printf("bulundu... indeks = %d\n", p - str);
		printf("bulunan karakter %c\n", *p);
	}
	



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"
#include <string.h>
#include <ctype.h>
#include <locale.h>
#include <time.h>

#define			SIZE		1000


char *strpbrk1(const char *pstr, const char *pc)
{
	for (int i = 0; pstr[i] != '\0'; ++i) {
		if (strchr(pc, pstr[i])) {
			return (char *)(pstr + i);
		}
	}

	return NULL;
}


int main()
{
	char str[SIZE];
	char schars[] = "aeiou";

	printf("bir yazi girin: ");
	sgets(str);
	printf("girilen yazi : [%s]\n", str);
	char *p = strpbrk1(str, schars);
	if (!p) {
		printf("[%s] yazisinda [%s] karakterlerinden hicbiri yok\n", str, schars);
	}
	else {
		printf("bulundu... indeks = %d\n", p - str);
		printf("bulunan karakter %c\n", *p);
	}
	



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------




NULL									'\0'
bu bir makro							ama bu bir karakter sabiti
bu bir adres							bu bir tamsayi => 0
										int
gecerli bir adres
ama hiçbir nesnenin adresi				yazýyý sonlandýran karakter
										NTCS


#define  NULL       ((void *)0)


#include <stddef.h>

//Bir C idiyomu

int main()
{
	char *ptr;
	//code
	//gecerli bir pointer

	//ptr bir yazýyý gösteriyor ise ve ptr'nin gösterdiði yazý boþ deðil ise

	//if (ptr != NULL && *ptr != '\0')
	// ;///

	if (ptr && *ptr)
		; //statement
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#include <stddef.h>

//Bir C idiyomu

int main()
{
	char *ptr;
	//code
	//gecerli bir pointer

	//ptr bir yazýyý göstermiyorsa ya da ptr'nin gösterdiði yazý boþ ise

	if (ptr == NULL || *ptr == '\0')
		;

	if (!ptr || !*ptr)

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



string literals

	"mustafa"

string literalleri derleyici tarafýndan "statik ömürlü" bir char dizi olarak oluþturulur.
Biz kod içinde bir string literalini kullandýðýmýzda (array to pointer conversion) ile
aslýnda derleyicinin oluþturduðu dizinin adresini kullanmýþ oluruz


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	putchar(*"necati");
	putchar("Sait"[2]);
	puts("taylan");
	printf("\n(%s)\n", "melike");
	
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	printf("uzunluk = %zu\n", strlen("turgut"));
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	char str[100] = "alican";
	///
	///
	//burada str dizisi veysel yazýsýný tutsun
	//str = "veysel"; //gecersiz
	//&str[0]
	puts(str); 
	strcpy(str, "veysel");
	puts(str);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	printf("%p\n", "galip");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	int a[5] = { 0 };
	const int b[20] = { 0 };

	//a ifadesinin int [5]
	//b ifadesinin const int [20]

	//a => int *
	//b => const int *

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	char str[10];
	const char cs[20];

	//str ifadesini  türü  char[10]
	//cs ifadesinin  türü  const char[20]

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


C'de string literalleri derleyiciler tarafýndan
char diziler olarak ele alýnýrlar.
Yani
"mert"

derleyici için 5 elemanlý bir char dizidir.

Bu ifadenin türü char[5] türüdür.
array to pointer conversion ile bu ifade char * türüne dönüþtürülür

Oysa
C++ dilinde string literalleri derleyiciler tarafýndan
const char diziler olarak ele alýnýrlar.
Yani
"mert"

C++ derleyicisi için 5 elemanlý bir const char dizidir.

Bu ifadenin türü const char[5] türüdür.
array to pointer conversion ile bu ifade const char * türüne dönüþtürülür

Mesut Aygün

"necati"  =   char[7] => char *
"necati"  =   const char[7] => const char *

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

typedef char ar10[10];

int main()
{
	ar10 x, y, z;
	//char x[10], y[10], z[10];

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

C'de string literalleri char dizi olmalarýna karþýn
string literallerini deðiþtirme giriþimi "tanýmsýz davranýþtýr"

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	char *p = "ferhat"; //C'de gecerli C++'da gecersiz
	//C++ dilinde const T * türünden T* türüne otomatik dönüþüm yok

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	char *p = "ferhat"; 
	
	*p = 'S'; //ub
	p[5] = 'n'; //ub

	printf("(%s)\n", p);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

Dikkat!!!

C'de string literaller salt okuma amaçlý kullanýlabilecek yazýlardýr.
Bir string literalini deðiþtirmek her zaman tanýmsýz davranýþtýr.
Bu durumda sizi zorlayan baþka bir neden yoksa string literallaerini
bir pointer deðiþkene atamak ya da ilk deðer olarak vermek isterseniz
char * türünden deðil const char * türünden bir deðiþken kullanýn

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

//'function': different 'const' qualifiers	csd13_17	

int main()
{
	const char *p = "ferhat"; 

	strcpy(p, "nur"); //ub

	

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

int main()
{
	char str[100] = "mehmet";

	strcat(str, "can");

	puts(str);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


string literalleri statik ömürlü diziler
yani bellekte programýn baþýndan sonuna kadar kalýyorlar

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

int main()
{
	printf("bugun sokaga cikma yasagi var");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


char *getDayName(int dayno)
{
	switch (dayno) {
	case 1: return "Pazartesi";
	case 2: return "Sali";
	case 3: return "Carsamba";
	case 4: return "Persembe";
	case 5: return "Cuma";
	case 6: return "Cumartesi";
	case 7: return "Pazar";
	}

	return "";
}




int main()
{
	int n;

	printf("haftanin kacinci gunu: ");
	scanf("%d", &n);

	printf("haftanin %d. gunu %s\n", n, getDayName(n));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


//unspecified behavior

int main()
{
	const char *p1 = "ahmet aksoy";
	const char *p2 = "ahmet aksoy";

	if (p1 == p2)
		printf("evet esit\n");
	else
		printf("hayir esit degil\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


//unspecified behavior

void foo()
{
	const char *p2 = "ahmet aksoy";
	printf("adres = %p\n", p2);
}

int main()
{
	const char *p1 = "ahmet aksoy";

	printf("adres = %p\n", p1);
	foo();

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


Dikkat!

Özdeþ string literalleri için derleyiciler

a) Bunlarýn read-only kullanýlacak olmalarýna güvenerek bunlarý tek bir dizi olarak tutabilir
b) bunlarý farklý diziler olarak tutabilir

Bu durum "unspecified behavior" kategorisindedir.

Ýki adresi karþýlatýrmak ile 2 yazýyý karþýlaþtýrmak farklý anlamdadýr

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


//unspecified behavior

int main()
{
	char s1[100] = "ahmet";
	char s2[100] = "ahmet";
	//

	if (s1 == s2) { //always false
		printf("evet esit\n");
	}
	else {
		printf("hayir esit degil\n");
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
cpp kodu
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string>

using namespace std;

int main()
{
	string s1 = "ahmet";
	string s2 = "mehmet";
	//

	if (s1 == s2) { 
		printf("evet esit\n");
	}
	else {
		printf("hayir esit degil\n");
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	char s1[100] = "ahmet";
	char s2[100] = "ahmet";
	//

	if (!strcmp(s1, s2)) { 
		printf("evet esit\n");
	}
	else {
		printf("hayir esit degil\n");
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	char *psw = "whitecat";
	///

	if (psw == "whitecat") {  //parola dogru ise anlamýna gelmiyor


	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	char str[100];
	char name[100];

	///code
	
	//strcpy(name, str);
	strcpy(name, "Canberk");
	

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

#define			SIZE		100


// eger dosyanýn uzantisi yok ise uzantisýný .dat  yapin
// eger dosyanýn uzantisi .jpg ise uzantisýný .gif  yapin
// eger dosyanýn uzantisi .txt ise uzantisýný silin
// bunun disindaki tum durumlarda dosya uzantisini ".xls" yapin

int main()
{
	char old_file_name[SIZE];
	char new_file_name[SIZE];

	printf("dosya ismini giriniz: ");
	scanf("%s", old_file_name);

	strcpy(new_file_name, old_file_name);

	char *p = strrchr(new_file_name, '.');

	if (p == NULL) {
		strcat(new_file_name, ".dat");
	}
	

	printf("[%s] [%s]\n", old_file_name, new_file_name);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

#define			SIZE		100


// eger dosyanýn uzantisi yok ise uzantisýný .dat  yapin
// eger dosyanýn uzantisi .jpg ise uzantisýný .gif  yapin
// eger dosyanýn uzantisi .txt ise uzantisýný silin
// bunun disindaki tum durumlarda dosya uzantisini ".xls" yapin

//alihan\0jpg\0

int main()
{
	char old_file_name[SIZE];
	char new_file_name[SIZE];

	printf("dosya ismini giriniz: ");
	scanf("%s", old_file_name);

	strcpy(new_file_name, old_file_name);

	char *p = strrchr(new_file_name, '.');

	if (p == NULL) {
		strcat(new_file_name, ".dat");
	}
	else if (!strcmp(p, ".jpg")) {
		strcpy(p, ".gif");
	}
	else if (!strcmp(p, ".txt")) {
		//strcpy(p, "");
		//strcpy(p, "\0");
		*p = '\0';
	}
	else {
		strcpy(p, ".xls");
	}
	

	printf("[%s] [%s]\n", old_file_name, new_file_name);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

int main()
{
	//char diziye ilk deðer verme sentaksý
	//str dizisinin dýþýnda ayrý bir dizi yok
	//bu dizinin boyutu 8
	char str[] = "mustafa";
	
	//char *p = "veysel";

	printf("sizeof(str) = %zu\n", sizeof str);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

//
int main()
{
	//strcpy(p, "");
	//*p = '\0'


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


sizeof  
	a) derleme zamanýnda deðer üretiyor
	b) sizeof op. ile oluþturulan ifade constants expression
strlen



sizeof(int)
sizeof(str)
strlen(str)


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

//
int main()
{
	char str[] = "taylan";
	char *p = str;

	printf("[1] %zu\n", sizeof str);
	printf("[2] %zu\n", sizeof (*str));
	printf("[3] %zu\n", strlen(str));
	printf("[4] %zu\n", sizeof(p++));
	printf("[5] %zu\n", strlen(p));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

//
int main()
{
	printf("%zu\n", sizeof("meryem"));
	printf("%zu\n", strlen("meryem"));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

//VLA

int main()
{
	int a[sizeof("meryem")] = {0};
	int b[strlen("meryem")] = {0};

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	int a[sizeof ""] = {0}; //gecerli

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	//size_t x = sizeof int; //gecersiz
	int y = 10;

	//size_t x = sizeof y; //gecerli
	//size_t x = sizeof(y); //gecerli
	//sizeof ""
	printf("%zu\n", sizeof y + 7);
	printf("%zu\n", sizeof (y + 7));
	printf("%zu\n", sizeof (y + 7.));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	printf("%s\n", "AB\n\x41Y\101");
	printf("\x41abba"); //gecersiz


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	puts("\123456");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	puts("ali");
	puts("\"ali\"");
	puts("\\ali\\");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	//FILE *f = fopen("c\necati\ali.txt", "r");
	FILE *f = fopen("c\\necati\\ali.txt", "r");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	//FILE *f = fopen("c\necati\ali.txt", "r");
	//FILE *f = fopen("c\\necati\\ali.txt", "r");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	//Bir string literalini birden fazla satira yaymak

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	const char *p = "bu yazi cok uzun bir yazi sadece ornek 
	olsun diye olusturdum bunun disinda bir anlami 
	yok sadece test etmek icin"

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	const char *p = "bu yazi cok uzun bir yazi sadece ornek  \
	                 olsun diye olusturdum bunun disinda bir anlami \
	                 yok sadece test etmek icin";

	puts(p);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	const char *p = "bu yazi cok uzun bir yazi sadece ornek \
olsun diye olusturdum bunun disinda bir anlami \
yok sadece test etmek icin";

	puts(p);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	const char *p = "veysel"
					"mehmet"
					"dogac"
					"meryem"
					"muhammed"
					"taylan";

	puts(p);

	//const char *p = "veyselmehmetdogacmeryemmuhammedtaylan";

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>


int main()
{
	printf("[1] Kayit Ekle\n"
		   "[2] Kayit Sil\n"
		   "[3] Kayit Ara\n"
		   "[4] Kayit Tenile\n"
		   "[5] Programdan Cik\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

#define  iprint(x)     printf(#x " = %d\n", x)


int main()
{
	int a = 12;
	int b = 25;
	int c = 30;

	iprint(a);
	iprint(a + b + c);
	iprint(a * a + b * b + c * c);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

typedef  int * IPTR;

int main()
{
	int x = 10;
	int y = 45;

	//IPTR p = &x;  //int *p = &x;
	//IPTR p1 = &x, p2 = &y;
	int *p1 = &x, *p2 = &y;
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

//#define   IPTR  int *

typedef int * IPTR;

int main()
{
	IPTR p1, p2;


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

typedef int * IPTR;

int main()
{
	int x = 20;
	int y = 34;

	const IPTR p = &x;

	//int *const p = &x;  //1
	//const int *p = &x;

	//p = &y; //1  gecersiz
	*p = 98; //2 gecerli


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

typedef const int *CIPTR;

int main()
{
	int x = 10, y = 20;
	CIPTR p1 = &x, p2 = &y;

	//*p1 = 34; //gecersiz
	//*p2 = 34; //gecersiz
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

pointer arrays
gösterici dizileri

int a[10];
char a[10];


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

typedef int * IPTR;

int main()
{
	int x = 10;
	const IPTR p = &x;
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

int x = 10;
int y = 20;
int z = 30;
int t = 40;

int main()
{
	int *p[] = { &x, &y, &z, &t };

	printf("asize(p) = %zu\n", asize(p));
	printf("sizeof(p) = %zu\n", sizeof p);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

int x = 10;
int y = 20;
int z = 30;
int t = 40;

int main()
{
	int *p[] = { &x, &y, &z, &t };

	++*p[2];

	printf("z = %d\n", z);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"


int a[10] = { 0 };
int b[10] = { 0 };
int c[10] = { 0 };

int main()
{
	int *p[] = { a, b, c };

	p[1][5] = 45;

	display_array(b, 10);
	++p[2][3];
	display_array(c, 10);






}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"


int a[10] = { 0 };
int b[10] = { 0 };
int c[10] = { 0 };

int main()
{
	int *p[] = { a, b, c };

	++p[1];
	++*p[1];
	display_array(b, 10);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

int x = 10;
int y = 20;
int z = 30;
int t = 40;

int main()
{
	int a = 57;

	int *const p[] = { &x, &y, &z, &t };
	//p[2] = &a; //gecersiz
	*p[2] = 653;

	printf("z = %d\n", z);




}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

int x = 10;
int y = 20;
int z = 30;
int t = 40;

int main()
{
	int a = 57;

	//int const * p[] = { &x, &y, &z, &t };
	const int * p[4] = { &x, &y, &z, &t };
	const int *ptr = &a;

	p[2] = &a;
	//*p[1] = 865; //gecersiz




}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

int x = 10;
int y = 20;
int z = 30;
int t = 40;

int main()
{
	int a = 57;

	const int * const p[4] = { &x, &y, &z, &t };

	p[1] = &a;  //gecersiz
	*p[1] = 3; // gecersiz  





}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

	char *pdays[] = { "Pazartesi", "Sali", "Carsamba", "Persembe", "Cuma", "Cumartesi", "Pazar" };


pazartesi

salý

carsamba

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

int main()
{
	char *pdays[] = { "Pazartesi", "Sali", "Carsamba", "Persembe", "Cuma", "Cumartesi", "Pazar" };

	for (int i = 0; i < 7; ++i) {
		puts(pdays[i]);
	}





}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

int main()
{
	char *pdays[] = { "Pazartesi", "Sali", "Carsamba", "Persembe", "Cuma", "Cumartesi", "Pazar" };


	*pdays[1] = 'D'; //ub



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

int main()
{
	char *pdays[] = { "Pazartesi", "Sali", "Carsamba", "Persembe", "Cuma", "Cumartesi", "Pazar" };

	*pdays[2] = 'T'; //sentaks hatasi degil ancak tanimsiz davranis
	



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

int main()
{
	const char *pdays[] = { "Pazartesi", "Sali", "Carsamba", "Persembe", "Cuma", "Cumartesi", "Pazar" };

	*pdays[2] = 'T'; //sentaks hatasi 


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

int main()
{
	const char *pdays[] = {"", "Pazartesi", "Sali", "Carsamba", "Persembe", "Cuma", "Cumartesi", "Pazar" };

	int n;

	printf("haftanin kacinci gunu: ");
	scanf("%d", &n);
	printf("haftanin %d. gunu %s\n", n, pdays[n]);



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

int main()
{
	const char *pdays[] = {"Pazartesi", "Sali", "Carsamba", "Persembe", "Cuma", "Cumartesi", "Pazar" };
	char entry[40];

	printf("bir gun girin: ");
	scanf("%s", entry);
	size_t idx;

	for (idx = 0; idx < asize(pdays); ++idx)
		if (!strcmp(entry, pdays[idx]))
			break;

	if (idx == asize(pdays))
		printf("%s gecerli bir gun ismi degil\n", entry);
	else {
		printf("%s haftanin %zu. gunu\n", entry, idx + 1);
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

int main()
{
	const char *pdays[] = {"Pazartesi", "Sali", "Carsamba", "Persembe", "Cuma", "Cumartesi", "Pazar" };
	char entry[40];

	printf("bir gun girin: ");
	scanf("%s", entry);
	size_t idx;

	for (idx = 0; idx < asize(pdays) && _stricmp(entry, pdays[idx]); ++idx)
		;

	if (idx == asize(pdays))
		printf("%s gecerli bir gun ismi degil\n", entry);
	else {
		printf("%s haftanin %zu. gunu\n", entry, idx + 1);
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	const char *pdays[] = {"Pazartesi", "Sali", "Carsamba", "Persembe", "Cuma", "Cumartesi", "Pazar" };

	randomize();

	for (;;) {
		printf("%s ", pdays[rand() % asize(pdays)]);
		_getch();

	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	const char * p[] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", };

	//printf("asize(p) = %zu\n", asize(p));

	for (size_t i = 0; i < asize(p); ++i) {
		printf("%s ", p[i]);
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	const char * p[] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", };

	//printf("asize(p) = %zu\n", asize(p));

	for (size_t i = 0; i < asize(p); ++i) {
		printf("%p %s\n", p[i], p[i]);
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	const char * p[] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", };


	for (size_t i = 0; i < asize(p); ++i) {
		printf("%-18s %zu\n", p[i], strlen(p[i]));
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	const char * p[] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", };


	for (size_t i = 0; i < asize(p); ++i) {
		//printf("%c ", *p[i]);
		printf("%c ", p[i][0]);
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	const char * p[] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", };


	for (size_t i = 0; i < asize(p); ++i) {
		printf("%c ", p[i][strlen(p[i]) - 1]);
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------





#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	const char * p[] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", };

	for (int c = 'a'; c <= 'z'; ++c) {
		int cnt = 0;
		printf("icinde (%c) karakteri olanlar", c);
		pline();
		for (size_t i = 0; i < asize(p); ++i) {
			if (strchr(p[i], c)) {
				printf("%s ", p[i]);
				++cnt;
			}
		}
		printf("\n%d isim\n\n", cnt);
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	const char * p[] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati"};

	char entry[40];

	printf("bir yazi girin: ");
	scanf("%s", entry);


	for (size_t i = 0; i < asize(p); ++i) {
		if (strstr(p[i], entry)) {
			printf("%s ", p[i]);
		}
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	const char * p[] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati"};

	char entry[40];

	printf("bir yazi girin: ");
	scanf("%s", entry);


	for (size_t i = 0; i < asize(p); ++i) {
		if (strpbrk(p[i], entry)) {
			printf("%s ", p[i]);
		}
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	const char *p[] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati"};


	for (size_t i = 0; i < asize(p); ++i) {
			printf("%s ", p[i]);
	}

	for (size_t i = 0; i < asize(p) - 1; ++i) {
		for (size_t k = 0; k < asize(p) - 1 - i; ++k) {
			if (strcmp(p[k], p[k + 1]) > 0) {
				const char *ptemp = p[k];
				p[k] = p[k + 1];
				p[k + 1] = ptemp;
			}
		}
	}
	

	_getch();
	system("cls");

	for (size_t i = 0; i < asize(p); ++i) {
		printf("%s ", p[i]);
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	const char *p[] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati"};


	for (size_t i = 0; i < asize(p); ++i) {
			printf("%s ", p[i]);
	}

	for (size_t i = 0; i < asize(p) - 1; ++i) {
		for (size_t k = 0; k < asize(p) - 1 - i; ++k) {
			if (strcmp(p[k], p[k + 1]) < 0) {
				const char *ptemp = p[k];
				p[k] = p[k + 1];
				p[k + 1] = ptemp;
			}
		}
	}
	

	_getch();
	system("cls");

	for (size_t i = 0; i < asize(p); ++i) {
		printf("%s ", p[i]);
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


su ali ece efe gul nur tan anil mert okan tunc ahmet metin salih yesim korhan necati veysel


p[k]      p[k + 1]
len1      len2

len1 > len2 || (len1 == len2 && strcmp(p[k], p[k + 1]) > 0)

tan  ece
mert anil


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	const char *p[] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati"};


	for (size_t i = 0; i < asize(p); ++i) {
			printf("%s ", p[i]);
	}

	for (size_t i = 0; i < asize(p) - 1; ++i) {
		for (size_t k = 0; k < asize(p) - 1 - i; ++k) {
			size_t len1 = strlen(p[k]);
			size_t len2 = strlen(p[k + 1]);
			if (len1 > len2 || (len1 == len2 && strcmp(p[k], p[k + 1]) > 0)) {
				const char *ptemp = p[k];
				p[k] = p[k + 1];
				p[k + 1] = ptemp;
			}
		}
	}
	_getch();
	system("cls");

	for (size_t i = 0; i < asize(p); ++i) {
		printf("%s ", p[i]);
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	const char *p[] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati"};


	for (size_t i = 0; i < asize(p); ++i) {
			printf("%s ", p[i]);
	}

	for (size_t i = 0; i < asize(p) - 1; ++i) {
		for (size_t k = 0; k < asize(p) - 1 - i; ++k) {
			size_t len1 = strlen(p[k]);
			size_t len2 = strlen(p[k + 1]);
			if (len1 < len2 || (len1 == len2 && strcmp(p[k], p[k + 1]) < 0)) {
				const char *ptemp = p[k];
				p[k] = p[k + 1];
				p[k + 1] = ptemp;
			}
		}
	}
	_getch();
	system("cls");

	for (size_t i = 0; i < asize(p); ++i) {
		printf("%s ", p[i]);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	const char *p[] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati", NULL};

	int i = 0;

	while (p[i]) {
		printf("%s ", p[i++]);
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	static const char *const pmons[] = {
	"",
	"Ocak",
	"Subat",
	"Mart",
	"Nisan",
	"Mayis",
	"Haziran",
	"Temmuz",
	"Agustos",
	"Eylul",
	"Ekim",
	"Kasim",
	"Aralik"
	};

	int n;

	printf("yilin kacinci ayi: ");
	scanf("%d", &n);
	printf("yilin %d. ayi %s\n", n, pmons[n]);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


while (integer_expression) {

}


while (integer_expression != 0) {

}


while (pointer_expression) {
}

while (pointer_expression != NULL) {
}


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>


//ahmet     1
//alihan    55
//asim      23
//furkan   12
//ayberk   88
//dogac    25
//deniz    41
//elif     87
//necati   43
//mert     72
//veysel   91
//sarp    88
//umut    22

int main()
{
	const char *const p[] = { [1] = "ahmet",[55] = "alihan",[23] = "asim",
	[12] = "furkan", [88] = "ayberk", [25] = "osman", [87] = "elif",[41] = "deniz" };

	int no;
	printf("dahili numarayi biliyorsaniz yazin: ");
	scanf("%d", &no);

	if (no >= asize(p) || !p[no])
		printf("gecerli bir numara degil\n");
	else 
		printf("%d numarasi %s kisisine ait\n", no, p[no]);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	const char *p[] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati", "ferhunde", "sirri", "tufancan", "meryem", "dogac", "veysel", "asim",
	"pinar"};

	printf("%zu\n", asize(p));



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>

//warning C4090 : 'function' : different 'const' qualifiers

char *mystrrev(char *p)
{
	size_t len = strlen(p);
	for (size_t i = 0; i < len / 2; ++i) {
		char ctemp = p[i];
		p[i] = p[len - 1 - i];
		p[len - 1 - i] = ctemp;
	}

	return p;
}

int main()
{
	
	const char *p[300] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati", "ferhunde", "sirri", "tufancan", "meryem", "dogac", "veysel", "asim",
	"pinar"};

	char buffer[100];
	for (size_t i = 0; i < asize(p); ++i) {
		mystrrev(strcpy(buffer, p[i]));
		printf("%s ", buffer);
		_getch();
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>


//odev
//asagidaki gosterici dizisinde tutulan isimlerden
// a) en buyugunu bulun
// b) en kucugunu bulun
// c) icinde tum harfleri "unique" /(essiz - tek) olanlari yazdirin

int main()
{
	
	const char *p[300] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati", "ferhunde", "sirri", "tufancan", "meryem", "dogac", "veysel", "asim",
	"pinar"};

	char buffer[100];
	for (size_t i = 0; i < asize(p); ++i) {
		mystrrev(strcpy(buffer, p[i]));
		printf("%s ", buffer);
		_getch();
	}



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>


int main()
{
	
	const char *p[300] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati", "ferhunde", "sirri", "tufancan", "meryem", "dogac", "veysel", "asim",
	"pinar"};

	const char *pmax = p[0];

	for (size_t idx = 1; idx < asize(p); ++idx) {
		if (strcmp(p[idx], pmax) > 0) {
			pmax = p[idx];
		}
	}

	printf("en buyuk yazi %s", pmax);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "nutility.h"
#include <conio.h>


int main()
{
	
	const char *p[300] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati", "ferhunde", "sirri", "tufancan", "meryem", "dogac", "veysel", "asim",
	"pinar"};

	const char *pmax = p[0];
	const char *pmin = p[0];

	for (size_t idx = 1; idx < asize(p); ++idx) {
		if (strcmp(p[idx], pmax) > 0) {
			pmax = p[idx];
		}
		else if (strcmp(pmin, p[idx]) > 0) {
			pmin = p[idx];
		}
	}

	printf("en buyuk isim %s\n", pmax);
	printf("en kucuk isim %s\n", pmin);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


14:40'da devam edecegiz

pointer to pointer (gösterici gösteren gösterici)


int main()
{
	int x = 10;
	int *p = &x;
	//p'nin kendisi de bir nesne
	//yani p'nin de bir adresi var

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



int main()
{
	int x = 10;
	int *p = &x;

	printf("x  = %d\n", x);
	printf("&x = %p\n", &x);
	printf("p  = %p\n", p);
	printf("&p = %p\n", &p);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



int main()
{
	int x = 10;
	int *p = &x;

	printf("x  = %d\n", x);
	printf("&x = %p\n", &x);
	printf("p  = %p\n", p);
	printf("&p = %p\n", &p);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



T x;

&x => T *



int main()
{
	int x = 10;
	int *p = &x;

	// &p ====> ifadesinin türü int **

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <iostream>

int main()
{
	int x = 10;
	int *p = &x;

	std::cout << typeid(&p).name() << "\n";

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include <iostream>

int main()
{
	int x = 10;
	int *p = &x;
	//p deðiþkeninin adresini bir pointer deðiþkende tutmak istersek
	//yani öyle bir pointer deðiþken olsun ki p'yi göstersin
	int **ptr = &p;
	//ptr points to p
	//ptr p'yi gosteriyor
	//*ptr ifadesi p nesnesinin kendisi

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <iostream>

int main()
{
	int x = 10;
	int y = 45;
	int *p = &x;
	int **ptr = &p;

	*ptr = &y;
	*p = 999;
	printf("x = %d  y = %d\n", x, y);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#include <iostream>

int main()
{
	int x = 10;
	int y = 45;
	int *p = &x;
	int **ptr = &p;
	
	**ptr = 777;

	printf("x = %d  y = %d\n", x, y);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include <iostream>

int main()
{
	int x = 10;
	int y = 45;
	int *p = &x;
	int **ptr = &p;
	
	**ptr = 777;
	//double indirection 
	//double dereferencing

	printf("x = %d  y = %d\n", x, y);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <iostream>

int main()
{
	int x = 10;
	int y = 45;
	int *p = &x;
	int **ptr = &p;
	

	//p'nin ve ptr'nin tür bilgisini ingilizce ifade ediniz
	//p'nin türü pointer to int
	//ptr'nin türü pointer to pointer to int

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include "nutility.h"

int main()
{
	int a[5] = { 10, 20, 30 ,40, 50 };
	int *p = a;
	int **ptr = &p;

	++*ptr;  //artik p a dizisinin 2. elemanini gosteriyor
	++**ptr;
	display_array(a, 5);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------




int x = 10;
int *p = &x;
int **ptr = &p;

expression      data type       value category
ifade           veri türü       deðer kategorisi (L val / R val)
----------     ------------     --------------------------------
x	            int             L value
&x	            int*            R value
p				int*            L value
*p              int				L value
&p				int**			R value
ptr				int**           L value
*ptr			int*			L value
**ptr			int             L value
&ptr            int***			R value




T *p
T **px 
T ***py 
T ****pz 


#include "nutility.h"
#include <stdio.h>

int main()
{
	int x = 99;
	int *p1 = &x;
	int **p2 = &p1;
	int ***p3 = &p2;
	int ****p4 = &p3;
	int *****p5 = &p4;
	int ******p6 = &p5;
	int *******p7 = &p6;
	int ********p8 = &p7;
	int *********p9 = &p8;
	int **********p10 = &p9;
	int ***********p11 = &p10;
	int ************p12 = &p11;
	int *************p13 = &p12;
	int **************p14 = &p13;
	int ***************p15 = &p14;
	int ****************p16 = &p15;
	int *****************p17 = &p16;
	int ******************p18 = &p17;
	int *******************p19 = &p18;
	int ********************p20 = &p19;

	++********************p20;

	printf("x = %d\n", x);



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

Peki Neco, ne iþe yarýyor bu pointer to pointer

#include "nutility.h"
#include <stdio.h>

void func(int *ptr)
{
	//*ptr = expr;
}

int main()
{
	int x = 10;

	//öyle bir fonksiyon olusturun ki x gibi yereld degiskenleri degistirebilsin ve 
	//bu fonk.nun nasil cagrilacagini gosterin
	func(&x);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include "nutility.h"
#include <stdio.h>

void func(int *ptr)
{
	//*ptr = expr;
}

void foo(int **p)
{
	//*p = expr;
}

int main()
{
	int x = 23;
	int *ptr = &x;

	//öyle bir fonksiyon olusturun ki ptr gibi yerel degiskenleri degistirebilsin ve 
	//bu fonk.nun nasil cagrilacagini gosterin
	foo(&ptr);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include "nutility.h"
#include <stdio.h>


int main()
{
	int x = 23;
	int y = 44;
	int *p1 = &x, *p2 = &y;
	//p1 x'i p2 y'yi gosteriyor
	//p1 ve p2'yi takas ediyoruz

	printf("*p1 = %d  *p2 = %d\n", *p1, *p2);

	int *ptemp = p1;
	p1 = p2;
	p2 = ptemp;

	printf("*p1 = %d  *p2 = %d\n", *p1, *p2);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include "nutility.h"
#include <stdio.h>

void pswap(int **ptr1, int **ptr2)
{
	//asagidaki cagri icin *ptr1 main'deki p1
	//asagidaki cagri icin *ptr2 main'deki p2
	int *ptemp = *ptr1;
	*ptr1 = *ptr2;
	*ptr2 = ptemp;
}

int main()
{
	int x = 23;
	int y = 44;
	int *p1 = &x, *p2 = &y;
	//p1 x'i p2 y'yi gosteriyor
	//p1 ve p2'yi takas ediyoruz

	printf("*p1 = %d  *p2 = %d\n", *p1, *p2);

	/*int *ptemp = p1;
	p1 = p2;
	p2 = ptemp;*/
	pswap(&p1, &p2);

	printf("*p1 = %d  *p2 = %d\n", *p1, *p2);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


			int *ptr = &x;

			func(ptr);
			foo(&ptr);

#include "nutility.h"
#include <stdio.h>

void foo(int **ptr1, int **ptr2)
{
	int temp = **ptr1;
	**ptr1 = **ptr2;
	**ptr2 = temp;
}

int main()
{
	int x = 23;
	int y = 44;
	int *p1 = &x, *p2 = &y;

	printf("x = %d y = %d\n", x, y);

	foo(&p1, &p2);

	printf("x = %d y = %d\n", x, y);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include "nutility.h"
#include <stdio.h>

#define			SIZE		20

//bir int dizinin hem en buyuk elemanýnýn adresini 
//hem en kucuk elemanýnýn adresini 
//çaðýran koda ileten bir fonksiyon tasarlayýnýz

void get_min_max(int *pa, size_t size, int **ptr_max, int **ptr_min)
{
	*ptr_max = *ptr_min = pa;
	
	for (size_t i = 1; i < size; ++i) {
		if (pa[i] > **ptr_max) {
			*ptr_max = pa + i;
		}
		else if (pa[i] < **ptr_min)
			*ptr_min = pa + i;
	}

}


int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	int *pmin, *pmax;
	//
	get_min_max(a, SIZE, &pmax, &pmin);
	//
	printf("max = %d  ve dizinin %d indisli elemani\n", *pmax, pmax - a);
	printf("min = %d  ve dizinin %d indisli elemani\n", *pmin, pmin - a);
	swap(pmin, pmax); //dizinin en buyuk ve en kucuk ogeleri takas edilecek
	display_array(a, SIZE);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include "nutility.h"
#include <stdio.h>

#define			SIZE		300

void display_names(const char *const *ptr, size_t size)
{
	for (size_t i = 0; i < size; ++i)
		printf("(%s) ", ptr[i]);
	pline();
}

int main()
{
	const char *p[SIZE] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati", "ferhunde", "sirri", "tufancan", "meryem", "dogac", "veysel", "asim",
	"pinar" };

	//for (size_t i = 0; i < SIZE; ++i) {
	//	printf("%s ", p[i]);
	//}


	//display_names(p, SIZE);
	//display_names(&p[0], SIZE);
	display_names(p, 10);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include "nutility.h"
#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>

#define			SIZE		300

void display_names(const char *const *ptr, size_t size)
{
	for (size_t i = 0; i < size; ++i)
		printf("%s ", ptr[i]);
	pline();
}

void sort_names(const char **ptr, size_t size)
{
	for (size_t i = 0; i < size - 1; ++i) {
		for (size_t k = 0; k < size - 1 - i; ++k) {
			if (strcmp(ptr[k], ptr[k + 1]) > 0) {
				const char *ptemp = ptr[k];
				ptr[k] = ptr[k + 1];
				ptr[k + 1] = ptemp;
			}
		}
	}
}

int main()
{
	const char *p[SIZE] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati", "ferhunde", "sirri", "tufancan", "meryem", "dogac", "veysel", "asim",
	"pinar" };


	display_names(p, SIZE);
	sort_names(p, SIZE);
	_getch();
	system("cls");
	display_names(p, SIZE);


	//for (size_t i = 0; i < SIZE; ++i) {
	//	printf("%s ", p[i]);
	//}


	//display_names(p, SIZE);
	//display_names(&p[0], SIZE);
	//display_names(p, 10);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


pointer to pointers & const

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 20;
	int y = 64;
	int *p1 = &x;
	int *p2 = &y;

	int **const ptr = &p1;

	//ptr = &p2;  //1  gecersiz
	*ptr = &x;  //2  gecerli
	**ptr = 90; //3  gecerli

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 20;
	int y = 64;
	int *p1 = &x;
	int *p2 = &y;

	int *const *ptr = &p1;

	ptr = &p2;  //1  gecerli
	//*ptr = &x;  //2  gecersiz
	**ptr = 90; //3  gecerli

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 20;
	int y = 64;
	int *p1 = &x;
	int *p2 = &y;

	//const int **ptr = &p1;
	int const **ptr = &p1;

	ptr = &p2;  //1   gecerli
	*ptr = &x;  //2  gecerli
	//**ptr = 90; //3  gecersiz

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 20;
	int y = 64;
	int *p1 = &x;
	int *p2 = &y;

	int *const * const ptr = &p1;

	ptr = &p2;  //1   gecersiz
	*ptr = &x;  //2  gecersiz
	**ptr = 90; //3  gecerli

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int x = 20;
	int y = 64;
	int *p1 = &x;
	int *p2 = &y;

	const int *const * const ptr = &p1;

	ptr = &p2;  //1   gecersiz
	*ptr = &x;  //2  gecersiz
	**ptr = 90; //3  gecersiz

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//warning C4090 : 'initializing' : different 'const' qualifiers
int main()
{
	int x = 10;
	const int *ptr = &x;
 	const int ** p = &ptr;  //const anahtar sözcüðüne dikkat

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//warning C4090 : 'initializing' : different 'const' qualifiers
int main()
{
	int x = 10;
	int * const ptr = &x;
	int *const * p = &ptr;
 	

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


Eðer strncpy iþlevinin 3. parametresine gecilen tam sayi degeri 
kaynak yazýnýn uzunluðuna eþit ya da kaynak yazinin uzunlugundan 
kucuk ise strncpy hedef adrese null karakteri yazmaz!!!!


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>



#define			SIZE		100

int main()
{
	char s1[SIZE] = "asim kaleli";
	char s2[SIZE];

	size_t n;

	printf("kac karakter kopyalansin: ");
	scanf("%zu", &n);

	strncpy(s2, s1, n)[n] = '\0';
	

	printf("%s\n", s2); 



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

strcpy
strcat
strcmp


char *strncpy(char *pdest, const char *psource, size_t n);
char *strncat(char *pdest, const char *psource, size_t n);
int strcmp(const char *p1, const char *p2, size_t n)


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

#define			SIZE		100

int main()
{
	char s1[SIZE];
	char s2[SIZE];

	printf("iki isim girin:  ");
	scanf("%s%s", s1, s2);
	printf("[%s] [%s]\n", s1, s2);
	size_t n;

	printf("kac karakter: ");
	scanf("%zu", &n);

	strncat(s1, s2, n);

	printf("[%s] [%s]\n", s1, s2);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>

#define			SIZE		100

int main()
{
	char s1[] = "gulseren";
	char s2[] = "sercan";

	puts(!strncmp(s1 + 3, s2, 3) ? "esit" : "esit degil");
	puts(!strncmp(s1 + 4, s2 + 1, 2) ? "esit" : "esit degil");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

string literals
pointer arrays
pointer to pointer
	void pointers


void is a type




#define _CRT_SECURE_NO_WARNINGS

int main()
{
	//void x;  //gecersiz void turden nesne olamaz
	//void a[10]; //gecersiz void turden nesne olamaz

	//size_t n = sizeof(void); //gecersiz

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

void func(int);

int main()
{
	func(12) //ifadesinin türü void

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



bir ifadenin (expression) türü void olabilir

türü void olan bir ifade

	a) geri dönüþ deðeri olmayan (void) bir fonksiyona yapýlan çaðrý ifadesi
	b) tür dönüþtürme (type-cast) operatörü ile bir ifadeyi void türüne dönüþtürerek (cast ederek) void türden bir ifade oluþturabiliriz


#define _CRT_SECURE_NO_WARNINGS

int func(int);

int main()
{
	//func(12) //ifadesinin türü int
	(void)func(12) //ifadesinin türü void

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

Deðer gereken yerlerde void türden ifade kullanýlmasý sentaks hatasý


#define _CRT_SECURE_NO_WARNINGS

void func(int);

int main()
{
	//func(12) + 5
	if (func(12)) {  //gecersiz

	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


neden bir ifade tür dönüþtürme operatörü ile void türüne dönüþtürülür.

Böyle bir dönüþüm okuyucuya ve derleyiciye 
bu ifadenin bir deðeri olsa da ben bilerek isteyerek bu deðeri kullanmýyorum 
(bu deðeri discard ediyorum)


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>


int main()
{
	printf("bir karakter girin:  ");
	int c = getchar();

	isupper(c); //yanlis



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>

int func(int);

int main()
{
	(void)printf("merhaba dunya\n");
	(void)func(12);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>

void func(int);

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>

//C - C++
//void func();
void func(void);

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------




//int *
//double *
//void *




//void * türü bir adres türü
//yani bu türden bir deðiþkene sadece ve sadece bir adres
//atamalýsýnýz. asla void * türden bir deðiþkene adres olmayan bir veri atamayýn
//void * türünden bir nesneye herhangi bir nesne adresi atayabiliriz

void * türden bir nesne herhangi türden biþr nesnenin adresini tutabilir.

T void olmayan bir tür olmak üzere
hem C dilinde hem C++ dilinde

T * türünden  void * türüne otomatik tür dönüþümü (implicit type conversion) var
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 34;
	double dval = 32.5474;
	long lval = 895L;
	char str[] = "dogac";
	void *vptr; 

	vptr = &x; //gecerli ve dogru
	vptr = &dval; //gecerli ve dogru
	vptr = &lval; //gecerli ve dogru
	vptr = str; //gecerli ve dogru
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 34;
	double dval = 32.5474;
	long lval = 895L;
	char str[] = "dogac";
	void *vptr = &x;

	*vptr;
	int ival = *vptr; //gecersiz
	//void türden bir adres içerik operatörünün 
	//[] operatörünün operandý yapýlamaz
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	char str[] = "dogac";
	void *vptr = str;  //ok
	void *vp = str + 3;
	//vptr + 3 //gecersiz
	//vptr += 2; //gecersiz
	//++vptr; //gecersiz
	//--vptr; //gecersiz

	//vp - vptr; //gecersiz


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

Dikkat!
void * türü ile const void * türü farklý adres türleri

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10;
	void *vp = &x;
	const void *cvp = &x;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	void *vp = NULL;  //dogru ve gecerli

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

Dikkat!!!

T void olmayan bir tür olmak üzere

C dilinde

void * türünden T * türüne otomatik (implicit)  tür dönüþümü vardýr.
Böyle bir dönüþüme neden olmak C'de yanlýþ kabul edilmez.
Birçok C programcýsý tür dönüþtürme operatörü kullanmadan bu dönüþümü yaptýrýr.

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10;
	void *vptr = &x;
	int *iptr;
	////

	iptr = vptr; 
		//buradaki donusum void * türünden int * türüne ve C'de gecerli (doðru)
	//ancak C++ dilinde bu sentaks hatasý

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 10;
	void *vptr = &x;
	int *iptr;
	////

	iptr = (int *)vptr; 

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


Bir void pointeri (void adresi)

bir baþka pointer ile
	eþitliðini ya da eþitsizliðini 
	== ya da != operatörleriyle sýnayabiliriz

ya da NULL pointer ile 
	eþitliðini ya da eþitsizliðini 
a) == ya da != operatörleriyle sýnayabiliriz
b) örtülü olarak

sýnayabiliriz.

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int x = 120;
	int y = 65;

	void *vp1 = &x;
	void *vp2 = &y;
	void *vp3 = NULL;

	puts(vp1 == vp2 ? "dogru" : "yanlis");
	puts(vp1 == NULL? "dogru" : "yanlis");
	puts(vp3 == NULL? "dogru" : "yanlis");
	puts(vp1 == &x? "dogru" : "yanlis");

	if (vp1) {  //if (vp1 != NULL)
		//...
	}

	if (vp3 == NULL) { //if (!vp3)
		//...
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

generic programming (türden baðýmsýz programlama)


sizeof(x)  =>   char[]


14:45

C'nin bazý std. iþlevleri var ki bunlar "generic" (türden baðýmsýz)

#include <string.h>

//bir bellek bloðunun tüm byte'larýna belirli bir deðeri yazan iþlev

void* memset(void *vp, int val, size_t n);
memcpy
memmove
memchr
memcmp


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100


void *memset2(void *vp, int val, size_t n)
{
	//char *p = vp;
	char *p = (char *)vp;

	while (n--)
		*p++ = (char)val;

	return vp;
}


int main()
{
	int a[SIZE];
	
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);

	memset2(a, 0, sizeof a); //memory clear

	display_array(a, SIZE);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


1111 1111
1111 1111
1111 1111
1111 1111


0000 0001 0000 0001 0000 0001 0000 0001

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100


//sizeof (int) 4 byte

int main()
{
	int x;

	memset(&x, 255, sizeof x);
	
	printf("[1] x = %a\n", x);
	
	memset(&x, 1, sizeof x);
	
	printf("[2] x = %d\n", x);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100


//sizeof (int) 4 byte

int main()
{
	char str[] = "RAIF KARAAHMETOGLU";

	puts(str);
	memset(str + 5, '!', 4);

	puts(str);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



void *memcpy(void *vpdest, const void *vpsource, size_t n);

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100


//sizeof (int) 4 byte

int main()
{
	int a[SIZE];
	int b[SIZE] = { 0 };

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	memcpy(b + 20, a + 40, 20 * sizeof(int));
	display_array(b, SIZE);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100


//sizeof (int) 4 byte

int main()
{
	int a[SIZE];
	int b[SIZE] = { 0 };

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	memcpy(b + 20, a + 40, 20 * sizeof(int));
	display_array(b, SIZE);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100


//sizeof (int) 4 byte

int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	memcpy(a + 20, a + 40, 40 * sizeof(int)); //tanýmsýz davranis
	//týpký strcpy fonksiyonunda olduðu gibi memcpy fonksiyonunda da gönderdiðimiz adreslere iliþin bloklarý
	//ortak bir kesiti olmamalý yani ayný adres hem okuma hem yazma amaçlý kullanýlmamalý

	display_array(a, SIZE);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

void* memset(void *vp, int val, size_t n);
void* memcpy(void *vpdest, const void *vpsource, size_t n);
void* memmove(void *vpdest, const void *vpsource, size_t n);
memchr
memcmp



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100


//sizeof (int) 4 byte

int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	memmove(a + 20, a + 40, 40 * sizeof(int)); //tanýmlý davranis

	display_array(a, SIZE);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100


//sizeof (int) 4 byte

int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	memmove(a + 20, a + 40, 40 * sizeof(int)); //tanýmlý davranis

	display_array(a, SIZE);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100


//sizeof (int) 4 byte

int main()
{
	char str[SIZE] = "gulden";

	//strcpy(str + 3, str);
	memmove(str + 3, str, strlen(str) + 1);

	puts(str);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------









t
u
r
g
u
t
d
e
n
i
z
\0

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100


//deniz\0


char *strPrepend(char *pdest, const char *psource)
{
	size_t len_source = strlen(psource);
	memmove(pdest + len_source, pdest, strlen(pdest) + 1);
	memcpy(pdest, psource, len_source);
	return pdest;
}


int main()
{
	char s1[SIZE];
	char s2[SIZE];

	printf("iki isim giriniz: ");
	scanf("%s%s", s1, s2); //deniz  turgut

	strPrepend(s1, s2); 

	printf("[%s]\n", s1); //turgutdeniz



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


void *memmove_(void *vpdest, const void *vpsource, size_t n)
{
	char *pdest = (char *)vpdest;
	const char *psource = (const char *)vpsource;

	if (pdest < psource) {
		while (n--)
			*pdest++ = *psource++;
	}
	else {
		pdest += n;
		psource += n;
		while (n--)
			*--pdest = *--psource;
	}

	return vpdest;
}


memchr generic search fonksiyonu

bir bellek bloðunda bir byte deðerini arýyor

void* memchr(const void *vp, int c, size_t n);






#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char str[] = "0123456789";

	char *p = (char *)memchr(str, '5', sizeof(str));
	if (!p) {
		printf("bulunamadi\n");
	}
	else {
		printf("bulundu %d indisli oge\n", p - str);
	}

}

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"
#include <stdlib.h>


#define			BUFFER_SIZE		100

int main()
{
	unsigned char buffer[BUFFER_SIZE];
	
	randomize();

	for (int i = 0; i < BUFFER_SIZE; ++i) {
		buffer[i] = rand() % 256;
		printf("%u ", buffer[i]);
	}

	int x;

	printf("aranan degeri giriniz: ");
	scanf("%d", &x);

	unsigned char *ptr = (unsigned char *)memchr(buffer, x, BUFFER_SIZE);
	if (ptr) {
		printf("bulundu dizinin %d indisli ogesi %u\n", ptr - buffer, *ptr);
	}
	else {
		printf("bulunamadi\n");
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



int memcmp(const void *vp1, const void *vp2, size_t n);

x y

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"
#include <stdlib.h>


#define			BUFFER_SIZE		100

void* memchr(const void *vp, int val, size_t n)
{
	const char *p = vp;
	while (n--) {
		if (*p == (char)val)
			return (char *)p;
		++p;
	}

	return NULL;
}





int main()
{
	unsigned char buffer[BUFFER_SIZE];
	
	randomize();

	for (int i = 0; i < BUFFER_SIZE; ++i) {
		buffer[i] = rand() % 256;
		printf("%u ", buffer[i]);
	}

	int x;

	printf("aranan degeri giriniz: ");
	scanf("%d", &x);

	unsigned char *ptr = (unsigned char *)memchr(buffer, x, BUFFER_SIZE);
	if (ptr) {
		printf("bulundu dizinin %d indisli ogesi %u\n", ptr - buffer, *ptr);
	}
	else {
		printf("bulunamadi\n");
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"
#include <stdlib.h>


#define			BUFFER_SIZE		100

void* memchr2(const void *vp, int val, size_t n)
{
	const char *p = vp;
	while (n--) {
		if (*p == (char)val)
			return (char *)p;
		++p;
	}

	return NULL;
}





int main()
{
	int a[] = { 2, 5, 7, 9, 12, -3, 7, 4 };
	int b[] = { 2, 5, 7, 9, 12, -3, 7, 4 };


	if (!memcmp(a, b, sizeof(a))) {
		printf("iki dizi esit\n");
	}
	else {
		printf("iki dizi esit degil\n");
	}

	++b[4];

	if (!memcmp(a, b, sizeof(a))) {
		printf("iki dizi esit\n");
	}
	else {
		printf("iki dizi esit degil\n");
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"
#include <stdlib.h>


#define			BUFFER_SIZE		100

int memcmp(const void *vp1, const void *vp2, size_t n)
{
	const unsigned char *p1 = vp1;
	const unsigned char *p2 = vp2;

	while (n--) {
		if (*p1 != *p2)
			return (int)*p1 - (int)*p2;
			//return *p1 - *p2;
		++p1;
		++p2;
	}

	return 0;
}

void* memchr2(const void *vp, int val, size_t n)
{
	const char *p = vp;
	while (n--) {
		if (*p == (char)val)
			return (char *)p;
		++p;
	}

	return NULL;
}





int main()
{
	int a[] = { 2, 5, 7, 9, 12, -3, 7, 4 };
	int b[] = { 2, 5, 7, 9, 12, -3, 7, 4 };


	if (!memcmp(a, b, sizeof(a))) {
		printf("iki dizi esit\n");
	}
	else {
		printf("iki dizi esit degil\n");
	}

	++b[4];

	if (!memcmp(a, b, sizeof(a))) {
		printf("iki dizi esit\n");
	}
	else {
		printf("iki dizi esit degil\n");
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"
#include <stdlib.h>


#define			BUFFER_SIZE		100

int memcmp(const void *vp1, const void *vp2, size_t n)
{
	const unsigned char *p1 = vp1;
	const unsigned char *p2 = vp2;

	while (n--) {
		if (*p1 != *p2)
			return (int)*p1 - (int)*p2;
			//return *p1 - *p2;
		++p1;
		++p2;
	}

	return 0;
}

void* memchr2(const void *vp, int val, size_t n)
{
	const char *p = vp;
	while (n--) {
		if (*p == (char)val)
			return (char *)p;
		++p;
	}

	return NULL;
}





int main()
{
	int a[] = { 2, 5, 7, 9, 12, -3, 7, 4 };
	int b[] = { 2, 5, 7, 9, 12, -3, 7, 4 };


	if (!memcmp(a, b, sizeof(a))) {
		printf("iki dizi esit\n");
	}
	else {
		printf("iki dizi esit degil\n");
	}

	++b[4];

	if (!memcmp(a, b, sizeof(a))) {
		printf("iki dizi esit\n");
	}
	else {
		printf("iki dizi esit degil\n");
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



16:20


//generic bazý fonksiyonlarýn tasarýmý

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		20

//türden baðýmsýz bir diziyi reverse edecek fonksiyon yazýlabilir mi?

void* greverse(void *vpa, size_t size, size_t szf)
{
	char *p = vpa;
	for (size_t i = 0; i < size / 2; ++i) {
		//swap p[i]  <=> p[size - 1 - i]
		gswap(p + i * szf, p + (size - 1 - i) * szf, szf);
	}

	return vpa;
}

int main()
{
	int a[SIZE];
	double b[] = { .1, 1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9 };
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);

	greverse(a, SIZE, sizeof(*a));
	//greverse(a, SIZE, sizeof a[0]);
	//greverse(a, SIZE, sizeof int);
	greverse(b, asize(b), sizeof(*b));

	display_array(a, SIZE);
	for (size_t i = 0; i < asize(b); ++i) {
		printf("%f ", b[i]);
	}

	printf("\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		20

//türden baðýmsýz bir diziyi reverse edecek fonksiyon yazýlabilir mi?

void* greverse(void *vpa, size_t size, size_t szf)
{
	char *p = vpa;
	char *pe = p + size * szf;

	while (p < pe) {
		pe -= szf;
		gswap(p, pe, szf);
		p += szf;
	}

}

int main()
{
	int a[SIZE];
	double b[] = { .1, 1.2, 2.3, 3.4, 4.5, 5.6, 6.7, 7.8, 8.9 };
	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);

	greverse(a, SIZE, sizeof(*a));
	//greverse(a, SIZE, sizeof a[0]);
	//greverse(a, SIZE, sizeof int);
	greverse(b, asize(b), sizeof(*b));

	display_array(a, SIZE);
	for (size_t i = 0; i < asize(b); ++i) {
		printf("%f ", b[i]);
	}

	printf("\n");

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

gsearch bir dizide verilen bir deðeri arayan fonksiyon

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		20

void* gsearch(const void *vpa, size_t size, size_t szf, const void *vptr)
{
	const char *p = vpa;

	for (size_t i = 0; i < size; ++i) {
		if (!memcmp(p + i * szf, vptr, szf)) {
			return (char *)(p + i * szf);
		}
	}

	return NULL;
}


int main()
{
	int a[SIZE];
	int sval;
	int *p;

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	printf("aranacak degeri giriniz: ");
	scanf("%d", &sval);

	if ((p = gsearch(a, SIZE, sizeof *a, &sval)) == NULL) {
		printf("bulunamadi\n");
	}
	else {
		printf("bulundu dizinin %d indisli ogesi deger = %d\n", p - a, *p);
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		20

void* gsearch(const void *vpa, size_t size, size_t szf, const void *vptr)
{
	const char *p = vpa;

	while (size--) {
		if (!memcmp(p, vptr, szf))
			return (char *)p;

		p += szf;
	}

	return NULL;
}


int main()
{
	int a[SIZE];
	int sval;
	int *p;

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	printf("aranacak degeri giriniz: ");
	scanf("%d", &sval);

	if ((p = gsearch(a, SIZE, sizeof *a, &sval)) == NULL) {
		printf("bulunamadi\n");
	}
	else {
		printf("bulundu dizinin %d indisli ogesi deger = %d\n", p - a, *p);
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

Türden baðýmsýz bir sýralama (sort) fonksiyonu yazýlabilir mi?

yani öyle bir fonksiyon olsun ki bir dizinin türünü bilmeden
o diziyi (kucukten buyuge) siralasin.

1111 1111  ???? 0101
1111 1111
1111 1111
1111 1111


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		20

//void greverse(void *vpa, size_t size, size_t sz)
//{
//	char *ps = (char *)vpa;
//	char *pe = ps + size * sz;
//
//	while (ps < pe) {
//		pe -= sz;
//		gswap(ps, pe, sz);
//		ps += sz;
//	}
//}


//void greverse(void *vpa, size_t size, size_t sz)
//{
//	//char *p = vpa;
//	char *p = (char *)vpa;
//
//	for (size_t i = 0; i < size / 2; ++i) {
//		//dizi[i] <=> dizi[size - 1 - i]
//		gswap(p + i * sz, p + (size - 1 - i) * sz, sz);
//	}
//
//}


int main()
{

}

Dikkat!

void ** türü void * olan bir nesnenin adresi olan türdür.

yani 

void *vptr;

&vptr

ifadesinin türü void ** 

void ** türden bir deðiþkene asla bir baþak adres tamayýn (kaopyalamayýn)

void ** generic bir tür deðil
ve void **

void * türünün kýsýtlamalarýna tabi deðil


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

int main()
{
	int x = 10;
	double dval = 3.4;

	void *vp = &x;

	void **vptr = &vp;

	//*vptr //vp deðiþkeninin kendisi
	*vptr = &dval; //bu atama vp deðiþkenine yapýlýyor..

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"


void func(int *p);

int main()
{
	int x;

	func(&x);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"


void func(int **p);

int main()
{
	int *ptr;

	func(&ptr);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"


void func(void **p)
{
	//*p =
}

int main()
{
	void *vp;

	func(&vp);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"


int x = 10;
double dval = 2.3;
char str[] = "mustafa";

int main()
{
	void *vpa[] = { &x, &dval, str };
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"


void **func(void);

int main()
{
	void **vpa[10];
	//
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

function pointers (iþlev göstericileri)
=======================================


object pointers
function pointers

Herhangi bir sistemde bir object pointer sizeof deðeri ile bir function pointer sizeof deðeri
ayný olmak zorunda deðil


bir fonlsiyon adresi þöyle bir soyutlama

bir fonksþyonun adresi C'de iki þekilde elde edilebilir:

1) &operatörünün operandý fonksiyon ismi yapýlýr
2) Doðrudan bir ifade içinde bir fonksiyonun ismi kullanýlýr
derleyici dilin kurallarý gereði söz konusu ifadeyi fonksiyonun adresine dönüþtürür

fonksiyon isminin derleyici tarafýndan (örtülü olarak) fonksiyonun adresine dönütürülmesine
fucntion to pointer conversion

fonksiyon adresi gereken bir yerde

	&func
	yazmak ile sadece
	func

arasýnda bir fark yok!!!!!



C'de her ifadenin bir türü vardýr
fonksiyon adreslerinin de bir türü vardýr.

bir fonksiyon adresi türü
	fonk.unun geri dönüþ deðeri türü ve parametre deðiþkenlerinin türü ile iliþkili

int func(int);

&func => int (*)(int);

standart strcmp iþlevinin adresi olan türü yazýnýz:
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"

int foo(int);

//ismi fptr olan deðiþkene foo iþlevinin adresiyle ilk deðer verin

int main()
{
	//int(*fptr)(int) = &foo;
	int(*fptr)(int) = foo;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include "nutility.h"


//ismi fp olan deðiþkene standart strchr iþlevinin adresiyle ilk deðer verin
//tanýmladýðýnýz fp deðiþkenine strrchr iþlevinin adresini atayýn:


int main()
{
	char *(*fp)(const char *, int) = &strchr;
	//fp = strrchr;
	fp = &strrchr;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <ctype.h>


int main()
{
	int(*fp)(int) = &isupper;

	///
	fp = NULL;

	///

	fp = &isdigit;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

fonksiyon çaðrý operatörü ve fonksiyon adresleri

		func(12, 45)
---------------------------

operandý bir fonksiyon adresi olan operatör




#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <ctype.h>

void func(void)
{
	printf("func cagrildi\n");
}

int main()
{
	func();
	(&func)();

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <ctype.h>

void func(void)
{
	printf("func cagrildi\n");
}

int main()
{
	void(*fptr)(void) = func;

	fptr();

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


		f();

a) f bir fonksiyonun ismidir ve f fonksiyonu çaðrýlmaktadýr.
b) f bir iþlevsel makrodur. BU durumda öniþlemci programý bir "replacement" iþlemi yapar
c) f bir fonksiyon göstericisi deðiþkenin ismidir. Buy durumda çaðrýlan f'in deðeri olan adresteki
(f'in gösterdiði) fonksiyondur.



fptr();

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <ctype.h>

void f1(void)
{
	printf("f1 cagrildi\n");
}

void f2(void)
{
	printf("f2 cagrildi\n");
}

void f3(void)
{
	printf("f3 cagrildi\n");
}

int main()
{
	void(*fp)(void) = &f1;

	fp();
	fp = &f2;
	fp();
	fp = &f3;
	fp();

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

int x = 24;
int *iptr = &x;

*iptr

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <ctype.h>

void func(void)
{
	printf("func cagrildi\n");
}

int main()
{
	void(*fp)(void) = &func;

	fp();
	(*fp)();


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

bazý programcýlar fonksiyon pointer deðiþkeni ile fonksiyon çaðrýsý yaptýklarýnda
söz konusu deðiþken isminin (bir fonksiyon ismi deðil de) bir fon. göstericisi olduðu
vurgusunu yapma için fonk. göstericisini * operatörünün operandý ayparak
fonk. çaðrýsýný gerçekleþtirirler

fptr();

yazmak yerine

(*fptr)();

yazarlar
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <ctype.h>

void func(void)
{
	printf("func cagrildi\n");
}

int main()
{
	func();
	(&func)();
	(*func)();

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

*func()

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <ctype.h>

int foo(void);

int main()
{
	(); //gecersiz
	//icerik operatörünün operandý adres degil

}

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <string.h>
#include <ctype.h>

int *foo(void);

int main()
{
	*foo() = 45;
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


fonksiyon adres türleri kimi zaman çok karmaþýk bildirimlere konu olacaðý için
C kütüphanelerinde birçok durumda 
typedef bildirimi ile
bir fonksiyon adresi türüne eþ isim verilir.
Çünkü tür eþ ismi (type alias) kullanýlmaz ise
bildirimi yazmak ve/veya okumak çok zor hale gelebilir.

fonksiyon göstericileri ve typedef bildirimleri

typedef bildirimlerinin altýn kuralýný hatýrlayalaým

i) hangi türe eþ isim verecekseniz o türden bir deðiþken tanýmlayýn
ii) tanýmlamanýn baþýna typedef anahtar sözcüðünü yazýn
iii) deðiþken ismi tür eþ ismi olarak deðiþtirin

typedef int *IPTR;

typedef int *PArray[10];
-------------------------------

strcmp iþlevinin adresi olan türe CmpFunc eþ ismini verin

typedef int (*CmpFunc)(const char *, const char *);

#include <string.h>
#include <stdio.h>

//Fsp

typedef char *(*Fsp)(const char *, int);


//[1] strchr iþlevinin adresi ile ilk degerini alan fptr isimli deðiþkeni tanýmlayýn
//[2] fptr deðiþkeninin adresi ile ilk deðerini alan fpp isimli pointer deðiþkeni tanýmlayýn
//[3] 10 elemanlý elemanlarý fptr gibi deðiþkenler olan fa dizisini tanýmlayýn
//[4] geri dönüþ deðeri olmayan parametresi fptr'nin türünden olan ismi foo olan fonksiyonu bildirin
//[5] geri dönüþ deðeri fptr'nin türü olan parametresi de fptr'nin türü olan ismi func olan fonksiyonu bildirin



//void foo(char *(*fp)(const char *, int));
void foo(Fsp);


//char *(*func(char *(*fp)(const char *, int)))(const char *, int);
Fsp func(Fsp);

int main()
{
	//char *(*fptr)(const char *, int) = strchr;
	Fsp fptr;
	//char *(**fpp)(const char *, int) = &fptr;
	Fsp *fpp = &fptr;
	//char *(*fa[10])(const char *, int) = { &strchr, &strrchr };
	Fsp a[10] = { strchr, &strrchr };

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
6 HAZÝRAN 2020 cumartesi	

#include <ctype.h>
#include <string.h>

typedef int(*Fcmp)(const char *, const char*);

Fcmp foo(Fcmp);

int main()
{
	
	Fcmp fp1 = strcmp, fp2 = strcoll;
	Fcmp *fpp = &fp1;

	Fcmp a[5] = { strcmp, strcoll };

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <ctype.h>
#include <string.h>

typedef int(*Fcmp)(const char *, const char*);


//void f1(int(*fp)(const char *, const char *));
void f1(Fcmp);

//int(*f2(int(*fp)(const char *, const char *)))(const char *, const char *);
Fcmp f2(Fcmp);


int main()
{
	//int(*fptr)(const char *, const char *) = strcmp;
	Fcmp fptr = strcmp;
	//------------------------------------------------
	//int(*fa[3])(const char *, const char *) = { strcmp, strcoll };
	Fcmp a[3] = { strcmp, strcoll };

	//int(**fpp)(const char *, const char *) = &fptr;
	Fcmp *fpp = &fptr;


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include <ctype.h>
#include <string.h>



void func(void(*fp)(void))
{
	printf("func cagrildi ve func kendisine adresi gonderilen fonksiyonu cagiriyor\n");
	//fp();
	(*fp)();
	printf("\n---------------------------------------\n ");
}


void f1()
{
	printf("f1 cagrildi\n");
}

void f2()
{
	printf("f2 cagrildi\n");
}

void f3()
{
	printf("f3 cagrildi\n");
}

int main()
{
	func(&f1);
	//
	func(&f2);
	func(f2);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



	func(foo());
	-----------------


	func(&foo);

#include <ctype.h>
#include <stdio.h>

void display_chars(const char *pfname, int(*fp)(int))
{
	printf("%s islevinin true deger verdigi karakterler\n", pfname);

	for (int i = 0; i < 128; ++i) {
		if (fp(i))
			putchar(i);
	}
	printf("\n---------------------------------------\n");
}

int main()
{
	display_chars("isupper", &isupper);
	display_chars("islower", &islower);
	display_chars("ispunct", &ispunct);
	//...
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <ctype.h>
#include <stdio.h>

void display_chars(const char *pfname, int(*fp)(int))
{
	printf("%s islevinin true deger verdigi karakterler\n", pfname);

	for (int i = 0; i < 128; ++i) {
		if (fp(i))
			putchar(i);
	}
	printf("\n---------------------------------------\n");
}

int main()
{
	display_chars("isupper", isupper);
	display_chars("islower", islower);
	display_chars("ispunct", ispunct);
	//...
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


void 
qsort(void *vpa, size_t size, size_t sz, int (*fp)(const void*, const void *));

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"

#define			SIZE		100

//taþma olabilir dikkat
int icmp(const void *vp1, const void *vp2)
{
	return *(int *)vp1 - *(int *)vp2
}

//int icmp(const void *vp1, const void *vp2)
//{
//	if (*(int *)vp1 > *(int *)vp2)
//		return 1;
//
//	if (*(int *)vp1 < *(int *)vp2)
//		return -1;
//
//	return 0;
//}



int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);
	
	qsort(a, SIZE, sizeof(int), &icmp);
	
	display_array(a, SIZE);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"

#define			SIZE		100


int dcmp(const void *vp1, const void *vp2)
{
	double d1 = *(double *)vp1;
	double d2 = *(double *)vp2;

	if (d1 > d2)
		return 1;
	if (d1 < d2)
		return -1;
	return 0;
}

int main()
{
	double a[SIZE];

	randomize();

	for (int i = 0; i < SIZE; ++i) {
		a[i] = (double) rand() / RAND_MAX;
	}

	//qsort(a, SIZE, sizeof(*a), dcmp);
	//qsort(a, SIZE, sizeof(double), dcmp);
	qsort(a, SIZE, sizeof(a[0]), dcmp);

	for (int i = 0; i < SIZE; ++i) {
		printf("%f\n", a[i]);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"

#define			SIZE		100


int dcmp(const void *vp1, const void *vp2)
{
	double d1 = *(double *)vp1;
	double d2 = *(double *)vp2;

	return d1 > d2 ? 1 :
		d1 < d2 ? -1 : 0;
}

int main()
{
	double a[SIZE];

	randomize();

	for (int i = 0; i < SIZE; ++i) {
		a[i] = (double) rand() / RAND_MAX;
	}

	//qsort(a, SIZE, sizeof(*a), dcmp);
	//qsort(a, SIZE, sizeof(double), dcmp);
	qsort(a, SIZE, sizeof(a[0]), dcmp);

	for (int i = 0; i < SIZE; ++i) {
		printf("%f\n", a[i]);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include "nutility.h"

#define			SIZE		100


//bubble sort algoritmasýnýn generic implementasyonu
//dikkat evde mutalak tekrar ediniz
//youtube'dan necati'nin generic partisyon implementasyonu videosunu izleyin

//typedef int(*FCMP)(const void *, const void *);

//void gbsort(void *vpa, size_t size, size_t sz, FCMP fp)
//{
//	
//}

int icmp(const void *vp1, const void *vp2)
{
	if (*(int *)vp1 > *(int *)vp2)
		return 1;

	if (*(int *)vp1 < *(int *)vp2)
		return -1;

	return 0;
}

void gbsort(void *vpa, size_t size, size_t sz, int (*fp)(const void *, const void *))
{
	char *p = vpa;

	for (size_t i = 0; i < size - 1; ++i) {
		for (size_t k = 0; k < size - 1 - i; ++k) {
			// if (p[k] > p[k + 1])  swap(&p[k], &p[k + 1])
			if (fp(p + k * sz, p + (k + 1) * sz) > 0)
				gswap(p + k * sz, p + (k + 1) * sz, sz);			
		}
	}
}


int main()
{
	int a[SIZE];

	randomize();
	set_random_array(a, SIZE);
	display_array(a, SIZE);

	gbsort(a, SIZE, sizeof(int), &icmp);

	display_array(a, SIZE);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#include "nutility.h"
#include <stdlib.h>
#include <stdio.h>

#define			SIZE		100

void gbsort(void *vpa, size_t size, size_t sz, int(*fp)(const void *, const void *))
{
	char *p = vpa;

	for (size_t i = 0; i < size - 1; ++i) {
		for (size_t k = 0; k < size - 1 - i; ++k) {
			// if (p[k] > p[k + 1])  swap(&p[k], &p[k + 1])
			if (fp(p + k * sz, p + (k + 1) * sz) > 0)
				gswap(p + k * sz, p + (k + 1) * sz, sz);
		}
	}
}

int dcmp(const void *vp1, const void *vp2)
{
	double d1 = *(double *)vp1;
	double d2 = *(double *)vp2;

	return d1 > d2 ? 1 :
		d1 < d2 ? -1 : 0;
}

int main()
{
	double a[SIZE];

	randomize();

	for (int i = 0; i < SIZE; ++i) {
		a[i] = (double)rand() / RAND_MAX;
	}

	//qsort(a, SIZE, sizeof(*a), dcmp);
	//qsort(a, SIZE, sizeof(double), dcmp);
	gbsort(a, SIZE, sizeof(a[0]), dcmp);

	for (int i = 0; i < SIZE; ++i) {
		printf("%f\n", a[i]);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#include <stdlib.h>
#include <stdio.h>
#include "nutility.h"

//burada qsort iþlevine argüman olarak gönderilecek call-back fonksiyonun tanýmý yapýlacak
// kendiniz yazmaya calisin hemen pes etmeyin

int main()
{
	const char *p[] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati", "ferhunde", "sirri", "tufancan", "meryem", "dogac", "veysel", "asim",
	"pinar" };

	//burada standart qsort iþlevine çaðrý yapacaksýnýz

	for (size_t i = 0; i < asize(p); ++i)
		printf("%s ", p[i]);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>
#include "nutility.h"


#define			SIZE		100


int icmp(const void *vp1, const void *vp2)
{
	if (*(int *)vp1 > *(int *)vp2)
		return 1;

	if (*(int *)vp1 < *(int *)vp2)
		return -1;

	return 0;
}

int main()
{
	int a[SIZE];
	int sval;
	int *p;

	randomize();
	set_random_array(a, SIZE);
	qsort(a, SIZE, sizeof(*a), icmp);
	display_array(a, SIZE);

	printf("aranacak degeri giriniz ");
	scanf("%d", &sval);
	//..

	if ((p = bsearch(&sval, a, SIZE, sizeof(*a), &icmp)) != NULL) {
		printf("bulundu... dizinin %d indisli ogesi (%d)\n", p - a, *p);
	}
	else {
		printf("bulunamadi\n ");
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>
#include "nutility.h"


#define			SIZE		100


int icmp(const void *vp1, const void *vp2)
{
	if (*(int *)vp1 > *(int *)vp2)
		return 1;

	if (*(int *)vp1 < *(int *)vp2)
		return -1;

	return 0;
}

int main()
{
	int a[SIZE];
	int sval;
	int *p;

	randomize();
	set_random_array(a, SIZE);
	qsort(a, SIZE, sizeof(*a), icmp);
	display_array(a, SIZE);

	printf("aranacak degeri giriniz ");
	scanf("%d", &sval);
	//..

	p = (int *)bsearch(&sval, a, SIZE, sizeof(*a), &icmp);

	if (p) {
		printf("bulundu... dizinin %d indisli ogesi (%d)\n", p - a, *p);
	}
	else {
		printf("bulunamadi\n ");
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



function pointer arrays

#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>
#include "nutility.h"


int main()
{
	void(*fa[10])(void);
	//fa elemanlarý fp gibi olan 10 elemanlý bir dizi
	void(*fp)(void);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>
#include "nutility.h"

void f1(void)
{
	printf("f1 cagrildi\n");
}

void f2(void)
{
	printf("f2 cagrildi\n");
}


void f3(void)
{
	printf("f3 cagrildi\n");
}


void f4(void)
{
	printf("f4 cagrildi\n");
}

int main()
{
	void(*fa[])(void) = { f1, f2, f3, f4 };

	printf("asize(fa) = %zu\n", asize(fa));

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>
#include "nutility.h"

void f1(void)
{
	printf("f1 cagrildi\n");
}

void f2(void)
{
	printf("f2 cagrildi\n");
}


void f3(void)
{
	printf("f3 cagrildi\n");
}


void f4(void)
{
	printf("f4 cagrildi\n");
}

int main()
{
	void(*fa[])(void) = { f1, f2, f3, f4 };

	for (size_t i = 0; i < asize(fa); ++i)
		fa[i]();
		//(*fa[i])();

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>
#include "nutility.h"


typedef void(*FPTR)(void);

void f1(void)
{
	printf("f1 cagrildi\n");
}

void f2(void)
{
	printf("f2 cagrildi\n");
}


void f3(void)
{
	printf("f3 cagrildi\n");
}


void f4(void)
{
	printf("f4 cagrildi\n");
}

int main()
{
	FPTR fa[] = { f1, f2, f3, f4 };

	for (size_t i = 0; i < asize(fa); ++i)
		fa[i]();
		//(*fa[i])();

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>
#include "nutility.h"


typedef void(*FPTR)(void);

void jump(void)
{
	printf("savasci zipliyor\n");
}

void fight(void)
{
	printf("savasci savasiyor\n");
}

void run(void)
{
	printf("savasci kosuyor\n");
}


void dance(void)
{
	printf("savasci dans ediyor\n");
}

void sleep(void)
{
	printf("savasci uyuyor\n");
}


int main()
{
	FPTR a[] = { &jump, &run, &fight, &dance, &sleep };

	for (size_t i = 0; i < asize(a); ++i) 
		a[i]();
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>
#include "nutility.h"
#include <conio.h>


typedef void(*FPTR)(void);

void jump(void)
{
	printf("savasci zipliyor\n");
}

void fight(void)
{
	printf("savasci savasiyor\n");
}

void run(void)
{
	printf("savasci kosuyor\n");
}


void dance(void)
{
	printf("savasci dans ediyor\n");
}

void sleep(void)
{
	printf("savasci uyuyor\n");
}


int main()
{
	FPTR a[] = { &jump, &run, &fight, &dance, &sleep };

	while (1) {
		a[rand() % asize(a)]();
		_getch();
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <ctype.h>
#include "nutility.h"
#include <string.h>



//yine tipik mülakat sorusu
//bir fonksiyonun ismiyle çaðrýlmasý


typedef int(*FPTEST)(int);

int main()
{
	int c;
	char entry[40];
	const char *pnames[] = { "isupper", "islower", "isalpha", "isdigit", "isalnum", "isxdigit",
	"isspace", "isblank", "ispunct", "isprint", "isgraph", "iscntrl" };

	FPTEST fa[] = { isupper, islower, isalpha, isdigit, isalnum, isxdigit,
	isspace, isblank, ispunct, isprint, isgraph, iscntrl};





	printf("bir karakter giriniz: ");
	c = getchar();  //a
	printf("hangi test yapilsin: "); 
	scanf("%s", entry); //islower

	size_t i;

	for (i = 0; i < asize(pnames) && strcmp(pnames[i], entry); ++i)
		;

	if (i == asize(pnames)) {
		printf("%s isimli bir fonksiyonumuz yok\n", entry);
	}
	else if (fa[i](c) != 0) {
		printf("%c karakteri icin %s testi sonucu dogru\n ", c, entry);
	}
	else
		printf("%c karakteri icin %s testi sonucu yanlis\n ", c, entry);


	//a karakteri icin islower testi sonucu dogru
	//T karakteri icin islower testi sonucu yanlis
	

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
//necati.h


#pragma once

//typedef bildirimine dikkat!
typedef void(*Fptr)(void);


//func islevinin default (varsayýlan) davranisi foo islevini cagirmak
void func(void);


//set_func islevi func islevinin varsayýlan davranisini degistirir
//parametresi func'in cagrimasýný istediðiniz fonksiyonun (callback) adresi
//geri dönüþ deðeri func islevinin daha önceki çaðýrdýðý fonksiyonun adresi

Fptr set_func(Fptr);


//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
//necati.c


#include "necati.h"
#include <stdio.h>


static void foo(void)
{
	printf("foo cagrildi\n");
}


static Fptr fg = &foo;


void func(void)
{
	fg();
}

Fptr set_func(Fptr f)
{
	Fptr temp = fg;

	fg = f;

	return temp;
}


//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


//test main
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "necati.h"

void f(void)
{
	printf("f islevi cagrildi\n");
}


int main()
{
	func();  //func islevinin default davranisi foo islevini cagirmak oldugundan burada foo cagrilacak

	Fptr fp = set_func(&f);
	//arrtik func cagrildiginda func foo islevini degil f islevini cagiracak
	func();  //simdi f cagrilacak
	//
	set_func(fp); //artik func cagrildiginda func yine foo'yu cagiracak

	func(); //simdi foo cagrilacak

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
//necati.h


#pragma once

//typedef bildirimine dikkat!
typedef void(*Fptr)(void);


//record iþlevi kendisine gönderilen adresteki fonksiyonu kayýda alýr
void frecord(Fptr);

//func isleci cagrildiginda func islevi frecord isleviyle
//o zamana kadar kayit edilmiþ olan tüm fonksiyonlarý stack sistemiyle (lifo)  çaðýrýr

void func(void);


//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------




//necati.c
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#include "necati.h"
#include <stdio.h>

#define  MAX_SIZE    10


static Fptr fga[MAX_SIZE];
static int gsize = 0;


void func(void) 
{
	for (int i = gsize - 1; i >= 0; --i) {
		fga[i]();
	}
	printf("--------------------------------------------------------------\n ");
}

void frecord(Fptr fp)
{
	if (gsize == MAX_SIZE) {
		printf("ne yazik ki kayit edilecek fonksiyon sayisi yeterli degil\n");
		return;
	}

	fga[gsize++] = fp;
}



//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
//main.c

#define _CRT_SECURE_NO_WARNINGS

#include "necati.h"
#include <stdio.h>

void f1(void)
{
	printf("f1 islevi cagrildi\n");
}

void f2(void)
{
	printf("f2 islevi cagrildi\n");
}

void f3(void)
{
	printf("f3 islevi cagrildi\n");
}

void f4(void)
{
	printf("f4 islevi cagrildi\n");
}

void f5(void)
{
	printf("f5 islevi cagrildi\n");
}


int main()
{
	frecord(&f1);
	frecord(&f2);
	frecord(&f3);

	func();  //f3 f2 f1 cagrilacak

	frecord(f4);
	frecord(f5);

	func(); //f5 f4 f3 f2 f1
	//fdel(f2);
	//fdel(f3);


	func(); // f5 f4 f1
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

multi-dimensional arrays

int a[10][20];


int a[10][20][50];
----------------------------------

çok boyutlu diziler

C'de çok boyutlu dizi yoktur.



int main()
{
	int a[10]; //a 10 elemanlý bir dizi
	int b[20][30]; //b 20 elemanlý bir dizi
	int c[5][9][16]; //c 5 elemanlý bir dizi
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


int main()
{
	//a elemanlarý 20 elemanlý int dizi olan 10 elemanlý bir dizi
	int a[10][20];
	int b[20];

	//a'nýn her bir elemaný b gibi diziler
	//a[0]
	//...
	//a[9]
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



int main()
{
	//elamanlarý 20 elemanlý double dizi olan a isimli 10 elemanlý bir dizi tanýmlayýn
	double a[10][20];
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



int main()
{
	int a[5][3];

	a[2][1] = 76;
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



int main()
{
	int a[5];
	int b[10][20];
	//soru
	// a'nýn türü nedir?  int [5]
	// b'nin türü nedir?  int [10][20]

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



//int [20]

typedef int array20[20];

int main()
{
	//int a[10][20];
	array20 ar[10];
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

16:12'de devam

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[10][20];

	printf("sizeof(a)         = %zu\n", sizeof(a));   //800
	printf("sizeof(a[0])      = %zu\n", sizeof(a[0])); //80
	printf("sizeof(a[0][0])   = %zu\n", sizeof(a[0][0]));  //4

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[10][20];  //int [10][20]
	int b[5][8];    //int [5][8]
	int c[12][40];
	int d[6][20];

	//a ve d dizilerinin elemanlarýnýn türleri ayný 
	//boyutlarý farkli


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>


int main()
{
	int a[10][20];  
	int b[5][8];    

	//a ve b dizilerinin elemanlarýnýn elemanlarý ayný türden (int)


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//warning C4047 : 'initializing' : 'int *' differs in levels of indirection from 'int (*)[20]'

int main()
{
	int a[10][20];  
	int *ptr = a;  //yanlýþ C++'da sentaks hatasi

	++ptr;




}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//warning C4047 : 'initializing' : 'int *' differs in levels of indirection from 'int (*)[20]'

int main()
{
	int a[10][20];  

	//eger amacýnýz int *ptr'nin a'nýn ilk elemanýnýn ilk elemanýný göstermesini saðlamak ise
	//bunu yapmanýn 3 yolu avr
	//int *ptr = &a[0][0];
	//int *ptr = a[0]; //array to pointer conversion 
	int *ptr = (int *)a;

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------



#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//warning C4047 : 'initializing' : 'int *' differs in levels of indirection from 'int (*)[20]'

int main()
{
	int a[10][20];  

	a // ==>  int (*)[20]
	&a[0]


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//warning C4047 : 'initializing' : 'int *' differs in levels of indirection from 'int (*)[20]'

int main()
{
	int a[10][64];
	int(*ptr)[64] = a;
	//int(*ptr)[64] = &a[0];

	for (int i = 0; i < 10; ++i) {
		printf("%p   %p   %p\n", &a[i], a + i, ptr++);
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//warning C4047 : 'initializing' : 'int *' differs in levels of indirection from 'int (*)[20]'

int main()
{
	int a[5][20];
	int(*p)[20] = a;



	//a[1]
	//*(a + 1)
	//p[1]
	//*(p + 1)



}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

//warning C4047 : 'initializing' : 'int *' differs in levels of indirection from 'int (*)[20]'

int main()
{
	int a[5][20];
	

	(*(a + 2))[6] = 9;
	a[2][6]



	//a[1]
	//*(a + 1)
	//p[1]
	//*(p + 1)


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

çok boyutlu dizilere ilk deðer vermek....


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int a[4][5] = {
		{1, 3, 5, 7, 9},
		{2, 4, 6, 8, 3},
		{5, 5, 5, 5, 5},
		{1, 2, 4, 3, 7},
	};

	for (int i = 0; i < 4; ++i) {
		for (int k = 0; k < 5; ++k) {
			printf("%d ", a[i][k]);
		}
		printf("\n");
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int a[4][5] = {
		{1, 3, 5},
		{2, 4, 6, 8, 3},
		{5, 5,},
		{1, 2, 4, 3, 7},
	};

	for (int i = 0; i < 4; ++i) {
		for (int k = 0; k < 5; ++k) {
			printf("%d ", a[i][k]);
		}
		printf("\n");
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int a[4][5] = {
		{1, 3, 5},
		{2, 4, 6, 8, 3},
		{5, 5,},
	};

	for (int i = 0; i < 4; ++i) {
		for (int k = 0; k < 5; ++k) {
			printf("%d ", a[i][k]);
		}
		printf("\n");
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int a[4][5] = {
	1, 3, 5, 2, 4, 6, 8, 3, 5, 5, 7
	};

	for (int i = 0; i < 4; ++i) {
		for (int k = 0; k < 5; ++k) {
			printf("%d ", a[i][k]);
		}
		printf("\n");
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int a[4][5] = {
		[2] ={1, 3, 5, 7, 9},
		[3] ={1, 1, 1, 1, 1},
	};

	for (int i = 0; i < 4; ++i) {
		for (int k = 0; k < 5; ++k) {
			printf("%d ", a[i][k]);
		}
		printf("\n");
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>

int main()
{
	int a[4][5] = {
		[2] ={[3] = 9},
		[3] ={[1] = 5, [4] = 7},
	};

	for (int i = 0; i < 4; ++i) {
		for (int k = 0; k < 5; ++k) {
			printf("%d ", a[i][k]);
		}
		printf("\n");
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

int main()
{
	//sadece b legal a ve c gecersiz
	//int a[][] = {1, 2, 3, 4, 5, 6, 7,8, 9};
	int b[][4] = {1, 2, 3, 4, 5, 6, 7, 8, 3};
	//int c[4][] = {1, 2, 3, 4, 5, 6, 7,8, 9};
	
	printf("asize(b) = %zu\n", asize(b));
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>

int main()
{
	int a[4][5] = {
		{1, 3, 5, 7, 9},
		{2, 4, 6, 8, 3},
		{5, 5, 5, 5, 5},
		{1, 2, 4, 3, 7},
	};

	for (int i = 0; i < 4; ++i) {
		for (int k = 0; k < 5; ++k) {
			printf("%d ", a[i][k]);
		}
		printf("\n");
	}
	pline();

	int *ptr = &a[0][0];
	int n = 4 * 5;

	while (n--) {
		printf("%d ", *ptr);
		++ptr;
		_getch();
	}


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include "nutility.h"

int main()
{
	int a[4][5] = {
		{1, 3, 5, 7, 9},
		{2, 4, 6, 8, 3},
		{5, 5, 5, 5, 5},
		{1, 2, 4, 3, 7},
	};

	for (int i = 0; i < 4; ++i) {
		display_array(a[i], 5);
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include "nutility.h"

int main()
{
	int a[4][5] = {
		{1, 3, 5, 7, 9},
		{2, 4, 6, 8, 3},
		{5, 5, 5, 5, 5},
		{1, 2, 4, 3, 7},
	};

	int(*p)[5] = a;

	for (int i = 0; i < 4; ++i) {
		//*p  //döngünün her turunda a'nýn elemaný olan 5 elemanlý dizi
		display_array(*p, 5);
		++p;
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include "nutility.h"

int main()
{
	//a dizisinin elemanlarý matrisin satýrlarý
	//matristeki tam sayilar ise a'nýn elemanlarýnýn elemanlarý
	int a[4][5] = {
		{1, 3, 5, 7, 9},
		{2, 4, 6, 8, 3},
		{5, 5, 5, 5, 5},
		{1, 2, 4, 3, 7},
	};
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include "nutility.h"

int main()
{
	int x = 10;
	int a[20];
	int b[5][20];
	int c[8][5][20];
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

7 Haziran 2020  Pazar

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include "nutility.h"

//vla
int main()
{
	int a[5][20];
	int(*p)[20] = a;
	int n = 5;

	while (n--) {
		set_random_array(*p, 20);
		++p;
	}

	for (int i = 0; i < 5; ++i) {
		for (int k = 0; k < 20; ++k)
			printf("%3d ", a[i][k]);
		printf("\n");
	}

	printf("\n\n");
	for (int i = 0; i < 5; ++i) {
		display_array(a[i], 20);
	}

	
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

çok boyutlu dizilerin fonksiyonlara geçilmesi

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"


void set_matrix10(int(*p)[10], size_t size)
{
	for (size_t i = 0; i < size; ++i) {
		for (size_t k = 0; k < 10; ++k) {
			p[i][k] = rand() % 10;
		}
	}
}

void display_matrix10(const int(*p)[10], size_t size)
{
	for (size_t i = 0; i < size; ++i) {
		for (size_t k = 0; k < 10; ++k) {
			printf("%d", p[i][k]);
		}
		printf("\n");
	}
	pline();
}

int main()
{
	int a[5][10];
	int b[8][10];
	int c[20][10];
	

	randomize();

	set_matrix10(a, 5);
	set_matrix10(b, 8);
	set_matrix10(c, 20);

	display_matrix10(a, 5);
	display_matrix10(b, 8);
	display_matrix10(c, 20);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"

void set_matrix10(int(*p)[10], size_t size)
{
	for (size_t i = 0; i < size; ++i) {
		for (size_t k = 0; k < 10; ++k) {
			p[i][k] = rand() % 10;
		}
	}
}

void display_matrix10(const int(*p)[10], size_t size)
{
	while (size--) {
		for (int i = 0; i < 10; ++i) {
			printf("%d", (*p)[i]);
		}
		++p;
		printf("\n");
	}
	pline();
}

int main()
{
	int a[5][10];
	int b[8][10];
	int c[20][10];

	randomize();

	set_matrix10(a, 5);
	set_matrix10(b, 8);
	set_matrix10(c, 20);

	display_matrix10(a, 5);
	display_matrix10(b, 8);
	display_matrix10(c, 20);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"


void set_matrix10(int p[][10], size_t size)
{
	for (size_t i = 0; i < size; ++i) {
		for (size_t k = 0; k < 10; ++k) {
			p[i][k] = rand() % 10;
		}
	}
}

void display_matrix10(const int(*p)[10], size_t size)
{
	while (size--) {
		for (int i = 0; i < 10; ++i) {
			printf("%d", (*p)[i]);
		}
		++p;
		printf("\n");
	}
	pline();
}

int main()
{
	int a[5][10];
	int b[8][10];
	int c[20][10];

	randomize();

	set_matrix10(a, 5);
	set_matrix10(b, 8);
	set_matrix10(c, 20);

	display_matrix10(a, 5);
	display_matrix10(b, 8);
	display_matrix10(c, 20);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
void func(int *ptr, ???);
	void func(int ptr[], ???);
-----------------------------
void foo(int **ptr, ???);
	void foo(int *ptr[], ???);
-----------------------------
void f(int (*ptr)[10], ????);
	void f(int ptr[][10], ????);
-----------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"


void set_matrix10(int (*p)[10], size_t size)
//void set_matrix10(int p[][10], size_t size)
{
	for (size_t i = 0; i < size; ++i) {
		for (size_t k = 0; k < 10; ++k) {
			p[i][k] = rand() % 10;
		}
	}
}

void display_matrix10(const int(*p)[10], size_t size)
{
	while (size--) {
		for (int i = 0; i < 10; ++i) {
			printf("%d", (*p)[i]);
		}
		++p;
		printf("\n");
	}
	pline();
}

int main()
{
	int a[5][10];
	int b[8][10];
	int c[20][10];
	

	randomize();

	set_matrix10(a, 5);
	set_matrix10(b, 8);
	set_matrix10(c, 20);


	display_matrix10(a, 5);
	display_matrix10(b, 8);
	display_matrix10(c, 20);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"


int main()
{
	int a[64] = { 0 };

	// a => &a[0]   (int *)
	// &a => int (*)[64]

	printf("sizeof(a) = %zu\n", sizeof(a));
	printf("sizeof(&a) = %zu\n", sizeof(&a));
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"

int main()
{
	int a[64] = { 0 };

	for (int i = 0; i < 10; ++i) {
		printf("%p    %p\n", a + i, &a + i);
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"


int main()
{
	int a[10][64] = { 0 };
	int b[64];

	a
	&a[0]
	&b

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"

void set_matrix(int *p, size_t row, size_t col);

int main()
{
	int a[5][20];  
	//int b[16][12];  
	//int c[8][40];  


	//set_matrix(a, 5, 20); 
	set_matrix(&a[0][0], 5, 20); 
	set_matrix(a[0], 5, 20); 
	set_matrix((int *)a, 5, 20); 

	//set_matrix(b, 16, 12);
	//set_matrix(c, 8, 40);
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"

void set_matrix(int *p, size_t row, size_t col)
{
	for (size_t i = 0; i < row; ++i) {
		for (size_t k = 0; k < col; ++k) {
			p[i * col + k] = rand() % 10;
		}
	}
}

void display_matrix(const int *p, size_t row, size_t col)
{
	for (size_t i = 0; i < row; ++i) {
		for (size_t k = 0; k < col; ++k) {
			printf("%d", p[i * col + k]);
		}
		printf("\n");
	}
	pline();
}

int main()
{
	int a[10][20];
	int b[5][30];

	randomize();
	set_matrix(&a[0][0], 10, 20);
	display_matrix(&a[0][0], 10, 20);

	set_matrix(&b[0][0], 5, 30);
	display_matrix(&b[0][0], 5, 30);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"

void set_matrix(void *vp, size_t row, size_t col)
{
	int *p = (int *)vp;
	for (size_t i = 0; i < row; ++i) {
		for (size_t k = 0; k < col; ++k) {
			p[i * col + k] = rand() % 10;
		}
	}
}

void display_matrix(const void *vp, size_t row, size_t col)
{
	const int *p = vp;
	for (size_t i = 0; i < row; ++i) {
		for (size_t k = 0; k < col; ++k) {
			printf("%d", p[i * col + k]);
		}
		printf("\n");
	}
	pline();
}

int main()
{
	int a[10][20];
	int b[5][30];
	int ar[20];

	randomize();
	set_matrix(a, 10, 20);
	display_matrix(a, 10, 20);

	set_matrix(b, 5, 30);
	display_matrix(b, 5, 30);

	//set_matrix(ar, 20, 40); //yanlis ancak gecerli

}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"


csmf(10)
csmf(30)
cdmf(10);
cdmf(30);

int main()
{
	int a[20][10];
	int b[5][30];

	randomize();

	set_matrix_10(a, 20);
	display_matrix_10(a, 20);
	set_matrix_30(b, 5);
	display_matrix_30(b, 5);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"

int main()
{
	char str[10][20];

	//str öyle bir dizi ki her bir elemani 20 elemanlý bir char dizi
	//str dizisi 20 ayrý yazýyý tutabilir

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"


int main()
{
	char str[][20] = { "mustafa", "ayse", "fatma" , "deniz" ,"necati"};
		
	printf("boyut str = %zu\n", asize(str));
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"


int main()
{
	char str[5][20] = { "mustafa", "ayse", "fatma" , "deniz" ,"necati"};
		
	for (int i = 0; i < 5; ++i) {
		puts(str[i]);
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"

int main()
{
		char names[][20] = {
			"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati", "ferhunde", "sirri", "tufancan", "meryem", "dogac", "veysel", "asim",
		"pinar"
		};

		//bu yaýlari yazdiralim

		for (size_t i = 0; i < asize(names); ++i) {
			printf("%s ", names[i]);
		}

		printf("\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include "nutility.h"

int main()
{
		char names[][20] = {
			"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati", "ferhunde", "sirri", "tufancan", "meryem", "dogac", "veysel", "asim",
		"pinar"
		};

		//bu yaýlari yazdiralim

		for (size_t i = 0; i < asize(names); ++i) {
			_strrev(names[i]);
		}

		//
		for (size_t i = 0; i < asize(names); ++i) {
			printf("%s ", names[i]);
		}

		printf("\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"


int main()
{
		char names[][20] = {
			"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati", "ferhunde", "sirri", "tufancan", "meryem", "dogac", "veysel", "asim",
		"pinar"
		};

		for (size_t i = 0; i < asize(names) - 1; ++i) {
			for (size_t k = 0; k < asize(names) - 1 - i; ++k) {
				if (strcmp(names[k], names[k + 1]) > 0) {
					char temp[20];
					strcpy(temp, names[k]);
					strcpy(names[k], names[k + 1]);
					strcpy(names[k + 1], temp);
				}
			}
		}

		for (size_t i = 0; i < asize(names); ++i) {
			printf("%s ", names[i]);
		}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"

void swap_names(char *p1, char *p2)
{
	char temp[20];

	strcpy(temp, p1);
	strcpy(p1, p2);
	strcpy(p2, temp);
}

int main()
{
		char names[][20] = {
			"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
		"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
		"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
		"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
		"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
		"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
		"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
		"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
		"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
		"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
		"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
		"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
		"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
		"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
		"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
		"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
		"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
		"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
		"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
		"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
		"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
		"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
		"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
		"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
		"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
		"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
		"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
		"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
		"saniye", "cesim", "aydan", "eda", "necati", "ferhunde", "sirri", "tufancan", "meryem", "dogac", "veysel", "asim",
		"pinar"
		};

		for (size_t i = 0; i < asize(names) - 1; ++i) {
			for (size_t k = 0; k < asize(names) - 1 - i; ++k) {
				if (strcmp(names[k], names[k + 1]) > 0)
					swap_names(names[k], names[k + 1]);
			}
		}

		for (size_t i = 0; i < asize(names); ++i) {
			printf("%s ", names[i]);
		}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"
#include <conio.h>


int main()
{
	char names[][20] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
	"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
	"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
	"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
	"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
	"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
	"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
	"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
	"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
	"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
	"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
	"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
	"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
	"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
	"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
	"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
	"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
	"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
	"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
	"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
	"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
	"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
	"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
	"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
	"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
	"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
	"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
	"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
	"saniye", "cesim", "aydan", "eda", "necati", "ferhunde", "sirri", "tufancan", "meryem", "dogac", "veysel", "asim",
	"pinar"
	};


	char *p[asize(names)];

	//pointer dizisinin elemanlarýna names dizisinin elemanlarýnýn adresleri
	//(yazilarin adresleri) ataniyor
	for (size_t i = 0; i < asize(names); ++i) {
		p[i] = names[i];
	}

	//pointer dizisi bubble sort algoritmasý ile siralaniyor
	//pekala bu siralamayý qsort fonksiyonuna yaptirabilirdik:

	for (size_t i = 0; i < asize(p) - 1; ++i) {
		for (size_t k = 0; k < asize(p) - 1 - i; ++k) {
			if (strcmp(p[k], p[k + 1]) > 0) {
				char *ptemp = p[k];
				p[k] = p[k + 1];
				p[k + 1] = ptemp;
			}
		}
	}

	for (size_t i = 0; i < asize(names); ++i) {
		printf("%s ", names[i]);
	}
	_getch();

	system("cls");
	for (size_t i = 0; i < asize(p); ++i) {
		printf("%s ", p[i]);
	}
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"
#include <conio.h>

int main()
{
	char names[][20] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
	"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
	"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
	"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
	"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
	"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
	"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
	"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
	"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
	"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
	"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
	"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
	"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
	"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
	"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
	"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
	"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
	"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
	"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
	"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
	"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
	"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
	"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
	"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
	"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
	"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
	"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
	"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
	"saniye", "cesim", "aydan", "eda", "necati", "ferhunde", "sirri", "tufancan", "meryem", "dogac", "veysel", "asim",
	"pinar"
	};


	char *p[asize(names)];

	//pointer dizisinin elemanlarýna names dizisinin elemanlarýnýn adresleri
	//(yazilarin adresleri) ataniyor
	for (size_t i = 0; i < asize(names); ++i) {
		p[i] = names[i];
	}

	//pointer dizisi bubble sort algoritmasý ile siralaniyor
	//pekala bu siralamayý qsort fonksiyonuna yaptirabilirdik:

	for (size_t i = 0; i < asize(p) - 1; ++i) {
		for (size_t k = 0; k < asize(p) - 1 - i; ++k) {
			if (strcmp(p[k], p[k + 1]) > 0) {
				char *ptemp = p[k];
				p[k] = p[k + 1];
				p[k + 1] = ptemp;
			}
		}
	}

	int n;

	printf("kacinci isim: ");
	scanf("%d", &n);

	printf("siralanmis listede %d. isim %s\n", n, p[n - 1]);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
Yazý => sayi
sayi => yazi

dönüþümleri

bellek üstünde formatlý okuma yazma iþleri
in-memory formatted input/output

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"
#include <conio.h>


void display_names(char *const *p, size_t size)
{
	for (size_t i = 0; i < size; ++i)
		printf("%s ", p[i]);
	pline();
}



void sort_ascending(char **p, size_t size)
{
	for (size_t i = 0; i < size - 1; ++i) {
		for (size_t k = 0; k < size - 1 - i; ++k) {
			if (strcmp(p[k], p[k + 1]) > 0) {
				char *ptemp = p[k];
				p[k] = p[k + 1];
				p[k + 1] = ptemp;
			}
		}
	}
}


void sort_descending(char **p, size_t size)
{
	for (size_t i = 0; i < size - 1; ++i) {
		for (size_t k = 0; k < size - 1 - i; ++k) {
			if (strcmp(p[k], p[k + 1]) < 0) {
				char *ptemp = p[k];
				p[k] = p[k + 1];
				p[k + 1] = ptemp;
			}
		}
	}
}

void sort_special(char **p, size_t size)
{
	for (size_t i = 0; i < size - 1; ++i) {
		for (size_t k = 0; k < size - 1 - i; ++k) {
			size_t len1 = strlen(p[k]);
			size_t len2 = strlen(p[k + 1]);
			if (len1 > len2 || len1 == len2 && strcmp(p[k], p[k + 1]) > 0) {
				char *ptemp = p[k];
				p[k] = p[k + 1];
				p[k + 1] = ptemp;
			}
		}
	}
}


int main()
{
	char names[][20] = {
		"kamil", "korhan", "beril", "turhan", "ufuk", "murathan", "figen", "malik", "bulent", "cengiz",
	"baran", "nurullah", "dilber", "tuncer", "recep", "pelinsu", "cihan", "yesim", "aziz", "kazim",
	"afacan", "tevfik", "sumeyye", "hande", "aslihan", "emine", "temel", "gulsah", "hasan", "gul",
	"soner", "ayla", "cuneyt", "tekin", "binnaz", "emrecan", "yasar", "yilmaz", "feraye", "tugra",
	"melek", "garo", "yurdagul", "tarik", "derin", "handan", "aytac", "petek", "cem", "aylin",
	"gursel", "haldun", "nazife", "hulusi", "sevilay", "sabriye", "gulden", "tansel", "ege", "turgut",
	"cahit", "berk", "nazli", "aykut", "kayhan", "cemre", "murat", "kunter", "gunay", "cahide",
	"nedim", "metin", "kerim", "utku", "cumhur", "kurthan", "poyraz", "can", "candan", "hikmet",
	"izzet", "perihan", "tufan", "zahide", "samet", "melih", "hakan", "ayse", "refik", "efe",
	"belgin", "bilal", "niyazi", "fugen", "melike", "saadet", "cemile", "nahit", "arda", "ugur",
	"aynur", "yasin", "polat", "naz", "yusuf", "gulsen", "nazif", "demir", "egemen", "necmi",
	"fazilet", "celal", "ismail", "kamile", "mahir", "caner", "suleyman", "cezmi", "diana", "sadullah",
	"atif", "huseyin", "necmettin", "devlet", "sezen", "hulya", "necmiye", "ece", "julide", "onat",
	"emre", "sinem", "teoman", "irmak", "cihat", "adem", "bilgin", "muzaffer", "suphi", "pelin",
	"yalcin", "kenan", "atalay", "akin", "durmus", "haluk", "kelami", "alparslan", "busra", "kasim",
	"durriye", "tarcan", "nihal", "gizem", "bilge", "dilek", "yasemin", "fahri", "furkan", "papatya",
	"hakki", "fadime", "devrim", "abdi", "tayyip", "yurdakul", "zekai", "nagehan", "ata", "naci",
	"mert", "yelda", "cebrail", "rumeysa", "beyhan", "azize", "cemil", "sezer", "beste", "ciler",
	"enes", "cahide", "tayyar", "cansu", "burak", "ediz", "sefa", "anil", "alev", "atil", "muruvvet",
	"nefes", "cetin", "tansu", "bora", "sevim", "sarp", "fuat", "kaya", "zarife", "tanju", "sadettin",
	"su", "kerem", "handesu", "jade", "halime", "gurbuz", "okan", "azmi", "sevda", "leyla", "hilal",
	"galip", "alican", "atakan", "feramuz", "efecan", "osman", "nihat", "sefer", "zerrin", "binnur",
	"taner", "kayahan", "nalan", "tonguc", "kezban", "kaan", "abdulmuttalip", "dost", "deniz", "refika",
	"tijen", "umit", "yunus", "zahit", "melisa", "hulki", "hilmi", "edip", "muslum", "canan",
	"dogan", "berivan", "adnan", "helin", "fikret", "derya", "sidre", "abdullah", "billur", "nurdan",
	"agah", "engin", "burhan", "suheyla", "esra", "sadri", "sezai", "esen", "askin", "rupen", "pinat",
	"ercument", "birhan", "ahmet", "polathan", "tayfun", "mustafa", "zubeyde", "pakize", "nevsin", "naciye",
	"erdem", "asim", "orkun", "alex", "walter", "quasimado", "sami", "sade", "demet", "keriman", "yavuz", "mehmet", "muhsin",
	"saniye", "cesim", "aydan", "eda", "necati", "ferhunde", "sirri", "tufancan", "meryem", "dogac", "veysel", "asim",
	"pinar"
	};
	char *p[asize(names)];

	//pointer dizisinin elemanlarýna names dizisinin elemanlarýnýn adresleri
	//(yazilarin adresleri) ataniyor
	for (size_t i = 0; i < asize(names); ++i) {
		p[i] = names[i];
	}



	for (;;) {
		printf("[1] kucukten buyuge\n"
			"[2] buyukten kucuge \n"
			"[3] ozel siralama \n"
			"secenegi girin: "
		);

		int option;

		scanf("%d", &option);

		switch (option) {
		case 1: sort_ascending(p, asize(p)); break;
		case 2: sort_descending(p, asize(p)); break;
		case 3: sort_special(p, asize(p)); break;
		}

		display_names(p, asize(p));
		_getch();
		system("cls");
	}
}

//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char str[SIZE];

	printf("bir yazi girin: ");
	sgets_s(str, SIZE);

	printf("girilen yazi [%s]\n", str);
	int val = 0;

	for (int i = 0; str[i] != '\0'; ++i) {
		val = val * 10 + str[i] - '0';
	}

	printf("val = %d\n", val);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char str[SIZE];
	int val;

	printf("bir yazi girin: ");
	sgets_s(str, SIZE);

	printf("girilen yazi [%s]\n", str);

	val = atoi(str);

	printf("val = %d\n", val);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"


#define			SIZE		100


int main()
{
	char str[SIZE];
	int day, mon, year;

	printf("bir tarih girin gg-aa-yyyy :");
	sgets_s(str, SIZE); //  07-06-2020

	printf("girilen yazi [%s]\n", str);
	
	day = atoi(str);
	mon = atoi(str + 3);
	year = atoi(str + 6);
	

	printf("%d yilinin %d.ayinin %d.gunu\n", year, mon, day);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char str[SIZE];
	int ival;
	double dval;

	printf("bir yazi girin: ");
	sgets_s(str, SIZE); 

	printf("girilen yazi [%s]\n", str);
	ival = atoi(str);
	dval = atof(str);

	printf("ival = %d\n", ival);
	printf("dval = %f\n", dval);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char str[SIZE]; //345ahmet
	char *p;

	printf("bir yazi girin: ");
	sgets_s(str, SIZE); 

	printf("girilen yazi [%s]\n", str);
	unsigned long uval = strtoul(str, &p, 10);

	printf("idx = %d\n", p - str);

	printf("sayi = %lu\n", uval);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"


#define			SIZE		100


int main()
{
	char str[SIZE]; 
	printf("bir yazi girin: ");
	sgets_s(str, SIZE); 

	printf("girilen yazi [%s]\n", str);

	unsigned long uval = strtoul(str, NULL, 16);

	printf("sayi = %lu\n", uval);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "nutility.h"

#define			SIZE		100

int main()
{
	int x;
	char str[SIZE];

	printf("bir tam sayi girin:  ");
	scanf("%d", &x);
	
	int temp = x;  //54198 
	int idx = 0;

	while (temp) {  //
		str[idx++] = temp % 10 + '0';
		temp /= 10;
	}
	str[idx] = '\0';
	_strrev(str);

	printf("(%s)\n", str);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
char* itoa(int val, char *ptr, int radix);

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char str[SIZE];
	int ival;
	printf("bir tamsayi girin: ");
	scanf("%d", &ival);

	printf("10'luk sayi sistemi:  ");
	_itoa(ival, str, 10);
	printf("(%s)\n", str);
	printf("16'lik sayi sistemi:  ");
	_itoa(ival, str, 16);
	printf("(%s)\n", str);

	printf("8'lik sayi sistemi:  ");
	_itoa(ival, str, 8);
	printf("(%s)\n", str);

	printf("2'lik sayi sistemi:  ");
	_itoa(ival, str, 2);
	printf("(%s)\n", str);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


bellek üstünde formatlýu okuma yazma fonksiyonlarý

int printf(const char *pfm, ...);
int sprintf(char *pbuf, const char *pfm, ...);
		int snprintf
int fprintf(FILE *f, const char *pfm, ...);
---------------------------------------------------
int scanf(const char *pfm, ...);
int sscanf(const char *pbuf, const char *pfm, ...);
int fscanf(FILE *f, const char *pfm, ...);
---------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	int x = 7823481;
	char buffer[SIZE];

	sprintf(buffer, "%d", x);
	//printf("%d", x);

	printf("(%s)\n", buffer);
	_strrev(buffer);
	printf("(%s)\n", buffer);
	//..
	
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	char name[100] = "necati";
	char surname[100] = "ergin";
	int idx = 9;
	char file_name[100];

	// veysel_elek_045.txt
	sprintf(file_name, "%s_%s_%03d.txt", name, surname, idx);
	printf("(%s)\n", file_name);

	FILE *f = fopen(file_name, "w");
	///
	fclose(f);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		10

int main()
{
	char name[100] = "ali";
	char surname[100] = "er";
	int idx = 9;
	char file_name[SIZE];

	int retval = snprintf(file_name, SIZE, "%s_%s_%d.txt", name, surname, idx);

	printf("retval = %d\n", retval);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		10

int main()
{
	char name[100] = "mustafa";
	char surname[100] = "aksoy";
	int idx = 9;
	char file_name[SIZE];

	int retval = snprintf(file_name, SIZE, "%s_%s_%d.txt", name, surname, idx);
	printf("(%s)\n", file_name);
	printf("retval = %d\n", retval);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"

#define			SIZE		100

int main()
{
	double dval = 123.879234987;
	char buffer[SIZE];

	sprintf(buffer, "%.8f", dval);

	printf("(%s)\n", buffer);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"
#include <conio.h>

#define			SIZE		100

int main()
{
	randomize();
	char buffer[SIZE];
	
	sprintf(buffer, "%s %s %s\n", random_name(), random_surname(), random_town());
	printf("%s", buffer);
	_strrev(buffer);
	printf("%s", buffer);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"
#include <conio.h>

#define			SIZE		100

int main()
{
	int x, y, z;

	printf("uc sayi giriniz: ");
	scanf("%d%d%d", &x, &y, &z);

	printf("x = %d\n", x);
	printf("y = %d\n", y);
	printf("z = %d\n", z);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"
#include <conio.h>

#define			SIZE		100

int main()
{
	int x, y, z;
	char str[100] = "7612 981034   65234";

	int retval = sscanf(str, "%d%d%d", &x, &y, &z);
	printf("retval = %d\n", retval);

	printf("x = %d\n", x);
	printf("y = %d\n", y);
	printf("z = %d\n", z);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"
#include <conio.h>

#define			SIZE		100

int main()
{
	int x;
	char buffer[SIZE];

	printf("bir sayi girin:  ");  //1234567
	scanf("%s", buffer);
	_strrev(buffer);
	//
	sscanf(buffer, "%d", &x);
	printf("x = %d\n", x);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

programlarýn (proseslerin) sonlandýrýlmasý

exit 
atexit
ve abort iþlevleri

----------------------------------------------

normal termination   ===>		exit iþlevine yapýlan çaðrý
abnormal termination ===>       abort iþlevine yapýlan çaðrý


------------------------------
normal termination
	program belirli güvencelerin yerinbe getirilmesi ile sonlandýrýlýyor
		yazma amaçlý dosyalarýn buffer'larýnýn flush edilmesi
		at_exit ile kayýt edilen fonksiyonlarýn çaðrýlmasý


#include <stdlib.h>

void exit(int status);

fonksiyona 0 deðerinin argüman olarak gönderilmesi baþarý ile programýn sonlandýrýldýðý
fonksiyona 0 dýþý bir deðerin argüman olarak gönderilmesi programýn baþarýsýzlýk nedeniyle sonlandýrýldýðý

#define  EXIT_SUCCESS    0
#define  EXIT_FAILURE    1

	exit(EXIT_FAILURE);


	
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"
#include <conio.h>

#define			SIZE		100

int main()
{
	//return 0;
	exit(EXIT_SUCCESS);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"
#include <conio.h>

#define			SIZE		100

void f4(void)
{
	printf("f4 basladi\n");
	exit(EXIT_FAILURE);
	printf("f4 sona erdi\n");
}

void f3(void)
{
	printf("f3 basladi\n");
	f4();
	printf("f3 sona erdi\n");
}


void f2(void)
{
	printf("f2 basladi\n");
	f3();
	printf("f2 sona erdi\n");
}


void f1(void)
{
	printf("f1 basladi\n");
	f2();
	printf("f1 sona erdi\n");
}

int main()
{
	printf("main basladi\n");
	f1();
	printf("main sona eriyor\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


int atexit(void (*)(void));


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"
#include <conio.h>

#define			SIZE		100

void f4(void)
{
	printf("f4 cagrildi\n");
}

void f3(void)
{
	printf("f3 cagrildi\n");
}

void f2(void)
{
	printf("f2 cagrildi\n");
}


void f1(void)
{
	printf("f1 cagrildi\n");
}

int main()
{
	atexit(f1);
	atexit(f2);
	atexit(f3);
	atexit(f4);

	//sýrasýyla f1, f2, f3 ve f4 fonksiyonlari kayit edildi
	//bu noktadan sonra exit iþlevi çaðrýlýrsa exit iþlevi
	//kayýt sýrasý ile ters sýra ile bu fonksiyonlari cagiracak
	exit(EXIT_FAILURE);

}



void abort(void);

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "nutility.h"
#include <conio.h>

#define			SIZE		100

void f4(void)
{
	printf("f4 basladi\n");
	abort();
	printf("f4 sona erdi\n");
}

void f3(void)
{
	printf("f3 basladi\n");
	f4();
	printf("f3 sona erdi\n");
}


void f2(void)
{
	printf("f2 basladi\n");
	f3();
	printf("f2 sona erdi\n");
}


void f1(void)
{
	printf("f1 basladi\n");
	f2();
	printf("f1 sona erdi\n");
}

int main()
{
	printf("main basladi\n");
	f1();
	printf("main sona erdi\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


dinamik bellek yönetimi
dynamic memory management


heap	
------------------------------

allocate

free / deallocate
---------------------------------

kullanýlacak bellek alanýnýn büyüklüðü derleme zamanýnda
deðil programýn çalýþma zamanýnda belirleniyor


char str[1000];

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

int main()
{
	int n;
	int *pd;

	printf("kac tam sayi:  ");
	scanf("%d", &n);
	pd = malloc(n * sizeof(int));
	if (pd == NULL) {
		printf("bellek yetersiz\n");
		return 1;
	}
	//.......
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

int main()
{
	int n;
	int *pd;

	printf("kac tam sayi:  ");
	scanf("%d", &n);
	
	if ((pd = malloc(n * sizeof(int))) == NULL) {
		fprintf(stderr, "bellek yetersiz\n");
		exit(EXIT_FAILURE);
	}
	//...
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"

int main()
{
	int n;
	int *pd;

	randomize();
	printf("kac tam sayi:  ");
	scanf("%d", &n);
	

	if ((pd = (int *)malloc(n * sizeof(int))) == NULL) {
		fprintf(stderr, "bellek yetersiz\n");
		exit(EXIT_FAILURE);
	}

	set_random_array(pd, n);
	sort(pd, n);
	display_array(pd, n);
	////

	free(pd);
	//program devam ediyor


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
call     bytes
50		 1000 |    50 * 1000 = 50000      50 * 16   = 800
1000     50   |   1000 * 50   = 50000    1000 * 16  = 16000


#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>

int main()
{
	int n;
	int *pd;

	printf("kac tam sayi:  ");
	scanf("%d", &n);
	pd = malloc(n * sizeof(int));
	if (pd == NULL) {
		printf("bellek yetersiz\n");
		return 1;
	}
	//.......
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"
#include <string.h>

int main()
{
	char str[1000];
	///
	char *ptr = str;

	free(ptr); //u.b
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"
#include <string.h>


int main()
{
	int n;
	///code

	int *pd = malloc(n * sizeof(double));
	int *ptr = pd;

	///
	free(pd); 
	//yukarýdaki cagridan sonra hem pd
	//hem de ptr dangling pointer (invalid pointer)
	free(ptr);  //ub

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"
#include <string.h>

int main()
{
	int n;
	int *pd;

	randomize();

	printf("kac tamsayi:  ");
	scanf("%d", &n);
	if ((pd = malloc(n * sizeof(int))) == NULL) {
		fprintf(stderr, "bellek yetersiz\n");
		return 1;
	}
	set_random_array(pd, n);
	display_array(pd, n);

	free(pd);
	//pd is a dangling pointer

	//set_random_array(pd, n); //ub
	display_array(pd, n);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"
#include <string.h>
int main()
{
	int n;
	int *pd;

	randomize();

	printf("kac tamsayi:  ");
	scanf("%d", &n);
	if ((pd = malloc(n * sizeof(int))) == NULL) {
		fprintf(stderr, "bellek yetersiz\n");
		return 1;
	}
	set_random_array(pd, n);
	display_array(pd, n);

	free(pd);
	pd = NULL;
	//pd is a valid pointer


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

void free(void *vp);

1. free iþlevine dinamik bellek fonksiyonlarý ile elde edilmemiþ bir bellek bloðunun adresini
geçmeniz tanýmsýz davranýþ

2. free iþlevi ile edinilmiþ bir bellek bloðunu küçültemezsiniz. (tanýmsýz davranýþ)

3. free edilmiþ bir bellek bloðunun adresinin yenide free fonksiyonuna gönderilmesi (double deletion) tanýmsýz 

4. free edilmiþ bir bellek bloðunun adresini asla kullanma (tanýmsýz davranýþ)

5. elde edilmiþ bir bellek bloðunu free etmemek
(memory leak)
(memory leakage)


void func()
{
	????
	pd = malloc();


	//free(pd);
}


free iþlevine NULL pointer deðerinin geçilmesi tanýmsýz davranýþ deðil. (No-op)

void free(void *vptr)
{
	if (vptr == NULL)
		return;
	//....
}



int *pd = NULL;
////


malloc iþlevine gönderilen deðer 0 ise
======================================

1) Bu durumda malloc iþlevi NULL pointer döndürebilir.

2) malloc "geçerli" bir adres döndürebilir.
	- bu adresi free iþlevine geçerseniz UB olmaz.
	- bu adresi dereference etmek tanýmsýz davranýþ

	#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>


int main()
{
	int x = 0;

	int *pd = malloc(x);

	if (pd)
		printf("adres: %p\n", pd);
	else
		printf("malloc NULL pointer dondurmus\n");

	free(pd);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include <string.h>


int main()
{
	int n = 100;

	//malloc(n * sizeof(int))
	//calloc(n, sizeof(int))
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"
#include <string.h>


int main()
{
	int n;

	printf("kac tam sayi : ");
	scanf("%d", &n);
	int *pd = calloc(n, sizeof(int));
	if (!pd) {
		printf("bellek yetersiz\n");
		return 1;
	}

	display_array(pd, n); 

	free(pd);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"
#include <string.h>


int main()
{
	int n;

	printf("kac tam sayi : ");
	scanf("%d", &n);
	int *pd = malloc(n * sizeof(int));
	if (!pd) {
		printf("bellek yetersiz\n");
		return 1;
	}
	memset(pd, 0, n * sizeof(int)); //bellek bloðu clear edilmis oluyor

	display_array(pd, n); 

	free(pd);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

	calloc(n, sizeof(int))
	
	calloc(sizeof(int), n)

#include <stdlib.h>
#include <stdio.h>

//necati'ye cok sýk sorulan kötü bir soru
//free fonksiyonu kendisine gönderdiðimiz pointer deðiþkenin deðerini NULL yapýyor mu?
//hayir, zaten bunu yapma imkaný yok. Cunbku free "call by value"

int main()
{
	int n = 1000;

	int* pd = malloc(n * sizeof(int));
	if (!pd) {
		printf("bellek yetersiz\n");
		return 1;
	}

	//
	free(pd);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

memset(pd, n, n * sizeof(int));


dinamik bellek yönetimine iliþkin bazý temalar
==============================================
#include <stdlib.h>
#include <stdio.h>
#include <string.h>


#include "nutility.h"

#define			SIZE		1000

int main()
{
	char str[SIZE];
	char *pd;

	printf("bir yazi girin: ");
	sgets(str);
	printf("[%s]\n", str);
	pd = _strdup(str);
	printf("[%s]\n", pd);
	_strrev(pd);
	printf("[%s]\n", pd);
	printf("[%s]\n", str);

	free(pd);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>
#include <string.h>


#include "nutility.h"

#define			SIZE		1000

char* mystrdup(const char *p)
{
	char *pd = (char *)malloc(strlen(p) + 1);
	if (!pd) {
		fprintf(stderr, "bellek yetersiz\n");
		exit(EXIT_FAILURE);
	}
	/*strcpy(pd, p);
	return pd;*/

	return strcpy(pd, p);
}


int main()
{
	char str[SIZE];
	char *pd;

	printf("bir yazi girin: ");
	sgets(str);
	printf("[%s]\n", str);
	pd = mystrdup(str);
	printf("[%s]\n", pd);
	_strrev(pd);
	printf("[%s]\n", pd);
	printf("[%s]\n", str);

	free(pd);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


T *func(?????);


T *p = func();

	fonksiyon otomatik ömürlü bir nesne adresi döndürüyor olamaz

a) fonksiyonun statik ömürlü bir nesne adresi döndürmesi

b) fonksiyonun dinamik ömürlü bir nesne adresi döndürmesi
c) fonksiyonun benden aldýðý adresi bana geri döndürmesi

#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <string.h>



#define			SIZE		100


char *get_random_name(void)
{
	static char name[SIZE];

	return strcpy(name, random_name());
}

int main()
{
	char *pa[10];

	randomize();
	for (int i = 0; i < 10; ++i) {
		pa[i] = get_random_name(); //yanlis
	}
	//
	//

	for (int i = 0; i < 10; ++i) {
		puts(pa[i]);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <string.h>
#include <conio.h>

#define			SIZE		100


char *get_random_name(void)
{
	static char name[SIZE];

	return strcpy(name, random_name());
}

int main()
{
	randomize();
	for (int i = 0; i < 10; ++i) {
		char *ptr = get_random_name(); 
		printf("%s %zu\n", ptr, strlen(ptr));
		_strrev(ptr);
		puts(ptr);
		_getch();

	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <string.h>
#include <conio.h>


#define			SIZE		100

char *get_random_name(void)
{
	static char name[SIZE];

	return strcpy(name, random_name());
}

int main()
{
	for (int i = 0; i < 10; ++i) {
		printf("%p\n", get_random_name());
	}
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>

#define			SIZE		100

char *get_random_name(void)
{
	const char *p = random_name();
	char *pd = malloc(strlen(p) + 1);
	if (!pd) {
		printf("bellek yetersiz\n");
		exit(EXIT_FAILURE);
	}

	return strcpy(pd, p);
}

int main()
{
	char *p[10];

	randomize();
	for (int i = 0; i < 10; ++i) {
		p[i] = get_random_name();
	}

	///

	for (int i = 0; i < 10; ++i) {
		printf("%s ", p[i]);
	}
	printf("\n");

	////

	for (int i = 0; i < 10; ++i) {
		free(p[i]);
	}

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>

#define			SIZE		100

//strconcat islevi adresibi aldigi 2 yaziyi  dinamik bir bellek bloðunda birlestirecek
//ve birlesmis yazýnýn adresi dondurecek

char *strconcat(const char *p1, const char *p2)
{
	char *pd = malloc(strlen(p1) + strlen(p2) + 1);
	if (!pd) { printf("bellek yetersiz\n"); exit(EXIT_FAILURE); }

	return strcat(strcpy(pd, p1), p2);
}


//char *strconcat(const char *p1, const char *p2)
//{
//	char *pd = malloc(strlen(p1) + strlen(p2) + 1);
//	if (!pd) { printf("bellek yetersiz\n"); exit(EXIT_FAILURE); }
//
//	strcpy(pd, p1);
//	strcat(pd, p2);
//
//	return pd;
//}

int main()
{
	char s1[SIZE];
	char s2[SIZE];

	printf("birinci yaziyi girin: ");
	sgets(s1);
	printf("ikinci yaziyi girin: ");
	sgets(s2);

	char *ptr = strconcat(s1, s2);

	printf("[%s]\n", ptr);
	_strupr(ptr);
	printf("[%s]\n", ptr);
	printf("[%s]  [%s]\n", s1, s2);

	free(ptr);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>

#define			SIZE		1000

//strconcat islevi adresibi aldigi 2 yaziyi  dinamik bir bellek bloðunda birlestirecek
//ve birlesmis yazýnýn adresi dondurecek

char *strconcat(const char *p1, const char *p2)
{
	char *pd = malloc(strlen(p1) + strlen(p2) + 1);
	if (!pd) { printf("bellek yetersiz\n"); exit(EXIT_FAILURE); }

	return strcat(strcpy(pd, p1), p2);
}

int main()
{
	char *p;

	for (int i = 0; i < 5; ++i) {
		p = strconcat(random_name(), random_name());
		puts(p);
	}

	free(p);  //memory_leak
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>

#define			SIZE		1000

int main()
{
	//char str[SIZE] = "";
	char str[SIZE];
	str[0] = '\0';

	randomize();

	for (int i = 0; i < 5; ++i) {
		strcat(str, random_name());
	}

	printf("%s\n", str);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

int x = 15;

0000 0000 0000 0000 0000 0000 0000 1111

2000			0000 0000     
2001			0000 0000
2002            0000 0000
2003            0000 1111


2000			0000 1111     
2001			0000 0000
2002            0000 0000
2003            0000 0000


endianness       

little endian   (intel tarzý mimari)
big endian      (motorola tarzý)

#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>



int main()
{
	int x = 1;
	int *ptr = &x;

	if (*(char *)ptr != 0)
		printf("little endian\n");
	else
		printf("big endian\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

0000 0001 
0000 0000 
0000 0000 
0000 0000

#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>



int main()
{
	int x = 1;

	if (*(char *)&x)
		printf("little endian\n");
	else
		printf("big endian\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
sistemin little/big endian olduðunu (endianness) test etmek:

#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>



int main()
{
	int x = 1;

	if (*(char *)&x)
		printf("little endian\n");
	else
		printf("big endian\n");
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
int *p[10];

int **pd = (int **)malloc(n * sizeof(int *));

örneðin bu surumda pd[5]  int * türünden bir nesne
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>

int main()
{
	int row, col;
	int **pd;

	printf("matrisin satir ve sutun sayisini girin: ");
	scanf("%d%d", &row, &col);

	pd = (int **)malloc(row * sizeof(int *));
	if (!pd) { printf("bellek yetersiz\n"); exit(EXIT_FAILURE); }

	for (int i = 0; i < row; ++i) {
		pd[i] = (int *)malloc(col * sizeof(int));
		if (!pd[i]) { 
			printf("bellek yetersiz\n"); 
			exit(EXIT_FAILURE); 
		}
	}

	////
	for (int i = 0; i < row; ++i) {
		for (int k = 0; k < col; ++k) {
			pd[i][k] = rand() % 10;
		}
	}

	/////

	for (int i = 0; i < row; ++i) {
		for (int k = 0; k < col; ++k) {
			printf("%d", pd[i][k]);
		}
		printf("\n");
	}

	printf("\n\n\n");
	int *ptr = &pd[0][0];
	int n = row * col;

	while (n--) {
		printf("%d ", *ptr++);
		_getch();

	}


	for (int i = 0; i < row; ++i) {
		free(pd[i]);
	}

	free(pd);


}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------
#define _CRT_SECURE_NO_WARNINGS

#include "nutility.h"
#include <stdio.h>
#include <string.h>
#include <conio.h>
#include <stdlib.h>

int main()
{
	int row, col;
	int *pd;

	printf("matrisin satir ve sutun sayisini girin: ");
	scanf("%d%d", &row, &col);

	pd = (int *)malloc(row * col * sizeof(int));
	if (!pd) { printf("bellek yetersiz\n"); exit(EXIT_FAILURE); }

	randomize();
	for (int i = 0; i < row; ++i) {
		for (int k = 0; k < col; ++k) {
			pd[i * col + k] = rand() % 10;			//m[i][k]
		}
	}
	/////
	//matris yazdiriliyor

	for (int i = 0; i < row; ++i) {
		for (int k = 0; k < col; ++k) {
			printf("%d", pd[i * col + k]);
		}
		printf("\n");
	}
	printf("\n\n\n");

	int *ptr = pd;
	int n = row * col;

	while (n--) {
		printf("%d ", *ptr++);
		_getch();
	}

	free(pd);

}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <stdlib.h>
#include "nutility.h"


int main()
{
	int n;
	int *pd;
	int nplus;

	randomize();
	printf("kac tam sayi:  ");
	scanf("%d", &n);
	pd = malloc(n * sizeof(int));
	if (!pd) { printf("bellek yetersiz\n"); exit(EXIT_FAILURE); }
	set_random_array2(pd, n, 0, 100);
	display_array(pd, n);
	printf("kac tam sayi daha eklensin: ");
	scanf("%d", &nplus);
	//dizinin yeni boyutunu n + nplus
	pd = realloc(pd, (n + nplus) * sizeof(int));
	if (pd == NULL) {
		printf("dizi buyutulemiyor\n");
		return 1;
	}
	set_random_array2(pd + n, nplus, 600, 700);
	display_array(pd, n + nplus);

	free(pd);
}
//----------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------


